 文件：
--------
core_test.c 核心库的示例程序
p2ptest.c 扩展库的示例程序



 编译:
--------
1. 编译p2p库
PC:
  make

Android:
  make arch=android

iOS:
  这个要自己去修改Makefile中对CROSS的定义再试了
--------------------------------------------------------------------


关于p2p客户端:
--------------
P2P通信的两点（客户端与Camera）之间只有一个连接。
各种应用（控制、媒体流、文件传输等等），在时间上混合在一起在这个一连接上传输。
所以至少要有一种区分不同数据包的方法，接收端可以不同类型数据分别提取出来。

开发包提供一种“逻辑通道”的机制，用以区分不同应用。一个逻辑通道的上的数据收发，
不会影响其它逻辑通道，实际效果就象是两点间存在多个连接。

有两种类型的逻辑通道：命令通道和媒体通道。
两种通道的区别在于发送和接收的方式，而有效载荷的类型并没有限制。

命令通道上的每个包有效数据不超过1400字节。大于此限制的包，发送方要分多次发送，
并在接收方手工重组。
使用P2pConnSendCommand发送命令

在媒体通道上传输的数据由关键帧和非关键帧组成，可以在创建时指定最大帧大小。
大的数据帧被自动分成多个包发送。如果网络忙，发送方可以选择放弃发送，直到
网络排空，然后在下一个关键帧到来时重新开始发送。接收方自动重组帧，当一个
完整帧到来后，才会返回给应用层。如果发送方丢弃包，接收方也会丢弃该包所在帧。
放弃发送是一种可选的行为，同时也可以没有非关键帧，这些视具体应用而定。
一个媒体通道上只应有一种媒体类型传输。
使用P2pConnSendFrame发送帧

一个连接最多支持4个命令通道和32个媒体通道。在连接建立时，只数据通道0
是打开的，其余通道要双方协商后打开。向没有打开的通道发送数据会在对端被丢弃。

为了减少数据复制的开销，开发包为每个命令和媒体通道分配一个循环缓冲区，读取操作
获取的是缓冲区内一块内存的指针。该内存块在调用释放函数释放给缓冲区管理程序之前，
不能用于接收新的数据。
媒体通道的数据使用
P2pConnGetFrame/P2pConnReleaseFrame 读取和释放
命令通道使用
P2pConnRecvResponse/P2pConnReleaseResponse 读取和释放命令响应

为避免循环冲满而堵塞，使用者要尽快读取并释放数据。如果要长时间使用读取到的数据，
应把相应的数据复制出来。

//////////////////////////////////////////////
错误码定义在 p2pconst.h

