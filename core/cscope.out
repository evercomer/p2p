cscope 15 $HOME/work/p2p/core               0000805260
	@basetype.h

1 #i‚de‡
__ba£ty≥_h__


2 
	#__ba£ty≥_h__


	)

4 
	töt8
;

5 
	tuöt8
;

6 
	töt16
;

7 
	tuöt16
;

8 
	töt32
;

9 
	tuöt32
;

11 #ifde‡
WIN32


13 
__öt64
 
	tINT64
;

14 
	t__öt64
 
	tUINT64
;

15 
	#öt64
 
__öt64


	)

16 
	#uöt64
 
__öt64


	)

18 #ñi‡
deföed
(
__LINUX__
)

20 
	tBYTE
;

21 
	tWORD
;

22 
	tDWORD
;

24 
	tUCHAR
;

25 
	tUSHORT
;

26 
	tUINT
;

27 
	tULONG
;

29 
	~<°döt.h
>

30 
	#INT64
 
öt64_t


	)

31 
	#UINT64
 
uöt64_t


	)

33 
	#öt64
 
öt64_t


	)

34 
	#uöt64
 
uöt64_t


	)

36 
	tLONG
;

38 c⁄° * 
	tLPCSTR
;

39 * 
	tLPSTR
;

41 
	#BOOL
 

	)

42 
	#TRUE
 1

	)

43 
	#FALSE
 0

	)

	@chnbuf.c

4 
	~"chnbuf.h
"

6 
	#LOCK
 
	`PA_MuãxLock
(
pCb
->
hMuãx
)

	)

7 
	#UNLOCK
 
	`PA_MuãxU∆ock
(
pCb
->
hMuãx
)

	)

9 
P2PCHNBUFF
 *
	$ChnBuffCª©e
(
UINT
 
size
, UINT 
nSa„S∑˚
)

11 
P2PCHNBUFF
 *
pCb
 = (P2PCHNBUFF*)
	`ˇŒoc
((P2PCHNBUFF), 1);

12 
pCb
->
nSa„S∑˚
 =ÇSafeSpace;

13 
pCb
->
nBuf„rSize
 = 
size
;

14 
	`PA_EvítInô
(
pCb
->
hEvtW
);

15 
	`PA_EvítInô
(
pCb
->
hEvtR
);

16 
	`PA_MuãxInô
(
pCb
->
hMuãx
);

17 
pCb
->
pBuf„r
 = (
BYTE
*)
	`mÆloc
(
size
);

19 
pCb
->
pR
 =ÖCb->
pW
 =ÖCb->
pBuf„r
;

20 *((
UINT
*)
pCb
->
pR
) = 0;

21  
pCb
;

22 
	}
}

23 
	$ChnBuffDe°roy
(
P2PCHNBUFF
 *
pCb
)

25 
	`ChnBuffC™˚l
(
pCb
);

26 
	`PA_EvítUnöô
(
pCb
->
hEvtW
);

27 
	`PA_EvítUnöô
(
pCb
->
hEvtR
);

28 
	`PA_MuãxUnöô
(
pCb
->
hMuãx
);

29 
	`‰ì
(
pCb
->
pBuf„r
);

30 
	`‰ì
(
pCb
);

31 
	}
}

33 
	$ChnBuffC™˚l
(
P2PCHNBUFF
 *
pCb
)

35 
LOCK
;

36 
pCb
->
bQuô
 = 
TRUE
;

37 
UNLOCK
;

38 
	`PA_EvítSë
(
pCb
->
hEvtW
);

39 
	`PA_EvítSë
(
pCb
->
hEvtR
);

40 
	}
}

42 
BOOL
 
	$ChnBuffGëFøme
(
P2PCHNBUFF
 *
pCb
, **
µBuff
, 
UINT
 *
pLí
, UINT 
timeout
)

44 
BOOL
 
bR…
 = 
FALSE
;

45 
°¨t
:

46 
LOCK
;

47 if(
pCb
->
bQuô
Ë
out
;

48 if(
pCb
->
pR
 =pCb->
pW
)

50 
UNLOCK
;

51 if(!
	`PA_EvítWaôTimed
(
pCb
->
hEvtR
, 
timeout
))

52  
FALSE
;

53 
°¨t
;

55 if(
pCb
->
bQuô
Ë
out
;

56 if(*((
UINT
*)
pCb
->
pR
) == 0)

58 
pCb
->
pR
 =ÖCb->
pBuf„r
;

59 if(
pCb
->
pR
 =pCb->
pW
)

61 
UNLOCK
;

62 if(!
	`PA_EvítWaôTimed
(
pCb
->
hEvtR
, 
timeout
))

63  
FALSE
;

64 
°¨t
;

68 if(
pCb
->
bQuô
Ë
out
;

69 *
µBuff
 = (
pCb
->
pR
 + 4);

70 *
pLí
 = *((
UINT
*)
pCb
->
pR
);

71 if(*
pLí
 == 0)

72 
	`LOG
("GetFrame,Üength = 0\n");

73 
bR…
 = 
TRUE
;

74 
out
:

75 
UNLOCK
;

76  
bR…
;

77 
	}
}

79 
BOOL
 
	$ChnBuffRñó£Føme
(
P2PCHNBUFF
 *
pCb
, c⁄° *
pFøme
)

81 if(
pFøme
 =
pCb
->
pR
 + 4)

83 
LOCK
;

84 
Àn
 = *((
UINT
*)
pCb
->
pR
);

85 
pCb
->
pR
 +(4 + 
Àn
 + 3) & 0xFFFFFFFC;

88 
UNLOCK
;

89 
	`PA_EvítSë
(
pCb
->
hEvtW
);

91  
TRUE
;

93  
FALSE
;

94 
	}
}

99 
BOOL
 
	$ChnBuffWrôeFøgmít
(
P2PCHNBUFF
 *
pCb
, c⁄° *
pD©a
, 
UINT
 
Àn
, 
BOOL
 
bEnd
)

101 
BOOL
 
bR…
 = 
FALSE
;

102 
UINT
 *
pLí
;

104 if(
Àn
 > 
pCb
->
nSa„S∑˚
Ë 
FALSE
;

105 
°¨t
:

106 
LOCK
;

108 if(
pCb
->
bQuô
Ë
out
;

110 if(
pCb
->
pW
 >pCb->
pR
)

112 if(*((
UINT
*)
pCb
->
pW
Ë=0 && (’Cb->
nBuf„rSize
 - (pCb->pW -ÖCb->
pBuf„r
)Ë<ÖCb->
nSa„S∑˚
))

114 if(
pCb
->
pR
 =pCb->
pBuf„r
)

116 
UNLOCK
;

117 
	`PA_EvítWaô
(
pCb
->
hEvtW
);

118 
°¨t
;

119 if(
pCb
->
bQuô
Ë
out
;

121 
pCb
->
pW
 =ÖCb->
pBuf„r
;

122 *((
UINT
*)
pCb
->
pW
) = 0;

125  (
pCb
->
pW
 <ÖCb->
pR
Ë&& (pCb->pR -ÖCb->pW <ÖCb->
nSa„S∑˚
) )

127 
UNLOCK
;

128 
	`PA_EvítWaô
(
pCb
->
hEvtW
);

129 
LOCK
;

130 if(
pCb
->
bQuô
)

131 
out
;

134 
pLí
 = (
UINT
*)
pCb
->
pW
;

135 
	`mem˝y
(
pCb
->
pW
 + *
pLí
 + 4, 
pD©a
, 
Àn
);

136 *
pLí
 +
Àn
;

138 if(
bEnd
)

140 
pCb
->
pW
 +(*
pLí
 + 4 + 3) & 0xFFFFFFFC;

141 *((
UINT
*)
pCb
->
pW
) = 0;

143 
	`PA_EvítSë
(
pCb
->
hEvtR
);

146 
bR…
 = 
TRUE
;

147 
out
:

148 
UNLOCK
;

149  
bR…
;

150 
	}
}

152 
	$ChnBuffDisˇrdCuºítFøme
(
P2PCHNBUFF
 *
pCb
)

154 
LOCK
;

155 *((
UINT
*)
pCb
->
pW
) = 0;

156 
UNLOCK
;

157 
	}
}

160 
	s_ègFRAMEHEADER
 {

161 
UINT
 
	mmt
;

162 
UINT
 
	mts
;

163 
UINT
 
	misKeyFøme
;

164 } 
	tFRAMEHEADER
;

166 
MEDIACHN
 *
	$MedüChnCª©e
(
UINT
 
size
, UINT 
nSa„S∑˚
)

168 
MEDIACHN
 *
pMdCh
 = (MEDIACHN*)
	`ˇŒoc
((MEDIACHN), 1);

169 
pMdCh
->
pChnBuff
 = 
	`ChnBuffCª©e
(
size
, 
nSa„S∑˚
);

170  
pMdCh
;

171 
	}
}

172 
	$MedüChnDe°roy
(
MEDIACHN
 *
pMdCh
)

174 
	`ChnBuffDe°roy
(
pMdCh
->
pChnBuff
);

175 
	`‰ì
(
pMdCh
);

176 
	}
}

178 
BOOL
 
	$MedüChnWrôeHódî
(
MEDIACHN
 *
pMdCh
, 
UINT
 
mt
, UINT 
ts
, UINT 
isKeyFøme
)

180 
FRAMEHEADER
 
mhdr
;

182 
mhdr
.
isKeyFøme
 = isKeyFrame;

183 
mhdr
.
ts
 =Ås;

184 
mhdr
.
mt
 = mt;

185  
	`ChnBuffWrôeFøgmít
(
pMdCh
->
pChnBuff
, (c⁄° 
BYTE
*)&
mhdr
, (mhdr), 
FALSE
);

187 
	}
}

190 
BOOL
 
	$MedüChnGëFøme
(
MEDIACHN
 *
pMdCh
, 
FRAMEINFO
 *
pFrmInfo
, 
UINT
 
timeout
)

192 
BYTE
 *
pD©a
;

193 
UINT
 
Àn
;

194 if(!
	`ChnBuffGëFøme
(
pMdCh
->
pChnBuff
, (**)&
pD©a
, &
Àn
, 
timeout
))

195  
FALSE
;

196 
	`mem˝y
(
pFrmInfo
, 
pD©a
, (
FRAMEHEADER
));

197 
pFrmInfo
->
pFøme
 = 
pD©a
 + (
FRAMEHEADER
);

198 
pFrmInfo
->
Àn
 =Üí - (
FRAMEHEADER
);

199  
TRUE
;

200 
	}
}

202 
BOOL
 
	$MedüChnRñó£Føme
(
MEDIACHN
 *
pMdCh
, c⁄° 
FRAMEINFO
 *
pFrmInfo
)

204  
	`ChnBuffRñó£Føme
(
pMdCh
->
pChnBuff
, 
pFrmInfo
->
pFøme
 - (
FRAMEHEADER
));

205 
	}
}

208 
	s__ègRESPHEADER
 {

209 
UINT
 
	må™sId
;

210 
	m°©us
;

211 
	misLa°
;

212 } 
	tRESPHEADER
;

214 
	$CmdChnBuffWrôe
(
P2PCHNBUFF
 *
pCb
, 
°©us
, 
UINT
 
å™sId
, 
BOOL
 
isLa°
, c⁄° 
BYTE
 *
pBody
, UINT 
Àn
)

216 
RESPHEADER
 
hdr
;

217 
hdr
.
å™sId
 =ÅransId;

218 
hdr
.
°©us
 = status;

219 
hdr
.
isLa°
 = isLast;

220 if(
	`ChnBuffWrôeFøgmít
(
pCb
, &
hdr
, (hdr), 
Àn
?
FALSE
:
TRUE
))

221 if(
Àn
Ë
	`ChnBuffWrôeFøgmít
(
pCb
, 
pBody
,Üí, 
TRUE
);

224 
	}
}

226 
BOOL
 
	$CmdChnBuffGëRe•
(
P2PCHNBUFF
 *
pCb
, 
RESPINFO
 *
pRe•Info
, 
UINT
 
timeout
)

228 
BYTE
 *
pD©a
;

229 
UINT
 
Àn
;

231 if(!
	`ChnBuffGëFøme
(
pCb
, (**)&
pD©a
, &
Àn
, 
timeout
))

232  
FALSE
;

234 
	`mem˝y
(
pRe•Info
, 
pD©a
, (
RESPHEADER
));

235 
pRe•Info
->
pD©a
 =ÖD©®+ (
RESPHEADER
);

236 
pRe•Info
->
Àn
 =Üí - (
RESPHEADER
);

237  
TRUE
;

238 
	}
}

240 
BOOL
 
	$CmdChnBuffRñó£Re•
(
P2PCHNBUFF
 *
pCb
, c⁄° 
RESPINFO
 *
pRe•
)

242  
	`ChnBuffRñó£Føme
(
pCb
, 
pRe•
->
pD©a
 - (
RESPHEADER
));

243 
	}
}

	@chnbuf.h

1 #i‚de‡
__chnbuf_h__


2 
	#__chnbuf_h__


	)

4 #ifde‡
__˝lu•lus


8 
	~"∂©f‹m_ad±.h
"

18 
	s_ègP2pChnBuf„r
 {

19 
BYTE
 *
pBuf„r
;

20 
nBuf„rSize
;

21 
UINT
 
nSa„S∑˚
;

23 
BYTE
 *
pR
, *
pW
;

24 
BOOL
 
bNoS∑˚
;

26 
PA_EVENT
 
hEvtW
;

27 
PA_EVENT
 
hEvtR
;

29 
PA_MUTEX
 
hMuãx
;

31 
BOOL
 
bQuô
;

32 } 
	tP2PCHNBUFF
;

34 
P2PCHNBUFF
 *
ChnBuffCª©e
(
UINT
 
size
, UINT 
nSa„S∑˚
);

35 
ChnBuffDe°roy
(
P2PCHNBUFF
 *
pCb
);

36 
ChnBuffC™˚l
(
P2PCHNBUFF
 *
pCb
);

37 
BOOL
 
ChnBuffGëFøme
(
P2PCHNBUFF
 *
pCb
, **
µBuff
, 
UINT
 *
pLí
, UINT 
timeout
);

38 
BOOL
 
ChnBuffRñó£Føme
(
P2PCHNBUFF
 *
pCb
, c⁄° *
pFøme
);

39 
BOOL
 
ChnBuffWrôeFøgmít
(
P2PCHNBUFF
 *
pCb
, c⁄° *
pD©a
, 
UINT
 
Àn
, BOOL 
bEnd
);

40 
ChnBuffDisˇrdCuºítFøme
(
P2PCHNBUFF
 *
pCb
);

42 
	s_ègFRAMEINFO
 {

43 
UINT
 
mt
;

44 
UINT
 
ts
;

45 
UINT
 
isKeyFøme
;

47 
BYTE
 *
pFøme
;

48 
UINT
 
Àn
;

49 } 
	tFRAMEINFO
;

51 
	s_ègMedüChn
 {

52 
P2PCHNBUFF
 *
pChnBuff
;

54 
USHORT
 
u16SN
;

55 
BOOL
 
bWaôIDR
;

56 
BOOL
 
pFømeHódîWrôãn
;

57 } 
	tMEDIACHN
;

59 
MEDIACHN
 *
MedüChnCª©e
(
UINT
 
size
, UINT 
nSa„S∑˚
);

60 
MedüChnDe°roy
(
MEDIACHN
 *
pMdCh
);

61 
BOOL
 
MedüChnWrôeHódî
(
MEDIACHN
 *
pMdCh
, 
UINT
 
mt
, UINT 
ts
, UINT 
isKeyFøme
);

62 
BOOL
 
MedüChnGëFøme
(
MEDIACHN
 *
pMdCh
, 
FRAMEINFO
 *
pFrmInfo
, 
UINT
 
timeout
);

63 
BOOL
 
MedüChnRñó£Føme
(
MEDIACHN
 *
pMdCh
, c⁄° 
FRAMEINFO
 *
pFrmInfo
);

65 
	s__ègRESPINFO
 {

66 
UINT
 
å™sId
;

67 
°©us
;

68 
isLa°
;

70 
BYTE
 *
pD©a
;

71 
UINT
 
Àn
;

72 } 
	tRESPINFO
;

74 
CmdChnBuffWrôe
(
P2PCHNBUFF
 *
pCb
, 
°©us
, 
UINT
 
å™sId
, 
BOOL
 
isLa°
, c⁄° 
BYTE
 *
pBody
, UINT 
Àn
);

75 
CmdChnBuffGëRe•
(
P2PCHNBUFF
 *
pCb
, 
RESPINFO
 *
pRe•Info
, 
UINT
 
timeout
);

76 
CmdChnBuffRñó£Re•
(
P2PCHNBUFF
 *
pCb
, c⁄° 
RESPINFO
 *
pRe•
);

78 #ifde‡
__˝lu•lus


	@crc32.c

1 
	~"¸c32.h
"

4 
	#POLYNOMIAL
 0xEDB88320

	)

5 
uöt32
 
	g¸c32_èbÀ
[256];

7 
	$make_èbÀ
()

9 
i
, 
j
;

10 
i
 = 0 ; i < 256 ; i++)

11 
j
 = 0, 
¸c32_èbÀ
[
i
] = i ; j < 8 ; j++)

12 
¸c32_èbÀ
[
i
] = (¸c32_èbÀ[i]>>1)^((¸c32_èbÀ[i]&1)?
POLYNOMIAL
:0) ;

13 
	}
}

16 
uöt32
 
	g¸c32_èbÀ
[256] =

85 
uöt32
 
	$ˇlc_¸c32
(
uöt32
 
¸c
, *
buff
, 
Àn
)

88 
i
;

89 
¸c
 = ~crc;

90 
i
 = 0; i < 
Àn
; i++)

91 
¸c
 = (¸¯>> 8Ë^ 
¸c32_èbÀ
[(¸¯^ 
buff
[
i
]) & 0xff];

92  ~
¸c
;

93 
	}
}

	@crc32.h

1 #i‚de‡
__¸c32_h__


2 
	#__¸c32_h__


	)

4 
	~"ba£ty≥.h
"

6 #ifde‡
__˝lu•lus


10 
uöt32
 
ˇlc_¸c32
(uöt32 
¸c
, *
buf
, 
Àn
);

12 #ifde‡
__˝lu•lus


	@ipccmd.h

1 #i‚de‡
__ùccmd_h__


2 
	#__ùccmd_h__


	)

4 
	~"p2pba£.h
"

7 
	#LENGTH_OF_NAME
 48

	)

8 
	#LENGTH_OF_KEY
 16

	)

10 
	sp2pc‹e_a˘iv©e_p2p
 {

11 
p2pc‹e_hódî
 
	mdh
;

12 
	m¢
[
LENGTH_OF_SN
];

13 
uöt8
 
	mkey
[
LENGTH_OF_KEY
];

15 
	sp2pc‹e_a˘iv©e_ª•⁄£
 {

16 
p2pc‹e_hódî
 
	mdh
;

17 
	mvÆid_d©e
[12];

20 
	sp2pc‹e_chÆÀnge
 {

21 
p2pc‹e_hódî
 
	mdh
;

23 
uöt8
 
	m¢_u£r
[16];

24 
uöt8
 
	mchÆÀnge
[
LENGTH_OF_CHALLENGE
];

30 
	sp2pc‹e_logö
 {

31 
p2pc‹e_hódî
 
	mdh
;

32 
uöt8
 
	mauth
[0];

35 
	sp2pc‹e_ˇm_ˇ∑bûôy
 {

36 
uöt8
 
	mhd
;

37 
uöt8
 
	msdc
:1;

38 
uöt8
 
	m«s
:1;

42 
	sp2pc‹e_ˇm_ªc‹d
 {

43 
uöt32
 
	mgid
;

45 
	m¢
[
LENGTH_OF_SN
];

47 
uöt8
 
	mª£rved
:6;

48 
uöt8
 
	m⁄löe
:1;

49 
uöt8
 
	ma˘ive
:1;

50 
uöt8
 
	mª£rved2
;

51 
uöt16
 
	m∑cked_expúe_d©e
;

52 
«t_öfo
 
	m°un
;

53 
	m«me
[
LENGTH_OF_NAME
];

54 
uöt16
 
	mvîsi⁄
;

58 
	sp2pc‹e_ˇm_group
 {

59 
uöt32
 
	mgid
;

60 
	m«me
[
LENGTH_OF_NAME
];

64 
	sp2pc‹e_dev_li°
 {

65 
p2pc‹e_hódî
 
	mdh
;

66 
uöt32
 
	mn_gΩ
, 
	mn_ˇm
;

	@linux_list.h

1 #i‚de‡
__LIST_H__


2 
	#__LIST_H__


	)

4 #i‡
deföed
(
WIN32
)

5 
	#INLINE
 
__ölöe


	)

7 
	#INLINE
 
ölöe


	)

26 
	sli°_hód
 {

27 
li°_hód
 *
	m√xt
, *
	m¥ev
;

30 
	#LIST_HEAD_INIT
(
«me
Ë{ &“ame), &“ameË}

	)

32 
	#LIST_HEAD
(
«me
) \

33 
li°_hód
 
«me
 = 
	`LIST_HEAD_INIT
“ame)

	)

35 
	#INIT_LIST_HEAD
(
±r
) do { \

36 (
±r
)->
√xt
 = (±r); (±r)->
¥ev
 = (ptr); \

37 } 0)

	)

45 
INLINE
 
	$__li°_add
(
li°_hód
 *
ôem
,

46 
li°_hód
 *
¥ev
,

47 
li°_hód
 *
√xt
)

49 
ôem
->
√xt
 =Çext;

50 
ôem
->
¥ev
 =Örev;

51 
√xt
->
¥ev
 = 
ôem
;

52 
¥ev
->
√xt
 = 
ôem
;

53 
	}
}

63 
INLINE
 
	$li°_add
(
li°_hód
 *
ôem
, li°_hód *
hód
)

65 
	`__li°_add
(
ôem
, 
hód
, hód->
√xt
);

66 
	}
}

76 
INLINE
 
	$li°_add_èû
(
li°_hód
 *
ôem
, li°_hód *
hód
)

78 
	`__li°_add
(
ôem
, 
hód
->
¥ev
, head);

79 
	}
}

88 
INLINE
 
	$__li°_dñ
(
li°_hód
 *
¥ev
, li°_hód *
√xt
)

90 
√xt
->
¥ev
 =Örev;

91 
¥ev
->
√xt
 =Çext;

92 
	}
}

99 
INLINE
 
	$li°_dñ
(
li°_hód
 *
íåy
)

101 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

102 
íåy
->
√xt
 = 
NULL
;

103 
íåy
->
¥ev
 = 
NULL
;

104 
	}
}

110 
INLINE
 
	$li°_dñ_öô
(
li°_hód
 *
íåy
)

112 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

113 
	`INIT_LIST_HEAD
(
íåy
);

114 
	}
}

121 
INLINE
 
	$li°_move
(
li°_hód
 *
li°
, li°_hód *
hód
)

123 
	`__li°_dñ
(
li°
->
¥ev
,Üi°->
√xt
);

124 
	`li°_add
(
li°
, 
hód
);

125 
	}
}

132 
INLINE
 
	$li°_move_èû
(
li°_hód
 *
li°
,

133 
li°_hód
 *
hód
)

135 
	`__li°_dñ
(
li°
->
¥ev
,Üi°->
√xt
);

136 
	`li°_add_èû
(
li°
, 
hód
);

137 
	}
}

143 
INLINE
 
	$li°_em±y
(
li°_hód
 *
hód
)

145  
hód
->
√xt
 == head;

146 
	}
}

148 
INLINE
 
	$__li°_•li˚
(
li°_hód
 *
li°
,

149 
li°_hód
 *
hód
)

151 
li°_hód
 *
fú°
 = 
li°
->
√xt
;

152 
li°_hód
 *
œ°
 = 
li°
->
¥ev
;

153 
li°_hód
 *
©
 = 
hód
->
√xt
;

155 
fú°
->
¥ev
 = 
hód
;

156 
hód
->
√xt
 = 
fú°
;

158 
œ°
->
√xt
 = 
©
;

159 
©
->
¥ev
 = 
œ°
;

160 
	}
}

167 
INLINE
 
	$li°_•li˚
(
li°_hód
 *
li°
, li°_hód *
hód
)

169 i‡(!
	`li°_em±y
(
li°
))

170 
	`__li°_•li˚
(
li°
, 
hód
);

171 
	}
}

180 
INLINE
 
	$li°_•li˚_öô
(
li°_hód
 *
li°
,

181 
li°_hód
 *
hód
)

183 i‡(!
	`li°_em±y
(
li°
)) {

184 
	`__li°_•li˚
(
li°
, 
hód
);

185 
	`INIT_LIST_HEAD
(
li°
);

187 
	}
}

195 
	#li°_íåy
(
±r
, 
ty≥
, 
membî
) \

196 ((
ty≥
 *)((*)(
±r
)-()(&(—y≥ *)0)->
membî
)))

	)

203 
	#li°_f‹_óch
(
pos
, 
hód
) \

204 
pos
 = (
hód
)->
√xt
;Öos != (head); \

205 
pos
 =Öos->
√xt
)

	)

211 
	#li°_f‹_óch_¥ev
(
pos
, 
hód
) \

212 
pos
 = (
hód
)->
¥ev
;Öos != (head); \

213 
pos
 =Öos->
¥ev
)

	)

221 
	#li°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

222 
pos
 = (
hód
)->
√xt
, 
n
 =Öos->next;Öos != (head); \

223 
pos
 = 
n
,Ç =Öos->
√xt
)

	)

231 
	#li°_f‹_óch_íåy
(
pos
, 
hód
, 
membî
) \

232 
pos
 = 
	`li°_íåy
((
hód
)->
√xt
, 
	`ty≥of
(*pos), 
membî
); \

233 &
pos
->
membî
 !(
hód
); \

234 
pos
 = 
	`li°_íåy
’os->
membî
.
√xt
, 
	`ty≥of
(*pos), membî))

	)

243 
	#li°_f‹_óch_íåy_ß„
(
pos
, 
n
, 
hód
, 
membî
) \

244 
pos
 = 
	`li°_íåy
((
hód
)->
√xt
, 
	`ty≥of
(*pos), 
membî
), \

245 
n
 = 
	`li°_íåy
(
pos
->
membî
.
√xt
, 
	`ty≥of
(*pos), member); \

246 &
pos
->
membî
 !(
hód
); \

247 
pos
 = 
n
,Ç = 
	`li°_íåy
“->
membî
.
√xt
, 
	`ty≥of
(*n), membî))

	)

	@mediatyp.h

1 #i‚de‡
__medütyp_h__


2 
	#__medütyp_h__


	)

6 
	mMEDIATYPE_INVALID
 = 0,

7 
	mMEDIATYPE_VIDEO_H264
 = 1,

8 
	mMEDIATYPE_AUDIO_G711A
 = 2,

9 
	mMEDIATYPE_AUDIO_ALAW
 = 
MEDIATYPE_AUDIO_G711A
,

12 
	mMEDIATYPE_VIDEO_MPEG
 = 11,

13 
	mMEDIATYPE_VIDEO_MJPEG
 = 12,

14 
	mMEDIATYPE_VIDEO_MAX
,

16 
	mMEDIATYPE_AUDIO_ULAW
 = 51,

17 
	mMEDIATYPE_AUDIO_G711U
 = 
MEDIATYPE_AUDIO_ULAW
,

18 
	mMEDIATYPE_AUDIO_PCM
 = 52,

19 
	mMEDIATYPE_AUDIO_ADPCM
 = 53,

20 
	mMEDIATYPE_AUDIO_ADPCM_IMA
 = 
MEDIATYPE_AUDIO_ADPCM
,

21 
	mMEDIATYPE_AUDIO_ADPCM_DVI4
 = 54,

22 
	mMEDIATYPE_AUDIO_G726_16
 = 55,

23 
	mMEDIATYPE_AUDIO_G726_24
 = 56,

24 
	mMEDIATYPE_AUDIO_G726_32
 = 57,

25 
	mMEDIATYPE_AUDIO_G726_40
 = 58,

26 
	mMEDIATYPE_AUDIO_AAC
 = 59,

27 
	mMEDIATYPE_AUDIO_MAX


29 } 
	tMEDIATYPE
;

31 
	#MEDIATYPE_IS_VIDEO
(
mt
Ë(mà&& (mt<
MEDIATYPE_VIDEO_MAX
 && mt>
MEDIATYPE_AUDIO_G711A
 || mt==
MEDIATYPE_VIDEO_H264
))

	)

32 
	#MEDIATYPE_IS_AUDIO
(
mt
Ë(mà&& (mt==
MEDIATYPE_AUDIO_G711A
 || mt>=
MEDIATYPE_AUDIO_ULAW
 && mt<
MEDIATYPE_AUDIO_MAX
))

	)

	@misc.c

1 
	~"∂©f‹m_ad±.h
"

2 
	~<°rög.h
>

3 
	~<˘y≥.h
>

4 
	~<°dio.h
>

6 #ifde‡
WIN32


10 #ñi‡
deföed
(
__LINUX__
)

12 
	~<î∫o.h
>

13 
	~<sys/°©.h
>

14 
	~<sys/ty≥s.h
>

15 
	~<uni°d.h
>

20 
	$°∫˝yz
(*
de°
, c⁄° *
s
, 
n
)

22 
i
;

23 
i
=0; i<
n
-1 && 
s
[i]; i++)

25 
de°
[
i
] = 
s
[i];

27 
de°
[
i
] = '\0';

28  
i
;

29 
	}
}

31 
	$key2°rög
(c⁄° 
key
[16], 
°r
[25])

33 
i
, 
j
;

35 
ci
, 
bi
, 
vÆ
;

36 
i
=0, 
j
=0; i<20; i++, j++)

38 if(
i
==4 || i==8 || i==12 || i==16Ë
°r
[
j
++] = '-';

39 
ci
 = 
i
*5/8;

40 
bi
 = (
i
*5)%8;

41 if(
bi
 < 3)

42 
vÆ
 = (
key
[
ci
] >> (3-
bi
)) & 0x1F;

44 
vÆ
 = ((
key
[
ci
] << (
bi
-3)) | (key[ci+1] >> (11-bi))) & 0x1F;

45 if(
vÆ
 <= 9)

46 
°r
[
j
] = '0' + 
vÆ
;

48 
°r
[
j
] = 'A' + 
vÆ
 - 10;

50 
°r
[24] = '\0';

51 
	}
}

53 
BOOL
 
	$°rög2key
(c⁄° *
°r
, 
key
[16])

55 
i
, 
j
;

56 
ci
, 
bi
;

57 
°rkey
[25];

59 
	`mem£t
(
key
, 0, 16);

60 
i
=0, 
j
=0; 
°r
[j]; j++)

62 if(
	`iß um
(
°r
[
j
])Ë
°rkey
[
i
++] = 
	`touµî
(str[j]);

63 if(
°r
[
j
] !'-'Ë 
FALSE
;

65 
°rkey
[
i
++] = '\0';

66 if(
i
 != 21)  0;

67 
i
=0; i<20; i++)

69 if(
	`isdigô
(
°rkey
[
i
])) strkey[i] -= '0';

70 
°rkey
[
i
] -= ('A' - 10);

72 
i
=0; i<13; i++)

74 
ci
 = 8*
i
/5;

75 
bi
 = (8*
i
)%5;

76 if(
bi
<=2)

77 
key
[
i
] = (
°rkey
[
ci
] << (
bi
+3)) | (strkey[ci+1] >> (2-bi));

79 
key
[
i
] = (
°rkey
[
ci
] << (
bi
+3)) | (strkey[ci+1] << (bi-2)) | (strkey[ci+2] >> (7-bi));

81 
key
[12] &= 0xF0;

82  
TRUE
;

83 
	}
}

85 #i‡
deföed
(
__LINUX__
)

86 
	$fûñígth
(
‚o
)

88 
°©
 
_°©
;

89 
	`f°©
(
‚o
, &
_°©
);

90  
_°©
.
°_size
;

91 
	}
}

	@misc.h

1 #i‚de‡
__misc_h__


2 
	#__misc_h__


	)

4 #ifde‡
__˝lu•lus


8 
	~<∂©f‹m_ad±.h
>

10 
	#SAFE_FREE
(
p
Ëif’Ë{ 
	`‰ì
’);Ö=
NULL
; }

	)

11 
	#SAFE_DELETE
(
p
Ëif’Ë{ 
dñëe
Ö;Ö=
NULL
; }

	)

13 *
°∫˝yz
(*
d°
, c⁄° *
§c
, 
n
);

15 #ifde‡
WIN32


16 
	~<io.h
>

17 
	#fûñígth
(
fd
Ë
	`_fûñígth
(fd)

	)

18 #ñi‡
deföed
(
__LINUX__
)

19 
fûñígth
(
fd
);

23 
key2°rög
(c⁄° 
key
[16], 
°r
[25]);

24 
BOOL
 
°rög2key
(c⁄° *
°r
, 
key
[16]);

26 #ifde‡
__˝lu•lus


	@netbase.c

1 
	~"∂©f‹m_ad±.h
"

2 
	~<°rög.h
>

3 
	~<˘y≥.h
>

4 
	~<°dio.h
>

5 #ifde‡
WIN32


6 
	~<î∫o.h
>

7 
	~<IphÕApi.h
>

8 #ñi‡
deföed
(
__LINUX__
)

9 
	~<√t/if.h
>

10 
	~<sys/io˘l.h
>

12 
	~"√tba£.h
"

14 
BOOL
 
	$ResﬁveHo°
(c⁄° * 
ho°
, 
uöt32
* 
pIP
)

16 
ho°ít
 *
h
 = 
	`gëho°by«me
(
ho°
);

17 if(
h
)

19 *
pIP
 = *(
uöt32
*)(
h
->
h_addr_li°
[0]);

20  
TRUE
;

22  
FALSE
;

23 
	}
}

25 * 
	$IP2STR
(
ù
, 
ùs
[16])

27 
Àn
 = 
	`•rötf
(
ùs
, "%d.", 
ù
&0xFF);

28 
Àn
 +
	`•rötf
(
ùs
+Àn, "%d.", (
ù
>>8)&0xFF);

29 
Àn
 +
	`•rötf
(
ùs
+Àn, "%d.", (
ù
>>16)&0xFF);

30 
Àn
 +
	`•rötf
(
ùs
+Àn, "%d", (
ù
>>24)&0xFF);

31  
ùs
;

32 
	}
}

37 
	$NewSockëAndBöd
(
sock_ty≥
, 
böd_ù
, 
p‹t
)

39 
sockaddr_ö
 
ß
;

40 
PA_SOCKET
 
fd
;

41 
›t
;

43 
fd
 = 
	`sockë
(
AF_INET
, 
sock_ty≥
, 0);

44 if(
fd
 =
INVALID_SOCKET
)  INVALID_SOCKET;

45 
›t
 = 1;

46 
	`PA_SëSockO±
(
fd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
›t
, ());

48 
	`mem£t
(&
ß
, 0, (sa));

49 
ß
.
sö_Ámûy
 = 
AF_INET
;

50 
ß
.
sö_addr
.
s_addr
 = 
böd_ù
;

51 
ß
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

52 if(
	`böd
(
fd
, (
sockaddr
*)&
ß
, (sa)) < 0)

54 #ifde‡
WIN32


55 
fd
 = 
	`WSAGëLa°Eº‹
();

57 
	`≥º‹
("bind");

59 
	`PA_SockëClo£
(
fd
);

60  
INVALID_SOCKET
;

62  
fd
;

63 
	}
}

65 
	$Cª©eSîvi˚Sockë
(
sock_ty≥
, 
böd_ù
, 
p‹t
)

67 
fd
 = 
	`NewSockëAndBöd
(
sock_ty≥
, 
böd_ù
, 
p‹t
);

68 if(
fd
 !
INVALID_SOCKET
 && 
sock_ty≥
 =
SOCK_STREAM
Ë
	`li°í
(fd, 5);

69  
fd
;

70 
	}
}

72 #ifde‡
__LINUX__


73 
	$GëIfAddr
(c⁄° * 
i‚ame
, *
√tmask
)

75 
sock
;

76 
i‰eq
 
ªq
;

77 
	`°r˝y
(
ªq
.
i‰_«me
, 
i‚ame
);

78 
sock
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

79 if(
	`io˘l
(
sock
, 
SIOCGIFADDR
, &
ªq
) == 0)

81 
ù
 = ((
sockaddr_ö
*)&
ªq
.
i‰_addr
)->
sö_addr
.
s_addr
;

82 if(
√tmask
)

84 
	`io˘l
(
sock
, 
SIOCGIFNETMASK
, &
ªq
);

85 *
√tmask
 = ((
sockaddr_ö
*)&
ªq
.
i‰_addr
)->
sö_addr
.
s_addr
;

87 
	`˛o£
(
sock
);

88  
ù
;

90 
	`˛o£
(
sock
);

92 
	}
}

94 
BOOL
 
	$GëDeÁu…Rouã
(*
ù_gw
, *
ù_loˇl
)

96 
löe
[400];

97 *
ù_gw
 = *
ù_loˇl
 = 0;

98 
FILE
 *
Â
 = 
	`f›í
("/proc/net/route", "r");

99 if(
Â
)

101 
	`fgës
(
löe
, 400, 
Â
))

103 
de°
;

104 
öåf
[64];

105 if(
	`ssˇnf
(
löe
, "%†%x %x", 
öåf
, &
de°
, 
ù_gw
) == 3 && dest == 0)

107 *
ù_loˇl
 = 
	`GëIfAddr
(
öåf
, 
NULL
);

108 
	`f˛o£
(
Â
);

109  
TRUE
;

112 
	`f˛o£
(
Â
);

114  
FALSE
;

115 
	}
}

116 #ñi‡
deföed
(
WIN32
)

117 
BOOL
 
	$GëDeÁu…Rouã
(*
ù_gw
, *
ù_loˇl
)

119 
UINT
 
i
;

120 
ifIndex
 = -1;

121 
ULONG
 
Àn
;

122 
DWORD
 
dwGW
 = 0;

123 
MIB_IPFORWARDTABLE
 *
pi·
;

124 
MIB_IPADDRTABLE
 *
püt
;

129 
Àn
 = 0;

130 
	`GëIpF‹w¨dTabÀ
(
NULL
, &
Àn
, 
FALSE
);

131 
pi·
 = (
MIB_IPFORWARDTABLE
*)
	`mÆloc
(
Àn
);

132 
	`GëIpF‹w¨dTabÀ
(
pi·
, &
Àn
, 
FALSE
);

133 
i
=0; i < 
pi·
->
dwNumE¡rõs
; i++)

135 if(
pi·
->
èbÀ
[
i
].
dwF‹w¨dDe°
 =0 &&Öi·->èbÀ[i].
dwF‹w¨dMask
 == 0)

137 *
ù_gw
 = 
pi·
->
èbÀ
[
i
].
dwF‹w¨dNextH›
;

138 
ifIndex
 = 
pi·
->
èbÀ
[
i
].
dwF‹w¨dIfIndex
;

143 
	`‰ì
(
pi·
);

144 if(
ifIndex
 < 0Ë 
FALSE
;

149 
Àn
 = 0;

150 
	`GëIpAddrTabÀ
(
NULL
, &
Àn
, 
FALSE
);

151 
püt
 = (
MIB_IPADDRTABLE
*)
	`mÆloc
(
Àn
);

152 
	`GëIpAddrTabÀ
(
püt
, &
Àn
, 
FALSE
);

153 
i
=0; i<
püt
->
dwNumE¡rõs
; i++)

155 if(
püt
->
èbÀ
[
i
].
dwIndex
 =
ifIndex
 && (
dwGW
 &Öüt->èbÀ[i].
dwMask
Ë=’üt->èbÀ[i].
dwAddr
 &Öiat->table[i].dwMask))

157 *
ù_loˇl
 = 
püt
->
èbÀ
[
i
].
dwAddr
;

161 
	`‰ì
(
püt
);

163  
TRUE
;

164 
	}
}

170 
BOOL
 
	$IsI¡î√t
(
ö_addr
 
addr
)

173 
√tmask
 = 
	`¡ohl
(
addr
.
s_addr
);

174  !((
√tmask
 & 0xFF000000) == 0x0A000000 ||

175 (
√tmask
 & 0xFFFF0000) == 0xC0A80000 ||

176 ((
√tmask
 & 0xFFFF0000) >= 0xAC100000 && (netmask & 0xFFFF0000) <= 0xAC1F0000));

178 
√tmask
 = 
addr
.
s_addr
 & 0xFFFF;

179  !((
addr
.
s_addr
&0xFF)==10 || 
√tmask
==0xA8C0 || (netmask&0xFF)==0xAC&&(netmask&0xFF00)>=0x1000 && (netmask&0xFF00)<=0x1F00);

181 
	}
}

183 #ifde‡
__LINUX__


184 
	$GëIpAddªs£s
(
ETHERNIC
 *
pAN
, 
size
)

187 
sock
;

188 
i
, 
n
 = 0;

189 
ifc⁄f
 
ifcf
;

190 
i‰eq
 *
pi‰eqs
;

192 
sock
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

193 if(
sock
 < 0)

195 
	`≥º‹
("socket");

199 
ifcf
.
ifc_Àn
 = (
i‰eq
) * 16;

200 
pi‰eqs
 = (
i‰eq
*)
	`mÆloc
((ifreq) * 16);

204 
ifcf
.
ifc_ªq
 = 
pi‰eqs
;

207 if(
	`io˘l
(
sock
, 
SIOCGIFCONF
, &
ifcf
) == 0)

209 
i
=0; i<(
ifcf
.
ifc_Àn
/(
i‰eq
)Ë&& (
n
 < 
size
); i++)

211 if–
pi‰eqs
[
i
].
i‰_addr
.
ß_Ámûy
 =
AF_INET
 && 
	`°∫cmp
’i‰eqs[i].
i‰_«me
, "lo", 2) )

213 
i‰eq
 
i‰q
;

214 
	`°r˝y
(
i‰q
.
i‰_«me
, 
pi‰eqs
[
i
].ifr_name);

215 if(
	`io˘l
(
sock
, 
SIOCGIFFLAGS
, &
i‰q
) == 0)

217 
pAN
[
n
].
Êags
 = 
i‰q
.
i‰_Êags
;

218 
	`°r˝y
(
pAN
[
n
].
«me
, 
pi‰eqs
[
i
].
i‰_«me
);

219 if(
	`io˘l
(
sock
, 
SIOCGIFADDR
, &
pi‰eqs
[
i
]) == 0)

220 
pAN
[
n
].
addr
 = ((
sockaddr_ö
*)&
pi‰eqs
[
i
].
i‰_addr
)->
sö_addr
;

221 if(
	`io˘l
(
sock
, 
SIOCGIFNETMASK
, &
pi‰eqs
[
i
]) == 0)

222 
pAN
[
n
].
√tmask
 = ((
sockaddr_ö
*)&
pi‰eqs
[
i
].
i‰_addr
)->
sö_addr
;

223 
n
++;

226 
	`≥º‹
("ioctl(, SIOCGIFFLAGS, )");

231 
	`≥º‹
("ioctl(, SIOCGIFCONF, )");

232 
	`˛o£
(
sock
);

233 
	`‰ì
(
pi‰eqs
);

234  
n
;

235 
	}
}

237 
BOOL
 
	$I¡fIsUp
(c⁄° *
sI¡f
)

239 
i‰eq
 
ªq
;

240 
sock
;

241 
BOOL
 
isUp
;

243 
sock
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

244 
	`°r˝y
(
ªq
.
i‰_«me
, 
sI¡f
);

245 
isUp
 = (
	`io˘l
(
sock
, 
SIOCGIFFLAGS
, &
ªq
Ë=0Ë&& (ªq.
i‰_Êags
 & 
IFF_UP
);

246 
	`˛o£
(
sock
);

247  
isUp
;

248 
	}
}

249 #ñi‡
deföed
(
WIN32
)

250 
	$GëIpAddªs£s
(
ETHERNIC
 *
pAn
, 
size
)

255 
MIB_IPADDRTABLE
 *
püt
;

256 
ULONG
 
Àn
 = 0;

257 
UINT
 
i
, 
n
;

258 
	`GëIpAddrTabÀ
(
NULL
, &
Àn
, 
FALSE
);

259 
püt
 = (
MIB_IPADDRTABLE
*)
	`mÆloc
(
Àn
);

260 
	`GëIpAddrTabÀ
(
püt
, &
Àn
, 
FALSE
);

261 
i
=
n
=0; i<
püt
->
dwNumE¡rõs
 && i < 
size
; i++)

263 if(
püt
->
èbÀ
[
i
].
dwAddr
 && (piat->table[i].dwAddr != 0x0100007F))

265 
pAn
[
n
].
addr
.
s_addr
 = 
püt
->
èbÀ
[
i
].
dwAddr
;

266 
pAn
[
n
].
√tmask
.
s_addr
 = 
püt
->
èbÀ
[
i
].
dwMask
;

267 
pAn
[
n
].
ifIdx
 = 
püt
->
èbÀ
[
i
].
dwIndex
;

268 
n
++;

271 
	`‰ì
(
püt
);

272  
n
;

273 
	}
}

277 
	$öô_ßi
(
sockaddr_ö
* 
ßi
, c⁄° * 
sho°
, 
def_p‹t
)

279 
uöt32
 
ù
;

280 *
ss
 = 
NULL
;

282 c⁄° *
cﬁ⁄
 = 
	`°rchr
(
sho°
, ':');

283 if(
cﬁ⁄
)

285 
def_p‹t
 = 
	`©oi
(
cﬁ⁄
+1);

286 
ss
 = (*)
	`mÆloc
(
cﬁ⁄
 - 
sho°
);

287 
	`°∫˝y
(
ss
, 
sho°
, 
cﬁ⁄
 - shost);

288 
ss
[
cﬁ⁄
-
sho°
] = '\0';

291 if(!
	`ResﬁveHo°
(
ss
?ss:
sho°
, (
uöt32
*)&
ù
))

293 if(
ss
Ë
	`‰ì
(ss);

297 if(
ss
Ë
	`‰ì
(ss);

298 
	`mem£t
(
ßi
, 0, (
sockaddr_ö
));

299 
ßi
->
sö_Ámûy
 = 
AF_INET
;

300 
ßi
->
sö_p‹t
 = 
	`ht⁄s
(
def_p‹t
);

301 
ßi
->
sö_addr
.
s_addr
 = 
ù
;

303 
	}
}

305 
	$timed_waô_fd
(
fd
, 
ms
)

307 
fd_£t
 
rfds
;

308 
timevÆ
 
tv
;

310 
	`FD_ZERO
(&
rfds
);

311 
	`FD_SET
(
fd
, &
rfds
);

312 
tv
.
tv_£c
 = 
ms
/1000;

313 
tv
.
tv_u£c
 = (
ms
%1000)*1000;

314  
	`£À˘
(
fd
+1, &
rfds
, 
NULL
, NULL, &
tv
);

315 
	}
}

322 
	$timed_ªcv
(
sk
, * 
±r
, 
size
, 
ms
)

324 
r
 = 
	`timed_waô_fd
(
sk
, 
ms
);

325 if(
r
 < 0)

327 
	`≥º‹
("timedÑecv select");

330 if(
r
 == 0)

332 
	`dbg_msg
("selectÅimeout.............\n");

335 
r
 = 
	`PA_Recv
(
sk
, 
±r
, 
size
, 0);

336 if(
r
 < 0)

338 
	`≥º‹
("recvÉrror");

341  
r
;

342 
	}
}

344 
	$timed_ªcv_‰om
(
sk
, * 
±r
, 
size
, 
sockaddr
* 
addr
, *
sock_Àn
, 
ms
)

346 
r
 = 
	`timed_waô_fd
(
sk
, 
ms
);

347 if(
r
 < 0)

349 #ifde‡
WIN32


350 
r
 = 
	`WSAGëLa°Eº‹
();

352 
	`≥º‹
("select");

356 if(
r
 == 0)  -1;

358 
r
 = 
	`PA_RecvFrom
(
sk
, 
±r
, 
size
, 0, 
addr
, (
sockÀn_t
*)
sock_Àn
);

359 if(
r
 < 0)

361  
r
;

362 
	}
}

364 
	$timed_waô_fd_w
(
fd
, 
ms
)

366 
fd_£t
 
wfds
;

367 
timevÆ
 
tv
;

369 
	`FD_ZERO
(&
wfds
);

370 
	`FD_SET
(
fd
, &
wfds
);

371 
tv
.
tv_£c
 = 
ms
/1000;

372 
tv
.
tv_u£c
 = (
ms
%1000)*1000;

373  
	`£À˘
(
fd
+1, 
NULL
, &
wfds
, NULL, &
tv
);

374 
	}
}

376 
	$wrôí
(
sock
, *
p
, 
Àn
, 
tmout
 )

378 
fd_£t
 
wfds
, 
rfds
, 
efds
;

379 
timevÆ
 
tv
;

381 
wtŸÆ
 = 0, 
£l
;

382 
wtŸÆ
 < 
Àn
)

384 
	`FD_ZERO
(&
rfds
);

385 
	`FD_SET
(
sock
, &
rfds
);

386 
	`FD_ZERO
(&
wfds
);

387 
	`FD_SET
(
sock
, &
wfds
);

388 
	`FD_ZERO
(&
efds
);

389 
	`FD_SET
(
sock
, &
efds
);

390 if(
tmout
 >= 0)

392 
tv
.
tv_£c
 = 
tmout
/1000;

393 
tv
.
tv_u£c
 = (
tmout
%1000)*1000;

395 
£l
 = 
	`£À˘
(
sock
+1, &
rfds
, &
wfds
, &
efds
, (
tmout
==~0L)?&
tv
:
NULL
);

396 if(
£l
 < 0)

398 #ifde‡
WIN32


399 if(
	`WSAGëLa°Eº‹
(Ë=
WSAEINTR
) ;

401 if(
î∫o
 =
EINTR
) ;

405 if(
£l
 == 0)  -1;

406 if(
	`FD_ISSET
(
sock
, &
efds
))  -1;

407 if–
	`FD_ISSET
(
sock
, &
rfds
 ) )

409 
buf
[101];

410 if(
	`ªcv
(
sock
, 
buf
, 100, 0) == 0)  0;

413 if(
	`FD_ISSET
(
sock
, &
wfds
))

415 
wÀn
 = 
	`PA_Síd
(
sock
, 
p
, 
Àn
 - 
wtŸÆ
, 0);

416 if(
wÀn
 < 0)

418 #ifde‡
WIN32


419 if(
	`WSAGëLa°Eº‹
(Ë=
WSAEINTR
) ;

421 if(
î∫o
 =
EINTR
) ;

425 
wtŸÆ
 +
wÀn
;

426 
p
 = (*Ì + 
wÀn
;

431  
wtŸÆ
;

432 
	}
}

435 #ifde‡
WIN32


436 
	$£tblk
(
s
, 
b
)

438 
›t
 = 
b
?0:1;

439  
	`io˘lsockë
(
s
, 
FIONBIO
, (
u_l⁄g
*)&
›t
);

440 
	}
}

441 
	$isÁèl
(
r
)

443 if(
r
 < 0 && 
	`WSAGëLa°Eº‹
(Ë!
WSAEWOULDBLOCK
)  1;

445 
	}
}

448 
	$£tblk
(
s
, 
b
)

450 
›t
 = 
	`f˙é
(
s
, 
F_GETFL
, &opt, 0);

451 if(
b
Ë
›t
 &~
O_NONBLOCK
;

452 
›t
 |
O_NONBLOCK
;

453  
	`f˙é
(
s
, 
F_SETFL
, 
›t
);

454 
	}
}

455 
	$isÁèl
(
r
)

457 if(
r
 < 0 && 
î∫o
 !
EWOULDBLOCK
)  1;

459 
	}
}

462 
	$£éögî
(
s
, 
⁄off
, 
lögî
)

464 
lögî
 
›t
 = { 
⁄off
,Üinger };

465  
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_LINGER
,

466 #ifde‡
WIN32


467 (c⁄° *)&
›t
,

469 &
›t
,

471 (
›t
));

472 
	}
}

	@netbase.h

1 #i‚de‡
__√tba£_h__


2 
	#__√tba£_h__


	)

4 
	~"∂©f‹m_ad±.h
"

6 #ifde‡
__˝lu•lus


10 
BOOL
 
ResﬁveHo°
(c⁄° * 
ho°
, 
uöt32
* 
pIP
);

11 * 
IP2STR
(
ù
, 
ùs
[16]);

13 
öô_ßi
(
sockaddr_ö
* 
ßi
, c⁄° * 
sho°
, 
def_p‹t
);

17 
NewSockëAndBöd
(
sock_ty≥
, 
böd_ù
, 
p‹t
);

19 
Cª©eSîvi˚Sockë
(
sock_ty≥
, 
böd_ù
, 
p‹t
);

21 
BOOL
 
GëDeÁu…Rouã
(*
ù_gw
, *
ù_loˇl
);

23 
BOOL
 
IsI¡î√t
(
ö_addr
 
addr
);

25 
	sëhî_nic
 {

26 #ifde‡
WIN32


27 
	gifIdx
;

28 #ñi‡
deföed
(
__LINUX__
)

29 
	g«me
[16];

30 
	gÊags
;

32 
ö_addr
 
	gaddr
;

33 
ö_addr
 
	g√tmask
;

34 } 
	tETHERNIC
;

35 
GëIpAddªs£s
(
ETHERNIC
 *
pAN
, 
size
);

38 
timed_waô_fd
(
fd
, 
ms
);

40 
timed_waô_fd_w
(
fd
, 
ms
);

41 
timed_ªcv
(
sk
, * 
±r
, 
size
, 
ms
);

42 
timed_ªcv_‰om
(
sk
, * 
±r
, 
size
, 
sockaddr
* 
addr
, *
sock_Àn
, 
ms
);

43 
£tblk
(
s
, 
b
);

44 
£éögî
(
s
, 
⁄off
, 
lögî
);

47 #ifde‡
__˝lu•lus


	@p2pbase.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 
	~"p2pba£.h
"

5 
	~"√tba£.h
"

6 #ifde‡
WIN32


7 
	~<ùhÕ≠i.h
>

8 #¥agm®
w¨nög
–
dißbÀ
 : 4200 )

9 #¥agm®
commít
(
lib
, "iphlpapi.lib")

13 
	$öô_p2pc‹e_hódî
(
p2pc‹e_hódî
* 
p
, 
°
, 
›
, 
˛s
, 
°©us
, 
Àn
, 
p2pc‹e_å™sid_t
 
å™s_id
)

15 
p
->
èg
 = 
P2PCORE_TAG
 | 
P2PCORE_VERSION
;

16 
	`P2PCORE_SET_STATUS
(
p
, 
°©us
);

17 
	`P2PCORE_SET_OP
(
p
, 
›
);

18 
	`P2PCORE_SET_DATA_LEN
(
p
, 
Àn
);

19 
p
->
˛s
 = cls;

20 
p
->
°
 = st;

21 
	`P2PCORE_SET_TID
(
p
, 
å™s_id
);

22 
	}
}

28 
	$gë_loˇl_ùs
(
uöt32
* 
pIps
, 
size
)

30 
i
, 
n
;

31 
ETHERNIC
 
ëhs
[16];

33 
n
 = 
	`GëIpAddªs£s
(
ëhs
, 16);

34 
i
=0; i<
n
&&i<
size
; i++)

35 
pIps
[
i
] = 
ëhs
[i].
addr
.
s_addr
;

36  
i
;

37 
	}
}

45 
	$£nd_ªcv_ovî_udp
(
sock
, c⁄° 
sockaddr
* 
addr
, c⁄° 
p2pc‹e_hódî
* 
p
, * 
buf
, 
size
)

47 
i
;

48 
p2pc‹e_hódî
 *
pdh
 = (p2pc‹e_hódî*)
buf
;

49 
i
=0; i<3; i++)

51 
sockaddr
 
ß
;

52 
ß_Àn
, 
Àn
;

54 
ß_Àn
 = (
ß
);

55 
	`PA_SídTo
(
sock
, 
p
, 
	`P2PCORE_PACKET_LEN
’), 0, 
addr
, (
sockaddr
));

56 
Àn
 = 
	`timed_ªcv_‰om
(
sock
, 
buf
, 
size
, &
ß
, (*)&
ß_Àn
, 1000);

57 if(
Àn
 <= 0) { ; }

59 if–
	`check_p2pc‹e_hódî
(
pdh
Ë&& 
p
->
›
 =pdh->› && 
Àn
 =
	`P2PCORE_PACKET_LEN
(pdh) )

61  
Àn
;

64  -
P2PE_ERROR_RESPONSE
;

67  -
P2PE_NO_RESPONSE
;

68 
	}
}

77 
	$quîy_exã∫Æ_addªss
(c⁄° 
sockaddr
* 
svr
, 
p2pc‹e_addr
* 
pda
, 
loˇl_p‹t
)

79 
p2pc‹e_hódî
 
dh
;

80 
p2pc‹e_quîy_addªss_ª•⁄£
 
dq
;

82 
sock
 = 
	`Cª©eSîvi˚Sockë
(
SOCK_DGRAM
, 0, 
loˇl_p‹t
);

83 if(
sock
 <= 0)  -1;

85 
	`öô_p2pc‹e_hódî
(&
dh
, 
ST_CALLER
, 
OP_QUERY_ADDRESS
, 
CLS_REQUEST
, 0, 0, 0);

86 
	`mem£t
(&
dq
, 0, 10);

87 if(
	`£nd_ªcv_ovî_udp
(
sock
, 
svr
, &
dh
, &
dq
, (dq)) == (dq))

89 if(
	`check_p2pc‹e_hódî
(&
dq
.
dh
Ë&& dq.dh.
›
 =
OP_QUERY_ADDRESS
 && dq.dh.
°
 =
ST_SERVER
 && dq.dh.
°©us
 == 0)

91 
pda
->
ù
 = 
dq
.
ext_addr
.ip;

92 
pda
->
p‹t
 = 
dq
.
ext_addr
.port;

93  
sock
;

97 
	`Clo£Sockë
(
sock
);

102 
	}
}

107 
	$p2pc‹e_gë_chÆÀnge
(
sk
, 
°
, 
uöt8
 
¢_u£r
[16], uöt8 
rvÆ
[
LENGTH_OF_CHALLENGE
])

109 
p2pc‹e_chÆÀnge
 
dc
;

110 
r
;

112 
	`öô_p2pc‹e_hódî
(&
dc
.
dh
, 
°
, 
OP_GET_CHALLENGE
, 0, 0, 
LENGTH_OF_AUTH
, 0);

113 
	`mem£t
(
dc
.
¢_u£r
, 0, 16);

114 if(
°
 =
ST_CALLER
Ë
	`°∫˝y
((*)
dc
.
¢_u£r
, (const *)sn_user, 16);

115 
	`mem˝y
(
dc
.
¢_u£r
, sn_user, 16);

117 
r
 = 
	`PA_Síd
(
sk
, &
dc
, (dc), 0);

118 if(
r
 < 0)

122 
r
 = 
	`timed_ªcv
(
sk
, &
dc
, (dc), 3000);

123 if(
r
 < 0Ë 
P2PE_TIMEOUTED
;

124 if(
r
 < (
p2pc‹e_hódî
))

125  
P2PE_ERROR_RESPONSE
;

127 if(
dc
.
dh
.
°©us
 == 0)

129 if(
r
 !(
dc
))

130  
P2PE_ERROR_RESPONSE
;

131 
	`mem˝y
(
rvÆ
, 
dc
.
chÆÀnge
, 
LENGTH_OF_CHALLENGE
);

135  
dc
.
dh
.
°©us
;

136 
	}
}

154 
	$p2pc‹e_t˝_punch
(
uöt16
 
loˇl_p‹t
, 
m≠≥d_sock
, 
c⁄n_bô_fõlds
 
bôs
, c⁄° 
p2pc‹e_addr
 *
≥î_addr
,

155  *
sock
, 
CHECKCONNECTIONCB
 
cb
, * 
d©a
)

157 
sockaddr_ö
 
ßi
;

158 
sockÀn_t
 
ß_Àn
;

159 
i
, 
åy_˙t
, 
n_addr
;

160 
sk0
, 
out_sk
[10], 
out_ªfu£d_˙t
[10];

161 
fd_£t
 
rfds
, 
wfds
, 
efds
;

162 
time_t
 
t0
;

163 
ö_sk
[10], 
n_ö_sk
 = 0;

164 
sock_c⁄n
 = 
INVALID_SOCKET
;

165 
æt
 = 
P2PE_TIMEOUTED
;

167 
	`mem£t
(&
ßi
, 0, (sai));

168 
ßi
.
sö_Ámûy
 = 
AF_INET
;

170 
n_addr
 = 
bôs
.n_addr;

171 if(
n_addr
 > 10)Ç_addr = 10;

181 
i
=
n_addr
-1; i>=0; i--)

183 
out_sk
[
i
] = 
	`NewSockëAndBöd
(
SOCK_STREAM
, 0, 
loˇl_p‹t
);

184 
out_ªfu£d_˙t
[
i
] = 0;

185 
	`£tblk
(
out_sk
[
i
], 0);

187 
ßi
.
sö_p‹t
 = 
≥î_addr
[
i
].
p‹t
;

188 
ßi
.
sö_addr
.
s_addr
 = 
≥î_addr
[
i
].
ù
;

190 
	`c⁄√˘
(
out_sk
[
i
], (
sockaddr
*)&
ßi
, (sai));

193 
sk0
 = 
	`Cª©eSîvi˚Sockë
(
SOCK_STREAM
, 0, 
loˇl_p‹t
);

201 
	`FD_ZERO
(&
rfds
); FD_ZERO(&
wfds
); FD_ZERO(&
efds
);

202 
	`FD_SET
(
sk0
, &
rfds
); FD_SET(sk0, &
efds
);

203 if(
m≠≥d_sock
 > 0Ë
	`FD_SET
(m≠≥d_sock, &
rfds
);

204 
i
=0; i < 
n_addr
; i++)

206 if(
out_sk
[
i
] > 0)

208 
	`FD_SET
(
out_sk
[
i
], &
wfds
);

209 
	`FD_SET
(
out_sk
[
i
], &
efds
);

217 
	`time
(
NULL
);

218 
t0
 = 
	`time
(
NULL
), 
åy_˙t
=0;Åime(NULL) -Å0 < 10 ;Åry_cnt++)

220 
fd_£t
 
t_rfds
, 
t_wfds
, 
t_efds
;

221 
timevÆ
 
tv
;

222 
£l
, 
sk_max
;

223 
cb_æt
;

227 
sk_max
 = 
sk0
>
m≠≥d_sock
?sk0:mapped_sock;

228 
i
=0; i<
n_addr
; i++Ëif(
sk_max
 < 
out_sk
[i]) sk_max = out_sk[i];

229 
i
=0; i<
n_ö_sk
; i++Ëif(
sk_max
 < 
ö_sk
[i]) sk_max = in_sk[i];

231 
tv
.
tv_£c
 = 1;

232 
tv
.
tv_u£c
 = 0;

233 
t_rfds
 = 
rfds
; 
t_wfds
 = 
wfds
; 
t_efds
 = 
efds
;

236 
£l
 = 
	`£À˘
(
sk_max
+1, &
t_rfds
, &
t_wfds
, &
t_efds
, &
tv
);

237 if(
£l
 == 0) ;

238 if(
£l
 < 0)

240 #i‚de‡
WIN32


241 if(
î∫o
 =
EINTR
) ;

242 
	`≥º‹
("select");

247 
i
=0; i<2; i++)

249 
¶
;

250 
¶
 = 
i
==0?
sk0
:
m≠≥d_sock
;

251 if(
¶
 > 0 && 
	`FD_ISSET
(¶, &
t_rfds
))

253 
s
;

254 
ß_Àn
 = (
ßi
);

255 
s
 = 
	`ac˚±
(
¶
, (
sockaddr
*)&
ßi
, &
ß_Àn
);

256 if(
s
 > 0)

258 
cb_æt
 = 
	`cb
(
s
, 
SOCK_STATUS_ACCEPTED
, 
d©a
);

260 
cb_æt
)

262 
CHECKCONNECTION_CONTINUE
:

263 
	`FD_SET
(
s
, &
rfds
);

264 
ö_sk
[
n_ö_sk
++] = 
s
;

266 
CHECKCONNECTION_OK
:

267 
sock_c⁄n
 = 
s
;

268 
out
;

271 
	`Clo£Sockë
(
s
);

277 
i
=0; i < 
n_addr
; i++)

279 
›éí
, 
îr
 = 0;

280 if(
out_sk
[
i
] =
INVALID_SOCKET
) ;

282 if(
	`FD_ISSET
(
out_sk
[
i
], &
t_wfds
))

284 
›éí
 = (
îr
);

285 if(
	`PA_GëSockO±
(
out_sk
[
i
], 
SOL_SOCKET
, 
SO_ERROR
, &
îr
, &
›éí
) < 0)

292 if(
îr
 == 0)

294 
cb_æt
 = 
	`cb
(
out_sk
[
i
], 
SOCK_STATUS_CONNECTED
, 
d©a
);

296 
cb_æt
)

298 
CHECKCONNECTION_CONTINUE
:

299 
	`FD_CLR
(
out_sk
[
i
], &
wfds
);

300 
	`FD_SET
(
out_sk
[
i
], &
rfds
);

302 
CHECKCONNECTION_OK
:

303 
sock_c⁄n
 = 
out_sk
[
i
];

304 
out_sk
[
i
] = 
INVALID_SOCKET
;

305 
out
;

308 
îr
 = -1;

311 if(!
îr
) ;

314 if(
	`FD_ISSET
(
out_sk
[
i
], &
t_efds
))

316 
›éí
 = (
îr
);

317 
	`PA_GëSockO±
(
out_sk
[
i
], 
SOL_SOCKET
, 
SO_ERROR
, &
îr
, &
›éí
);

319 if(
	`FD_ISSET
(
out_sk
[
i
], &
t_rfds
))

321 
cb_æt
 = 
	`cb
(
out_sk
[
i
], 
SOCK_STATUS_READABLE
, 
d©a
);

323 
cb_æt
)

325 
CHECKCONNECTION_CONTINUE
:

327 
CHECKCONNECTION_OK
:

328 
sock_c⁄n
 = 
out_sk
[
i
];

329 
out_sk
[
i
] = 
INVALID_SOCKET
;

330 
out
;

333 
	`Clo£Sockë
(
out_sk
[
i
]);

334 
	`FD_CLR
(
out_sk
[
i
], &
rfds
);

335 
	`FD_CLR
(
out_sk
[
i
], &
efds
);

336 
out_sk
[
i
] = 
INVALID_SOCKET
;

337 if(
cb_æt
 =-
P2PS_AUTH_FAILED
)

339 
æt
 = 
P2PS_AUTH_FAILED
;

340 
out
;

346 if(
îr
)

349 if(
îr
 =
ECONNREFUSED
)

351 
out_ªfu£d_˙t
[
i
]++;

355 
ßi
.
sö_p‹t
 = 
≥î_addr
[
i
].
p‹t
;

356 
ßi
.
sö_addr
.
s_addr
 = 
≥î_addr
[
i
].
ù
;

359 if(
	`c⁄√˘
(
out_sk
[
i
], (
sockaddr
*)&
ßi
, (sai)) < 0)

361 
îr
 = 
	`PA_SockëGëEº‹
();

362 if(
îr
 =
ECONNABORTED
)

363 if(
	`c⁄√˘
(
out_sk
[
i
], (
sockaddr
*)&
ßi
, (sai)) < 0)

364 
îr
 = 
	`PA_SockëGëEº‹
();

365 if(
îr
 !
EINPROGRESS
)

373 
	`PA_SockëClo£
(
out_sk
[
i
]);

374 
	`FD_CLR
(
out_sk
[
i
], &
wfds
);

375 
	`FD_CLR
(
out_sk
[
i
], &
efds
);

376 
out_sk
[
i
] = 
INVALID_SOCKET
;

379 if(
îr
 !
EINPROGRESS
)

381 
	`Clo£Sockë
(
out_sk
[
i
]);

382 
	`FD_CLR
(
out_sk
[
i
], &
wfds
);

383 
	`FD_CLR
(
out_sk
[
i
], &
efds
);

384 
out_sk
[
i
] = 
INVALID_SOCKET
;

389 
i
=0; i<
n_ö_sk
; i++)

391 if(
ö_sk
[
i
] !
INVALID_SOCKET
 && 
	`FD_ISSET
(ö_sk[i], &
t_rfds
))

393 
cb_æt
 = 
	`cb
(
ö_sk
[
i
], 
SOCK_STATUS_READABLE
, 
d©a
);

395 
cb_æt
)

397 
CHECKCONNECTION_CONTINUE
:

399 
CHECKCONNECTION_OK
:

400 
sock_c⁄n
 = 
ö_sk
[
i
];

401 
ö_sk
[
i
] = 
INVALID_SOCKET
;

402 
out
;

405 
	`FD_CLR
(
ö_sk
[
i
], &
rfds
);

406 
	`Clo£Sockë
(
ö_sk
[
i
]);

407 
ö_sk
[
i
] = 
INVALID_SOCKET
;

408 if(
cb_æt
 =-
P2PS_AUTH_FAILED
)

410 
æt
 = 
P2PS_AUTH_FAILED
;

411 
out
;

418 if(
sock_c⁄n
 !
INVALID_SOCKET
) ;

421 
out
:

422 
	`Clo£Sockë
(
sk0
);

423 
i
=0; i<
n_addr
; i++Ëif(
out_sk
[i] !
INVALID_SOCKET
Ë
	`Clo£Sockë
(out_sk[i]);

424 
i
=0; i<
n_ö_sk
; i++Ëif(
ö_sk
[i] !
INVALID_SOCKET
Ë
	`Clo£Sockë
(in_sk[i]);

425 if(
sock_c⁄n
 !
INVALID_SOCKET
)

427 
	`£tblk
(
sock_c⁄n
, 1);

428 *
sock
 = 
sock_c⁄n
;

430 
ß_Àn
 = (
ßi
);

431 
	`gësock«me
(
sock_c⁄n
, (
sockaddr
*)&
ßi
, &
ß_Àn
);

433 
ß_Àn
 = (
ßi
);

434 
	`gë≥î«me
(
sock_c⁄n
, (
sockaddr
*)&
ßi
, &
ß_Àn
);

439  
æt
;

440 
	}
}

443 
N©Ty≥
 
	$sim∂e_°un_ty≥
(
DWORD
 
ù
, *
¥e£rve_p‹t
, *
haúpö
, *
dñè
)

445 
sock1
;

446 
p‹t1
;

447 
sockaddr_ö
 
ßi
;

448 
sockÀn_t
 
ß_Àn
;

449 
p2pc‹e_quîy_addªss_ª•⁄£
 
dqr1
, 
dqr2
;

450 
p2pc‹e_hódî
 
dh
;

451 
N©Ty≥
 
ty≥
;

453 
ty≥
 = 
StunTy≥Blocked
;

454 *
¥e£rve_p‹t
 = 0;

455 *
dñè
 = 0;

456 *
haúpö
 = 0;

457 
	`öô_p2pc‹e_hódî
(&
dh
, 
ST_CALLEE
, 
OP_QUERY_ADDRESS
, 
CLS_REQUEST
, 0, 0, 0);

459 
sock1
 = 
	`NewSockëAndBöd
(
SOCK_DGRAM
, 0, 0);

460 
ß_Àn
 = (
ßi
);

461 
	`gësock«me
(
sock1
, (
sockaddr
*)&
ßi
, &
ß_Àn
);

462 
p‹t1
 = 
	`¡ohs
(
ßi
.
sö_p‹t
);

466 
ßi
.
sö_addr
.
s_addr
 = 
ù
;

467 
ßi
.
sö_p‹t
 = 
	`¡ohs
(
STUN_SVR_PORT
);

468 if(
	`£nd_ªcv_ovî_udp
(
sock1
, (c⁄° 
sockaddr
*)&
ßi
, &
dh
, &
dqr1
, (dqr1)) == (dqr1))

470 
i
;

471 
uöt32
 
ùs
[10];

472 
n_loˇl
;

474 
n_loˇl
 = 
	`gë_loˇl_ùs
(
ùs
, 10);

475 
ty≥
 = 
StunTy≥P‹tDïídedFûãr
;

476 
i
=0; i<
n_loˇl
; i++)

478 if(
ùs
[
i
] =
dqr1
.
ext_addr
.
ù
)

480 
	`PA_SockëClo£
(
sock1
);

481  
StunTy≥O≥n
;

485 *
¥e£rve_p‹t
 = (
p‹t1
 =
	`¡ohs
(
dqr1
.
ext_addr
.
p‹t
))?1:0;

489 
	`mem£t
(&
ßi
, 0, (sai));

490 
ßi
.
sö_Ámûy
 = 
AF_INET
;

491 
ßi
.
sö_addr
.
s_addr
 = 
dqr1
.
£rvî2
.
ù
;

492 
ßi
.
sö_p‹t
 = 
dqr1
.
£rvî2
.
p‹t
;

493 if(
	`£nd_ªcv_ovî_udp
(
sock1
, (c⁄° 
sockaddr
*)&
ßi
, &
dh
, &
dqr2
, (dqr2)) == (dqr2))

497 if(
dqr2
.
ext_addr
.
p‹t
 !
dqr1
.ext_addr.port)

499 
ty≥
 = 
StunTy≥DïídítM≠pög
;

500 *
dñè
 = 
	`¡ohs
(
dqr2
.
ext_addr
.
p‹t
Ë-Çtohs(
dqr1
.ext_addr.port);

505 if(
sock1
 > 0Ë
	`PA_SockëClo£
(sock1);

506  
ty≥
;

507 
	}
}

510 
N©Ty≥
 
	$sim∂e_°u¡_ty≥
(
DWORD
 
ù
, *
¥e£rve_p‹t
, *
haúpö
, *
dñè
)

512 
sock1
;

513 
p‹t1
;

514 
sockaddr_ö
 
ßi
;

515 
sockÀn_t
 
ß_Àn
;

516 
p2pc‹e_quîy_addªss_ª•⁄£
 
dqr1
, 
dqr2
;

517 
N©Ty≥
 
ty≥
;

518 
›t
;

520 
ty≥
 = 
StunTy≥Blocked
;

521 *
¥e£rve_p‹t
 = 0;

522 *
dñè
 = 0;

523 *
haúpö
 = 0;

525 
sock1
 = 
	`NewSockëAndBöd
(
SOCK_STREAM
, 0, 0);

526 
›t
 = 1;

527 
	`£tsock›t
(
sock1
, 
IPPROTO_TCP
, 
TCP_NODELAY
, (c⁄° *)&
›t
, ());

528 
ß_Àn
 = (
ßi
);

529 
	`gësock«me
(
sock1
, (
sockaddr
*)&
ßi
, &
ß_Àn
);

530 
p‹t1
 = 
	`¡ohs
(
ßi
.
sö_p‹t
);

534 
ßi
.
sö_addr
.
s_addr
 = 
ù
;

535 
ßi
.
sö_p‹t
 = 
	`¡ohs
(
STUN_SVR_PORT
);

536 if(
	`c⁄√˘
(
sock1
, (c⁄° 
sockaddr
*)&
ßi
, (sockaddr)) == 0 &&

537 
	`ªcv
(
sock1
, (*)&
dqr1
, (dqr1), 0) == (dqr1) )

539 
i
;

540 
uöt32
 
ùs
[10];

541 
n_loˇl
;

543 
n_loˇl
 = 
	`gë_loˇl_ùs
(
ùs
, 10);

544 
ty≥
 = 
StunTy≥P‹tDïídedFûãr
;

545 
i
=0; i<
n_loˇl
; i++)

547 if(
ùs
[
i
] =
dqr1
.
ext_addr
.
ù
)

549 
	`PA_SockëClo£
(
sock1
);

550  
StunTy≥O≥n
;

554 *
¥e£rve_p‹t
 = (
p‹t1
 =
	`¡ohs
(
dqr1
.
ext_addr
.
p‹t
))?1:0;

556 
	`PA_SockëClo£
(
sock1
);

557 
sock1
 = 
	`NewSockëAndBöd
(
SOCK_STREAM
, 0, 
p‹t1
);

558 
	`£tsock›t
(
sock1
, 
IPPROTO_TCP
, 
TCP_NODELAY
, (c⁄° *)&
›t
, ());

561 
	`mem£t
(&
ßi
, 0, (sai));

562 
ßi
.
sö_Ámûy
 = 
AF_INET
;

563 
ßi
.
sö_addr
.
s_addr
 = 
dqr1
.
£rvî2
.
ù
;

564 
ßi
.
sö_p‹t
 = 
dqr1
.
£rvî2
.
p‹t
;

565 if(
	`c⁄√˘
(
sock1
, (c⁄° 
sockaddr
*)&
ßi
, (sai)) == 0 &&

566 
	`ªcv
(
sock1
, (*)&
dqr2
, (dqr2), 0) == (dqr2))

570 if(
dqr2
.
ext_addr
.
p‹t
 !
dqr1
.ext_addr.port)

572 
ty≥
 = 
StunTy≥DïídítM≠pög
;

573 *
dñè
 = 
	`¡ohs
(
dqr2
.
ext_addr
.
p‹t
Ë-Çtohs(
dqr1
.ext_addr.port);

578 if(
sock1
 > 0Ë
	`PA_SockëClo£
(sock1);

579  
ty≥
;

580 
	}
}

582 #ifde‡
TEST_NAT_TYPE


584 
	$maö
(
¨gc
, *
¨gv
[])

587 
¥e£rve_p‹t
, 
haúpö
;

588 
dñè
;

589 if(
¨gc
 == 1)

591 
	`¥ötf
("%†°un_£rvî\n", 
¨gv
[0]);

594 
	`¥ötf
("°u¿ty≥ = %d\n", 
	`sim∂e_°un_ty≥
(
	`öë_addr
(
¨gv
[1]), &
¥e£rve_p‹t
, &
haúpö
, &
dñè
));

595 
	`¥ötf
("¥e£rve_p‹à%d, haúpö = %d, dñè = %d\n", 
¥e£rve_p‹t
, 
haúpö
, 
dñè
);

597 
	}
}

	@p2pbase.h

12 #i‚de‡
__p2pba£_h__


13 
	#__p2pba£_h__


	)

15 
	~"∂©f‹m_ad±.h
"

16 
	~"p2pc⁄°.h
"

18 #ifde‡
WIN32


19 #¥agm®
w¨nög
(
dißbÀ
: 4200)

22 #ifde‡
__˝lu•lus


27 
	#P2PCORE_SERVICE_PORT
 8126

	)

28 
	#P2PCORE_SERVICE_PORT2
 8127

29 
	#STUN_SVR_PORT
 3478

	)

31 #i‚de‡
__BIG_ENDIAN__


32 
	#P2PCORE_TAG
 0xD0EAC10D

33 
	#P2PCORE_VERSION
 0x01000000

	)

35 
	#P2PCORE_TAG
 0x0DC1EAD0

36 
	#P2PCORE_VERSION
 0x00000001

	)

42 
	#ST_CALLEE
 0

	)

43 
	#ST_CALLER
 1

	)

44 
	#ST_SERVER
 2

	)

47 
	#CLS_REQUEST
 0

	)

48 
	#CLS_RESPONSE
 1

	)

54 
	#OP_NONE
 0

	)

55 
	#OP_SEARCH
 1

56 
	#OP_QUERY_ADDRESS
 2

57 
	#OP_CS_SESSION_INIT
 3

	)

58 
	#OP_SD_SESSION_NOTIFY
 4

	)

59 
	#OP_SC_SESSION_BEGIN
 5

	)

60 
	#OP_PUNCH
 6

	)

61 
	#OP_HEART_BEAT
 7

62 
	#OP_DS_IAMHERE
 8

64 
	#OP_DECLARE
 10

65 

	)

70 
	sp2pc‹e_hódî
 {

71 
uöt32
 
èg
;

72 
uöt32
 
å™s_id
;

73 #i‚de‡
__BIG_ENDIAN__


74 
uöt8
 
›
:5;

75 
uöt8
 
˛s
:1;

76 
uöt8
 
°
:2;

78 
uöt8
 
°
:2;

79 
uöt8
 
˛s
:1;

80 
uöt8
 
›
:5;

82 
uöt8
 
°©us
;

83 
uöt16
 
Àngth
;

86 
uöt32
 
	tp2pc‹e_å™sid_t
;

87 
uöt16
 
	tp2pc‹e_d©Æí_t
;

89 
	#P2PCORE_STATUS
(
ph
Ë(’h)->
°©us
)

	)

90 
	#P2PCORE_SET_STATUS
(
ph
, 
°©us
Ë’h)->°©u†(°©us)

	)

91 
	#P2PCORE_OP
(
ph
Ë(’h)->
›
)

	)

92 
	#P2PCORE_SET_OP
(
ph
, 
_›
Ë’h)->
›
 = (_›)

	)

93 
	#P2PCORE_TID
(
ph
Ë
	`¡ohl
(’h)->
å™s_id
)

	)

94 
	#P2PCORE_SET_TID
(
ph
, 
_å™s_id
Ë(’h)->
å™s_id
 = 
	`ht⁄l
(_å™s_id))

	)

95 
	#P2PCORE_DATA_LEN
(
ph
Ë
	`¡ohs
(’h)->
Àngth
)

	)

96 
	#P2PCORE_SET_DATA_LEN
(
ph
, 
Àn
Ë’h)->
Àngth
 = 
	`ht⁄s
÷í)

	)

97 
	#P2PCORE_PACKET_LEN
(
ph
Ë((
p2pc‹e_hódî
Ë+ 
	`¡ohs
(’h)->
Àngth
))

	)

100 
	#LENGTH_OF_CHALLENGE
 16

	)

101 
	#LENGTH_OF_SESSION_ID
 16

	)

102 
	#LENGTH_OF_AUTH
 16

	)

103 
	#LENGTH_OF_SN
 32

	)

104 
	#LENGTH_OF_SIDENT
 64

	)

106 
	sp2pc‹e_addr
 {

107 
uöt32
 
ù
;

108 
uöt16
 
p‹t
;

109 
uöt16
 
Êags
;

113 
	sp2pc‹e_quîy_addªss_ª•⁄£
 {

114 
p2pc‹e_hódî
 
dh
;

115 
p2pc‹e_addr
 
ext_addr
;

116 
p2pc‹e_addr
 
£rvî2
;

119 
	sp2pc‹e_addr_∑ú
 {

120 
p2pc‹e_addr
 
loˇl
;

121 
p2pc‹e_addr
 
exã∫Æ
;

124 
	s«t_öfo
 {

125 
uöt8
 
dñè
;

126 
uöt8
 
u≤p
:1;

127 
uöt8
 
haúpö
:1;

128 
uöt8
 
¥e£rve_p‹t
:1;

129 
uöt8
 
«t
:3;

130 } 
__PACKED__
;

133 
	sp2pc‹e_i_am_hîe
 {

134 
p2pc‹e_hódî
 
dh
;

135 
¢
[
LENGTH_OF_SN
];

137 
uöt32
 
vîsi⁄
;

139 
«t_öfo
 
°un
;

140 
uöt8
 
ª£rved2
[2];

141 } 
__PACKED__
;

145 
	sp2pc‹e_i_am_hîe_ack
 {

146 
p2pc‹e_hódî
 
dh
;

147 
p2pc‹e_addr
 
ext_addr
;

148 
d©a
[0];

153 
	sp2pc‹e_punch
 {

154 
p2pc‹e_hódî
 
dh
;

155 
¢
[
LENGTH_OF_SN
];

156 
uöt8
 
£ss_id
[
LENGTH_OF_SESSION_ID
];

157 
auth_°r
[0];

162 
	#p2pc‹e_hóπ_bót
 
p2pc‹e_hódî


	)

166 
	sc⁄n_bô_fõlds
 {

168 
uöt32
 
ª£rved
:13;

169 
uöt32
 
auth
:1;

172 
uöt32
 
n_addr
:4;

175 
uöt32
 
dñè
:6;

176 
uöt32
 
haúpö
:1;

177 
uöt32
 
¥e£rve_p‹t
:1;

178 
uöt32
 
«t
:3;

181 
uöt32
 
t˝
:1;

182 
uöt32
 
˘
:2;

236 
	sp2pc‹e_£ssi⁄_öô
 {

237 
p2pc‹e_hódî
 
dh
;

239 
¢
[
LENGTH_OF_SN
];

240 
uöt8
 
£ss_id
[
LENGTH_OF_SESSION_ID
];

241 
uöt8
 
sidít
[
LENGTH_OF_SIDENT
];

243 
c⁄n_bô_fõlds
 
bôs
;

244 
uöt32
 
bôf
;

247 
p2pc‹e_addr
 
addrs
[0];

262 #ifde‡
WIN32


267 
öô_p2pc‹e_hódî
(
p2pc‹e_hódî
* 
p
, 
°
, 
›
, 
˛s
, 
°©us
, 
Àn
, 
p2pc‹e_å™sid_t
 
å™s_id
);

268 
INLINE
 
BOOL
 
check_p2pc‹e_hódî
(c⁄° 
p2pc‹e_hódî
 *
pdc
)

270  ((
pdc
->
èg
 & 0xF0FFFFFFË=
P2PCORE_TAG
);

275 
p2pc‹e_gë_chÆÀnge
(
sk
, 
°
, 
uöt8
 
¢_u£r
[16], uöt8 
rvÆ
[
LENGTH_OF_CHALLENGE
]);

282 
quîy_exã∫Æ_addªss
(c⁄° 
sockaddr
* 
svr
, 
p2pc‹e_addr
* 
pda
, 
loˇl_p‹t
);

287 
quîy_«t_dñè
(c⁄° 
sockaddr
* 
svr
, 
loˇl_p‹t
, *
ext_ù
, *
dñè
);

291 
N©Ty≥
 
sim∂e_°u¡_ty≥
(
DWORD
 
ù
, *
¥e£rve_p‹t
, *
haúpö
, *
dñè
);

292 
N©Ty≥
 
sim∂e_°un_ty≥
(
DWORD
 
ù
, *
¥e£rve_p‹t
, *
haúpö
, *
dñè
);

297 
gë_loˇl_ùs
(
uöt32
* 
pIps
, 
size
);

305 
£nd_ªcv_ovî_udp
(
sock
, c⁄° 
sockaddr
* 
addr
, c⁄° 
p2pc‹e_hódî
* 
p
, * 
buf
, 
size
);

308 
ˇlc_auth
(c⁄° * 
∑ssw‹d
, c⁄° 
uöt8
* 
chÆÀnge
, uöt8* 
auth
);

311 
	#SOCK_STATUS_CONNECTED
 1

	)

312 
	#SOCK_STATUS_ACCEPTED
 2

	)

313 
	#SOCK_STATUS_READABLE
 3

	)

315 
	#CHECKCONNECTION_OK
 0

	)

316 
	#CHECKCONNECTION_CONTINUE
 1

	)

317 
	#CHECKCONNECTION_FAKE
 2

	)

318 
	#CHECKCONNECTION_RESETED
 3

322 (*
	tCHECKCONNECTIONCB
)(
	tsock
, 
	t°©us
, * 
	td©a
);

	)

338 
p2pc‹e_t˝_punch
(
uöt16
 
loˇl_p‹t
, 
™Ÿhî_li°íög_sock
,

339 
c⁄n_bô_fõlds
 
bôs
, c⁄° 
p2pc‹e_addr
 *
≥î_addr
,

340  *
sock
,

341 
CHECKCONNECTIONCB
 
cb
, * 
d©a
);

346 #ifde‡
__˝lu•lus


	@p2pconst.h

1 #i‚de‡
__p2pc⁄°_h__


2 
	#__p2pc⁄°_h__


	)

7 
	#P2PS_OK
 0

	)

8 
	#P2PS_AUTH_FAILED
 1

	)

9 
	#P2PS_ERROR_TRANSID
 2

	)

10 
	#P2PS_ERROR_PACKET
 3

11 
	#P2PS_SESSION_CLOSED
 4

	)

12 
	#P2PS_ADDRESS_CHANGED
 5

13 
	#P2PS_INACTIVE
 6

	)

14 
	#P2PS_CALLEE_OFFLINE
 7

15 
	#P2PS_UNEXPECTED
 8

	)

16 
	#P2PS_LACK_OF_RESOURCE
 9

	)

17 
	#P2PS_NOT_ALLOWED
 10

	)

18 
	#P2PS_RELAY_SERVER_UNVAILABLE
 11

	)

19 
	#P2PS_UNRECOGNIZED_CMD
 12

	)

20 
	#P2PS_CHANGE_CONN_TYPE
 13

	)

21 
	#P2PS_CONTINUE
 14

22 
	#P2PS_CHANGE_MAIN_PORT
 15

24 

	)

27 
	#P2PE_OK
 0

	)

28 
	#P2PE_CANNOT_RESOLVE_HOST
 300

	)

29 
	#P2PE_INVALID_CONN_OBJECT
 301

	)

30 
	#P2PE_NO_RESPONSE
 302

	)

31 
	#P2PE_SERVER_NO_RESPONSE
 303

	)

32 
	#P2PE_ERROR_RESPONSE
 304

	)

33 
	#P2PE_SOCKET_ERROR
 305

	)

34 
	#P2PE_CONN_FAILED
 306

	)

35 
	#P2PE_TIMEOUTED
 307

	)

36 
	#P2PE_NO_DEV
 308

37 
	#P2PE_SESS_ABORTED
 309

	)

38 
	#P2PE_AGAIN
 310

	)

39 
	#P2PE_INVALID_PARAM
 311

	)

40 
	#P2PE_FAILED
 312

	)

41 
	#P2PE_NOT_ALLOWED
 313

	)

47 
	#P2P_CONNTYPE_AUTO
 0

	)

48 
	#P2P_CONNTYPE_LOCAL
 1

	)

49 
	#P2P_CONNTYPE_P2P
 2

	)

50 
	#P2P_CONNTYPE_RELAY
 3

	)

56 
	mStunTy≥Unknown
=0,

57 
	mStunTy≥Blocked
=0,

58 
	mStunTy≥O≥n
,

60 #i‚de‡
RFC_STUN


61 
	mStunTy≥IndïídítFûãr
,

62 
	mStunTy≥DïídítFûãr
,

63 
	mStunTy≥P‹tDïídedFûãr
,

64 
	mStunTy≥DïídítM≠pög
,

66 
	mStunTy≥C⁄eN©
,

67 
	mStunTy≥Re°ri˘edN©
,

68 
	mStunTy≥P‹tRe°ri˘edN©
,

69 
	mStunTy≥SymN©
,

71 
	mStunTy≥FúewÆl
,

72 
	mStunTy≥Faûuª
,

73 } 
	tN©Ty≥
;

	@p2pcore.c

1 
	~<°rög.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<sys/°©.h
>

5 
	~<time.h
>

6 #ifde‡
__LINUX__


7 
	~<ªsﬁv.h
>

8 
	~<sy¶og.h
>

9 
	~<°d¨g.h
>

11 
	~"rudp.h
"

12 
	~"√tba£.h
"

13 
	~"p2pc‹e.h
"

14 
	~"p2pc‹e_ex.h
"

15 
	~"p2pc‹e_imp.h
"

16 
	~"timîq.h
"

17 
	~"u≤p_igd_˝.h
"

18 
	~"°unc/dë_«t.h
"

19 
	~"p2∂og.h
"

21 #ifde‡
__LINUX__


22 
	~<ªsﬁv.h
>

23 
	~<löux/if.h
>

26 
	$_∑u£
(c⁄° *
¥om±
)

28 
löe
[64];

29 
	`¥ötf
(
¥om±
); 
	`fÊush
(
°dö
);

30 
	`fgës
(
löe
, 64, 
°dö
);

31 
	}
}

33 #ifde‡
_DEBUG


35 #ifde‡
WIN32


36 
	#dbg_p2p
(
fmt
, ...Ë
	`Log
(
__FUNCTION__
, fmt, 
__VA_ARGS__
)

	)

38 
	#dbg_p2p
(
fmt
, 
¨gs
...Ë
	`Log
(
__FUNCTION__
, fmt, ##¨gs)

	)

43 #ifde‡
WIN32


44 
	#dbg_p2p
(
fmt
, 
__VA_ARGS__
)

	)

46 
	#dbg_p2p
(
fmt
, 
¨gs
...)

	)

51 
	#SAFE_FREE
(
x
Ëif(xË{ 
	`‰ì
(x); x=
NULL
; }

	)

54 
	#SESSION_TIMEOUT
 15000

	)

55 
	#CONNECT_TO_RELAYER_TIMEOUT
 6000

	)

56 
	#WAIT_FOR_PEER_INFO_TIMEOUT
 6000

	)

58 
	#NORMAL_INTERVAL
 25000

59 
	#INACTIVE_INTERVAL
 3600000

60 
	#MAX_TIME_WAIT_FOR_ACK
 4000

61 
	#SESSION_REQUEST_TIMEOUT
 6000

	)

63 
	#MAX_ACCEPTED_RUDPSOCK
 10

	)

68 
	mPSS_ALLOCATED
,

70 
	mPSS_WAIT_FOR_SERVER_ACK
,

71 
	mPSS_WAIT_FOR_PEER_INFO
,

73 
	mPSS_PUNCHING
,

74 
	mPSS_RUDP_CONNECTING
,

75 
	mPSS_FAILED
,

76 
	mPSS_CONNECTED
,

77 
	mPSS_CLOSED


80 
LIST_HEAD
(
s_P2pC⁄nLi°
);

81 
PA_MUTEX
 
	gs_muãxC⁄nLi°
;

82 
PA_MUTEX
 
	gs_PunchC⁄cuºícyMuãx
;

84 
PunchNewAndKûlTimeouãdC⁄n
(
now
);

85 
_ˇŒìC⁄nInô
(c⁄° 
sockaddr_ö
* 
pSvrAddr
, c⁄° 
p2pc‹e_£ssi⁄_öô
* 
psi
, 
now
);

86 
h™dÀ_punch
(
P2PCONN
* 
pc⁄n
, c⁄° 
p2pc‹e_punch
* 
pdp
, c⁄° 
sockaddr_ö
* 
µìr_addr
, 
RUDPSOCKET
 
ac˚±ed_sock
);

87 
¸óã_£ssi⁄_öô_ack
(
uöt8
 *
buf
, 
c⁄n_bô_fõlds
 
bôs
, c⁄° 
p2pc‹e_addr
* 
∑ddrs
,

88 c⁄° * 
¢
, c⁄° 
uöt8
* 
£ss_id
, 
uöt32
 
å™s_id
);

89 
PA_THREAD_RETTYPE
 
__STDCALL
 
t˝_punch_thªad
(* 
d©a
);

90 
udp_punch_ô
(
P2PCONN
* 
pc⁄n
);

93 
	#_CALLCB
(
f
Ëif(
s_pCÆlbackFuncs
 && s_pCÆlbackFuncs->fËs_pCÆlbackFuncs->
	)
f

95 
£ndCuºítPBClock
(*
d©a
, 
DWORD
 
t
);

98 
P2PCORECBFUNCS
 *
	gs_pCÆlbackFuncs
 = 
NULL
;

100 vﬁ©ûê
BOOL
 
	gs_bRunP2p
;

101 
c⁄n_bô_fõlds
 
	g_°un_bf
;

102 
p2pc‹e_å™sid_t
 
	gs_TønsId
;

103 
PA_SPIN
 
	g•ö_å™s_id
;

106 
	sloˇl_c⁄n_öfo
 {

107 
c⁄n_bô_fõlds
 
	mbôs
;

108 
p2pc‹e_addr
 
	maddrs
[10];

109 } 
	tLOCALCONNINFO
;

113 
	gloˇl_p‹t_mö
=12001, 
	gloˇl_p‹t_max
=12500;

114 
	gloˇl_p‹t_cur
=12001;

116 
	$£t_loˇl_p‹t_ønge
(
low
, 
hi
)

118 if(
low
 < 
hi
)

120 
loˇl_p‹t_mö
 = 
low
;

121 
loˇl_p‹t_max
 = 
hi
;

125 
loˇl_p‹t_mö
 = 
hi
;

126 
loˇl_p‹t_max
 = 
low
;

128 
loˇl_p‹t_cur
 = 
loˇl_p‹t_mö
;

129 
	}
}

132 
	$gëP‹tOff£t
()

134 
n
, 
i
;

135 
ETHERNIC
 
nic
[4];

136 
n
 = 
	`GëIpAddªs£s
(
nic
, 4);

137 
i
=0; i<
n
; i++)

139 #ifde‡
__LINUX__


140 if(
nic
[
i
].
Êags
 & (
IFF_UP
 | 
IFF_RUNNING
))

142  
	`¡ohl
(
nic
[
i
].
addr
.
s_addr
) & 0xFF;

145 
	}
}

147 
	$gëU≤pM≠pögP‹t
()

149  23000 + 
	`gëP‹tOff£t
();

150 
	}
}

151 
	gp2p_maö_p‹t
 = 0;

152 
	$gëP2pMaöP‹t
()

154  
p2p_maö_p‹t
;

155 
	}
}

157 
	g__SN
[32];

158 
RUDPSOCKET
 
	gu≤p_rudp_sock
;

160 
	gudp_sock_maö
 = 
INVALID_SOCKET
;

161 
	g°un_£rvî
[48] = "stunserver.org";

162 
sockaddr_ö
 
	gp2p_£rvî
;

165 
	$dëe˘N©
(*
p
)

168 
BOOL
 
¥e£rveP‹t
, 
haúpö
;

169 
dñè
, 
dñè2
;

170 
sockaddr_ö
 
°unsvr
;

172 
	`öô_ßi
(&
°unsvr
, 
°un_£rvî
, 
STUNT_SERVER_PORT
);

173 
_°un_bf
.
«t
 = 
	`°unN©Ty≥
(
°unsvr
.
sö_addr
.
s_addr
, &
¥e£rveP‹t
, &
haúpö
, &
dñè
);

174 
	`dbg_p2p
("dëe˘ stu¿N©Ty≥: %d, dñè = %d", 
_°un_bf
.
«t
, 
dñè
);

175 if(
_°un_bf
.
«t
 != 0)

177 
_°un_bf
.
¥e£rve_p‹t
 = 
¥e£rveP‹t
?1:0;

178 
_°un_bf
.
haúpö
 = hairpin?1:0;

179 
_°un_bf
.
dñè
 = _°un_bf.
«t
 =
StunTy≥DïídítM≠pög
?(delta<8?delta:0):0;

180 if(
_°un_bf
.
«t
 =
StunTy≥DïídítM≠pög
 && 
dñè
 < 8)

182 
	`°unN©Ty≥
(
°unsvr
.
sö_addr
.
s_addr
, &
¥e£rveP‹t
, &
haúpö
, &
dñè2
);

183 if(
dñè
 !
dñè2
)

185 
_°un_bf
.
dñè
 = 0;

186 
	`dbg_p2p
("Stun:Öort cannotÖredicted");

191 
öãrvÆ
;

192 if(
_°un_bf
.
«t
 =0Ë
öãrvÆ
 = 30;

193 if(
_°un_bf
.
«t
 =
StunTy≥DïídítM≠pög
 && _°un_bf.
dñè
 =0Ë
öãrvÆ
 = 300;

194 
öãrvÆ
 = 3600;

195 
	`QueueSîvi˚Iãm
(
SLOW_QUEUE
, 
dëe˘N©
, 
NULL
, 
öãrvÆ
*1000, "detectNat");

198 
r
 = 
	`dëe˘_«t
(
°un_£rvî
);

199 
_°un_bf
.
«t
 = 
r
&0x0F;

200 
_°un_bf
.
haúpö
 = (
r
&0x10)?1:0;

201 
_°un_bf
.
¥e£rve_p‹t
 = (
r
&0x20)?1:0;

202 
_°un_bf
.
dñè
 = (_°un_bf.
«t
 =
StunTy≥DïídítM≠pög
)?(
r
>>8):0;

203 
	`dbg_p2p
("NAT dëe˘ed,Ç©:%d,Öª£rvêp‹t:%d, dñè:%d", ()
_°un_bf
.
«t
, ()_°un_bf.
¥e£rve_p‹t
, ()_°un_bf.
dñè
);

205 
	}
}

208 
	$öô_punch_∑ckage
(
p2pc‹e_punch
 *
pdp
, c⁄° 
P2PCONN
 *
pc⁄n
)

210 
	`öô_p2pc‹e_hódî
(&
pdp
->
dh
, 
pc⁄n
->
is_ˇŒî
?
ST_CALLER
:
ST_CALLEE
, 
OP_PUNCH
, 
CLS_REQUEST
, 0,

211 (
p2pc‹e_punch
)-(
p2pc‹e_hódî
Ë+ 
pc⁄n
->
tmp
->
auth_Àn
 + 1, 0);

212 
	`mem˝y
(
pdp
->
£ss_id
, 
pc⁄n
->£ss_id, 
LENGTH_OF_SESSION_ID
);

213 
	`mem£t
(
pdp
->
¢
, 0, 
LENGTH_OF_SN
);

214 
	`°∫˝y
(
pdp
->
¢
, 
pc⁄n
->
is_ˇŒî
?pc⁄n->
tmp
->
£ss_ªq
.¢:
__SN
, 
LENGTH_OF_SN
);

216 if(
pc⁄n
->
tmp
->
auth_°r
)

217 
	`mem˝y
(
pdp
->
auth_°r
, 
pc⁄n
->
tmp
->auth_°r,Öc⁄n->tmp->
auth_Àn
+1);

218 
	}
}

220 
	$brﬂdˇ°OnAŒI¡îÁ˚s
(c⁄° 
sockaddr
 *
d°
, c⁄° *
s
, 
Àn
)

222 
i
, 
n_nic
;

223 
ETHERNIC
 
™
[5];

224 
sockaddr_ö
 
ßi
;

227 
	`mem£t
(&
ßi
, 0, (sai));

228 
ßi
.
sö_Ámûy
 = 
AF_INET
;

229 
n_nic
 = 
	`GëIpAddªs£s
(
™
, 5);

232 
i
=0; i<
n_nic
; i++)

234 #ifde‡
__LINUX__


235 if(!(
™
[
i
].
Êags
 & 
IFF_UP
)) ;

238 
sock
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

239 
ßi
.
sö_addr
 = 
™
[
i
].
addr
;

240 if(
	`böd
(
sock
, (
sockaddr
*)&
ßi
, (sai)) < 0)

243 
i›t
 = 1;

244 
	`PA_SëSockO±
(
sock
, 
SOL_SOCKET
, 
SO_BROADCAST
, &
i›t
, ());

245 if(
	`PA_SídTo
(
sock
, 
s
, 
Àn
, 0, (
sockaddr
*)
d°
, (sockaddr)) < 0)

246 
	`≥º‹
("send_to ");

247 
	`PA_SockëClo£
(
sock
);

249 
	}
}

251 
	$h™dÀSórch
(
sock_r
)

253 °ru˘ { 
p2pc‹e_hódî
 
dh
; 
buff
[400]; } 
°
;

254 
sockaddr_ö
 
ß_˛t
;

255 
sockÀn_t
 
ß_Àn
 = (
ß_˛t
);

256 
Àn
 = 
	`PA_RecvFrom
(
sock_r
, &
°
, (°), 0, (
sockaddr
*)&
ß_˛t
, &
ß_Àn
);

257 if(
Àn
 > 0)

259 if(
	`P2PCORE_OP
(&
°
.
dh
Ë=
OP_SEARCH
)

261 if(
°
.
dh
.
Àngth
 != 0)

263 
°
.
buff
[
	`P2PCORE_DATA_LEN
(&°.
dh
)] = '\0';

264 if(
	`°rcmp
(
__SN
, 
°
.
buff
)) ;

267 
°
.
dh
.
˛s
 = 
CLS_RESPONSE
;

268 *
p‹t
 = (*)
°
.
buff
;

269 *
p‹t
 = 
	`ht⁄s
(
	`gëP2pMaöP‹t
());

270 
Àn
 = 
	`•rötf
(
°
.
buff
+2, 
__SN
) + 3;

271 
	`öô_p2pc‹e_hódî
(&
°
.
dh
, 
ST_CALLEE
, 
OP_SEARCH
, 
CLS_RESPONSE
, 0, 
Àn
, 0);

273 
	`brﬂdˇ°OnAŒI¡îÁ˚s
((
sockaddr
*)&
ß_˛t
, &
°
, 
Àn
 + (
p2pc‹e_hódî
));

276 if(
	`°∫cmp
("CMD *",
buff
, 5) == 0)

278 if(!
tok
 || 
	`°rcmp
—ok, 
__SN
) != 0)

280 
	`dbg_p2p
(" %†NŸ me.",
tok
);

284 
Nëw‹kInfo
 
addrInfo
;

286 if–
s_pCÆlbackFuncs
 && s_pCÆlbackFuncs->
SëNëw‹kInfo
 && s_pCÆlbackFuncs->
	`SëNëw‹kInfo
(&
addrInfo
))

287 
Àn
 = 
	`•rötf
(
buff
,"RCMD * CTP/1.0\r\nÑesult 0\r\n\r\n");

288 
Àn
 = 
	`•rötf
(
buff
,"RCMD * CTP/1.0\r\nÑesult 1\r\n\r\n");

290 
ß_˛t
.
sö_addr
.
s_addr
 = 
	`öë_addr
("255.255.255.255");

291 
ß_˛t
.
sö_p‹t
 = 
	`ht⁄s
(8999);

292 
	`brﬂdˇ°OnAŒI¡îÁ˚s
((
sockaddr
*)&
ß_˛t
, 
buff
, 
Àn
);

299 
	}
}

301 
BOOL
 
	$CÆÀeIsRegi°îed
()

303  
__SN
[0] != '\0';

304 
	}
}

306 
P2PCONN
 *
	$ÆlocC⁄n
()

308 
P2PCONN
 *
pc⁄n
 = (P2PCONN*)
	`ˇŒoc
((P2PCONN), 1);

309 
pc⁄n
->
dwTag
 = 
HP2PCONN_TAG
;

310 
pc⁄n
->
°©e
 = 
PSS_ALLOCATED
;

311 
pc⁄n
->
sock
 = 
INVALID_SOCKET
;

312 
pc⁄n
->
rudp_sock
 = 
INVALID_RUDPSOCKET
;

313 
pc⁄n
->
timeout_vÆ
 = 
SESSION_TIMEOUT
;

315 
	`INIT_LIST_HEAD
(&
pc⁄n
->
li°
);

316 
	`PA_MuãxLock
(
s_muãxC⁄nLi°
);

317 
	`li°_add_èû
(&
pc⁄n
->
li°
, &
s_P2pC⁄nLi°
);

318 
	`PA_MuãxU∆ock
(
s_muãxC⁄nLi°
);

319  
pc⁄n
;

320 
	}
}

321 
cﬁÀ˘LoˇlC⁄nInfo
(
LOCALCONNINFO
 *
pLci
, 
loˇl_p‹t
);

322 
	$cﬁÀ˘LoˇlC⁄nInfo
(
LOCALCONNINFO
 *
pLci
, 
loˇl_p‹t
)

324 
uöt32
 
loˇl_ùs
[5];

325 
i
, 
n_loˇl_ù
;

326 
c⁄n_bô_fõlds
 *
pbf
;

329 
pbf
 = &
_°un_bf
;

331 
n_loˇl_ù
 = 
	`gë_loˇl_ùs
(
loˇl_ùs
, 5);

332 
i
=0; i<
n_loˇl_ù
; i++)

334 
pLci
->
addrs
[
i
].
ù
 = 
loˇl_ùs
[i];

335 
pLci
->
addrs
[
i
].
p‹t
 = 
	`ht⁄s
(
loˇl_p‹t
);

336 
pLci
->
addrs
[
i
].
Êags
 = 0;

338 if(
	`U≤pIgdCpGëN©M≠≥dAddªss
(
	`gëU≤pM≠pögP‹t
(), &
pLci
->
addrs
[
i
].
ù
, &pLci->addrs[i].
p‹t
))

340 
pLci
->
addrs
[
i
].
Êags
 = 1;

341 
n_loˇl_ù
++;

344 if(
_°un_bf
.
«t
 !
StunTy≥O≥n
)

346 
pLci
->
addrs
[
i
].
ù
 = 0;

347 
pLci
->
addrs
[
i
].
p‹t
 = 
	`ht⁄s
(
	`gëU≤pM≠pögP‹t
());

348 
pLci
->
addrs
[
i
].
Êags
 = 0;

349 
n_loˇl_ù
++;

352 #ifde‡
_DEBUG


353 
i
=0; i<
n_loˇl_ù
; i++)

354 
	`dbg_p2p
("loˇ»ù:p‹à%s:%d:%d", 
	`öë_¡ﬂ
(*((
ö_addr
*)&
pLci
->
addrs
[
i
].
ù
)),

355 
	`¡ohs
(
pLci
->
addrs
[
i
].
p‹t
),ÖLci->addrs[i].
Êags
);

358 
pLci
->
bôs
.
ª£rved
 = 0;

359 
pLci
->
bôs
.
t˝
 = 0;

360 
pLci
->
bôs
.
auth
= 0;

361 
pLci
->
bôs
.
n_addr
 = 
n_loˇl_ù
;

362 
pLci
->
bôs
.
«t
 = 
pbf
->nat;

363 
pLci
->
bôs
.
dñè
 = 
pbf
->delta;

364 
pLci
->
bôs
.
haúpö
 = 
pbf
->hairpin;

365 
pLci
->
bôs
.
¥e£rve_p‹t
 = 
pbf
->preserve_port;

366 
	}
}

369 
	$¥ï¨eF‹Punchög
(
P2PCONN
 *
pc⁄n
, c⁄° 
p2pc‹e_£ssi⁄_öô
 *
psi
, 
now
)

371 if(
pc⁄n
->
°©e
 =
PSS_PUNCHING
) ;

373 
sock
, 
sock2
, 
ß_Àn
;

374 
c⁄n_bô_fõlds
 *
pbf
;

375 
sockaddr_ö
 
ßi_tmp
;

378 
pbf
 = &
_°un_bf
;

379 
sock
 = 
sock2
 = 
INVALID_SOCKET
;

381 
pc⁄n
->
°©e
 = 
PSS_PUNCHING
;

383 if(!
pc⁄n
->
tmp
)

385 
pc⁄n
->
tmp
 = (
punch_tmp
*)
	`ˇŒoc
((punch_tmp), 1);

386 
pc⁄n
->
tmp
->
sock2
 = 
INVALID_SOCKET
;

388 
	`mem˝y
(
pc⁄n
->
£ss_id
, 
psi
->£ss_id, 
LENGTH_OF_SESSION_ID
);

389 
pc⁄n
->
bôs
 = 
psi
->bits;

390 
	`mem˝y
(
pc⁄n
->
tmp
->
addrs
, 
psi
->addrs, (
p2pc‹e_addr
)*pc⁄n->
bôs
.
n_addr
);

406 if(!
	`PA_SockëIsVÆid
(
pc⁄n
->
sock
))

408 
sock
 = 
	`NewSockëAndBöd
(
psi
->
bôs
.
t˝
?
SOCK_STREAM
:
SOCK_DGRAM
, 0, 0);

409 
	`£tblk
(
sock
, 0);

412 
sock
 = 
pc⁄n
->sock;

414 if–
pc⁄n
->
bôs
.
˘
 =
P2P_CONNTYPE_P2P
 && 
pbf
->
«t
 =
StunTy≥DïídítM≠pög
 &&Öbf->
dñè
 =0 &&Öbf->
¥e£rve_p‹t
 )

416 
sock2
 = 
	`NewSockëAndBöd
(
psi
->
bôs
.
t˝
?
SOCK_STREAM
:
SOCK_DGRAM
, 0, 0);

417 #ifde‡
VERBOSE


418 
ß_Àn
 = (
ßi_tmp
);

419 
	`PA_GëSockName
(
sock2
, (
sockaddr
*)&
ßi_tmp
, &
ß_Àn
);

420 
	`dbg_p2p
("BödÅÿ√wÜoˇ»p‹t: %d f‹ dïídíàm≠pögÇ©.", 
	`¡ohs
(
ßi_tmp
.
sö_p‹t
));

423 
ß_Àn
 = (
ßi_tmp
);

424 
	`PA_GëSockName
–
	`PA_SockëIsVÆid
(
sock2
Ë? sock2 : 
sock
, (
sockaddr
*)&
ßi_tmp
, &
ß_Àn
);

425 
pc⁄n
->
tmp
->
loˇl_p‹t
 = 
	`¡ohs
(
ßi_tmp
.
sö_p‹t
);

426 
	`dbg_p2p
("£ssi⁄Üoˇ»p‹t: %d", 
pc⁄n
->
tmp
->
loˇl_p‹t
);

427 if(
pc⁄n
->
bôs
.
t˝
 && 
	`PA_SockëIsVÆid
(
sock2
)Ë
	`PA_SockëClo£
(sock2);

429 
pc⁄n
->
sock
 = sock;

430 if(!
psi
->
bôs
.
t˝
Ë
pc⁄n
->
tmp
->
sock2
 = sock2;

431 
pc⁄n
->
tmp
->
n_åy
 = 0;

432 
pc⁄n
->
œ°_ac˚ss
 = 
now
;

434 #ifde‡
_DEBUG


436 
i
, 
Àn
; 
löe
[256];

437 
i
=
Àn
=0; i<16; i++ËÀn+=
	`•rötf
(
löe
+Àn, "%02X ", 
pc⁄n
->
£ss_id
[i]);

438 
	`dbg_p2p
("New sessi⁄ queued: %s,Ç_addr:%d,áuth:%d", 
löe
, ()
pc⁄n
->
bôs
.
n_addr
, (Ìc⁄n->bôs.
auth
);

444 if(!
pc⁄n
->
is_ˇŒî
)

446 
LOCALCONNINFO
 
lci
;

447 
	`cﬁÀ˘LoˇlC⁄nInfo
(&
lci
, 
pc⁄n
->
tmp
->
loˇl_p‹t
);

448 
lci
.
bôs
.
˘
 = 
pc⁄n
->bits.ct;

449 
lci
.
bôs
.
t˝
 = 
pc⁄n
->bits.tcp;

450 
pc⁄n
->
tmp
->
bß_Àn
 = 
	`¸óã_£ssi⁄_öô_ack
((
uöt8
*Ìc⁄n->tmp->
bß
, 
lci
.
bôs
,Üci.
addrs
,

451 
__SN
, 
psi
->
£ss_id
, 
	`P2PCORE_TID
(&psi->
dh
));

453 
	}
}

455 
	shb_d©a
 {

456 
	möãrvÆ
;

457 
	mœ°_ªp‹t
;

458 
BOOL
 
	mgŸ_ªp‹t_ª•⁄£
;

459 
	mªp‹t_ªåy_˙t
;

464 
	$hóπ_bót
(
hb_d©a
 *
_hb
, 
now
)

466 if(
_hb
->
gŸ_ªp‹t_ª•⁄£
 && (
now
 - _hb->
œ°_ªp‹t
 >_hb->
öãrvÆ
))

468 
uöt32
 
tmp
;

469 
p2pc‹e_i_am_hîe
 
düh
;

471 
	`öô_p2pc‹e_hódî
(&
düh
.
dh
, 
ST_CALLEE
, 
OP_DS_IAMHERE
, 
CLS_REQUEST
, 0, 
LENGTH_OF_SN
, 0);

472 
	`mem£t
(
düh
.
¢
, 0, 
LENGTH_OF_SN
);

473 
	`°∫˝y
((*)
düh
.
¢
, 
__SN
, 
LENGTH_OF_SN
);

474 
düh
.
°un
.
«t
 = 
_°un_bf
.nat;

475 
düh
.
°un
.
¥e£rve_p‹t
 = 
_°un_bf
.preserve_port;

476 
düh
.
°un
.
haúpö
 = 
_°un_bf
.hairpin;

477 
düh
.
°un
.
dñè
 = 
_°un_bf
.delta;

478 
düh
.
°un
.
u≤p
 = 
	`U≤pIgdCpGëN©M≠≥dAddªss
(
	`gëU≤pM≠pögP‹t
(), &
tmp
, (*)&tmp)?1:0;

479 
	`PA_SídTo
(
udp_sock_maö
, &
düh
, (düh), 0, (
sockaddr
*)&
p2p_£rvî
, (p2p_server));

481 
_hb
->
gŸ_ªp‹t_ª•⁄£
 = 0;

482 
_hb
->
œ°_ªp‹t
 = 
now
;

484 if(!
_hb
->
gŸ_ªp‹t_ª•⁄£
 && (
now
 - _hb->
œ°_ªp‹t
 > 
MAX_TIME_WAIT_FOR_ACK
))

486 
_hb
->
ªp‹t_ªåy_˙t
++;

487 if(
_hb
->
ªp‹t_ªåy_˙t
 > 4)

491 
s
 = 
	`NewSockëAndBöd
(
SOCK_DGRAM
, 0, 0);

492 
	`PA_SockëClo£
(
udp_sock_maö
);

493 
udp_sock_maö
 = 
s
;

494 
	`£tblk
(
udp_sock_maö
, 0);

496 
ß_Àn
;

497 
sockaddr_ö
 
ßi_tmp
;

498 
ß_Àn
 = (
ßi_tmp
);

499 
	`PA_GëSockName
(
udp_sock_maö
, (
sockaddr
*)&
ßi_tmp
, &
ß_Àn
);

500 
p2p_maö_p‹t
 = 
	`¡ohs
(
ßi_tmp
.
sö_p‹t
);

502 
	`_CALLCB
(
Nëw‹kSèãCh™ged
)(
NETSTATE_SERVER_DOES_NOT_RESPONSE
);

503 
_hb
->
ªp‹t_ªåy_˙t
 = 0;

507 
_hb
->
œ°_ªp‹t
 = 0; _hb->
gŸ_ªp‹t_ª•⁄£
 = 1;

509 
	}
}

512 
	$h™dÀ_maö_udp_sock
(
hb_d©a
 *
_hb
, 
now
)

515 
p2pc‹e_£ssi⁄_öô
 
b¢
;

516 
p2pc‹e_i_am_hîe_ack
 
düa
;

517 
p2pc‹e_hódî
 
dh
;

518 
buf
[256];

519 } 
uu
;

520 
Àn
, 
ß_Àn
;

521 
sockaddr_ö
 
ßi
;

525 
ß_Àn
 = (
ßi
);

526 
Àn
 = 
	`PA_RecvFrom
(
udp_sock_maö
, 
uu
.
buf
, (uu), 0, (
sockaddr
*)&
ßi
, &
ß_Àn
);

527 if(
Àn
 < 0) ;

529 if(
Àn
 < (
p2pc‹e_hódî
Ë|| !
	`check_p2pc‹e_hódî
(&
uu
.
b¢
.
dh
)) ;

531 if(
uu
.
b¢
.
dh
.
°
 =
ST_SERVER
)

533 if(
	`P2PCORE_OP
(&
uu
.
b¢
.
dh
Ë=
OP_SD_SESSION_NOTIFY
)

535 
	`dbg_bö
("√w sessi⁄Ñeque°:", 
uu
.
b¢
.
£ss_id
, 16);

536 
	`_ˇŒìC⁄nInô
(&
ßi
, &
uu
.
b¢
, 
now
);

538 if(
	`P2PCORE_OP
(&
uu
.
b¢
.
dh
Ë=
OP_DS_IAMHERE
)

540 if(
ßi
.
sö_addr
.
s_addr
 !
p2p_£rvî
.sin_addr.s_addr) ;

542 
_hb
->
öãrvÆ
 = (
uu
.
dh
.
°©us
 =
P2PS_INACTIVE
)?
INACTIVE_INTERVAL
:
NORMAL_INTERVAL
;

543 
Àn
 = 
	`P2PCORE_DATA_LEN
(&
uu
.
dh
);

544 if(
	`P2PCORE_STATUS
(&
uu
.
dh
Ë=
P2PS_ADDRESS_CHANGED
)

546 
	`dbg_p2p
("Device Change serveráddress...");

547 
uu
.
düa
.
d©a
[
Àn
] = '\0';

548 
	`öô_ßi
(&
p2p_£rvî
, 
uu
.
düa
.
d©a
, 
P2PCORE_SERVICE_PORT
);

550 
_hb
->
gŸ_ªp‹t_ª•⁄£
 = 1;

551 
_hb
->
ªp‹t_ªåy_˙t
 = 0;

552 
	`_CALLCB
(
Nëw‹kSèãCh™ged
)(
NETSTATE_OK
);

556 
	}
}

559 
	$h™dÀ_c⁄n_ö_waôög
(
P2PCONN
 *
pc⁄n
, 
now
)

561 
ß_Àn
, 
Àn
;

562 
sockaddr_ö
 
ßi_tmp
;

564 
p2pc‹e_£ssi⁄_öô
 
b¢
;

565 
p2pc‹e_punch
 
dp
;

566 
p2pc‹e_hódî
 
dh
;

567 
buf
[512];

568 } 
uu
;

570 
ß_Àn
 = (
ßi_tmp
);

571 
Àn
 = 
	`PA_RecvFrom
(
pc⁄n
->
sock
, 
uu
.
buf
, 500, 0, (
sockaddr
*)&
ßi_tmp
, &
ß_Àn
);

572 if(
Àn
 >(
p2pc‹e_hódî
Ë&& 
	`check_p2pc‹e_hódî
(&
uu
.
b¢
.
dh
))

574 if(
	`P2PCORE_OP
(&
uu
.
b¢
.
dh
Ë=
OP_CS_SESSION_INIT
 && uu.b¢.dh.
˛s
 =
CLS_RESPONSE
)

576 if(
	`P2PCORE_STATUS
(&
uu
.
b¢
.
dh
Ë=
P2PS_CONTINUE
)

578 
	`dbg_p2p
("Change stateÅo PSS_WAIT_FOR_PEER_INFO");

579 
pc⁄n
->
tmp
->
n_åy
 = 0;

580 
pc⁄n
->
°©e
 = 
PSS_WAIT_FOR_PEER_INFO
;

582 if(
uu
.
b¢
.
dh
.
°©us
 =0 || 
	`P2PCORE_STATUS
(&uu.b¢.dhË=
P2PS_CHANGE_CONN_TYPE
) {

583 if(
uu
.
b¢
.
dh
.
°©us
 || 
pc⁄n
->
bôs
.
˘
 =
P2P_CONNTYPE_RELAY
) {

584 
	`PA_SockëClo£
(
pc⁄n
->
sock
);

585 
pc⁄n
->
sock
 = 
INVALID_SOCKET
;

587 
	`¥ï¨eF‹Punchög
(
pc⁄n
, &
uu
.
b¢
, 
now
);

588 if(
pc⁄n
->
bôs
.
˘
 =
P2P_CONNTYPE_P2P
)

590 
	`udp_punch_ô
(
pc⁄n
);

591 
pc⁄n
->
°©e
 = 
PSS_PUNCHING
;

593 if(
pc⁄n
->
tmp
->
çs_°©e
 =0 &&Öc⁄n->
bôs
.
˘
 =
P2P_CONNTYPE_RELAY
)

595 
	`mem£t
(&
ßi_tmp
, 0, (sai_tmp));

596 
ßi_tmp
.
sö_Ámûy
 = 
AF_INET
;

597 
ßi_tmp
.
sö_addr
.
s_addr
 = 
uu
.
b¢
.
addrs
[0].
ù
;

598 
ßi_tmp
.
sö_p‹t
 = 
uu
.
b¢
.
addrs
[0].
p‹t
;

599 
	`c⁄√˘
(
pc⁄n
->
sock
, (
sockaddr
*)&
ßi_tmp
, (sai_tmp));

600 
pc⁄n
->
tmp
->
çs_°©e
 = 
TPS_CONNECT
;

601 
pc⁄n
->
°©e
 = 
PSS_PUNCHING
;

602 
	`dbg_p2p
("caller begin connectingÅoÑelayer");

606 
	`_CALLCB
(
C⁄nFaûed
)(
	`P2PCORE_STATUS
(&
uu
.
b¢
.
dh
), 
pc⁄n
->
pU£rD©a
);

607 
pc⁄n
->
°©e
 = 
PSS_FAILED
;

610 if(
	`P2PCORE_OP
(&
uu
.
b¢
.
dh
Ë=
OP_SC_SESSION_BEGIN
 && uu.b¢.dh.
˛s
 =
CLS_REQUEST
)

612 
	`dbg_p2p
("Reveived: OP_SC_SESSION_BEGIN");

613 
p2pc‹e_hódî
 
dh
;

614 
	`öô_p2pc‹e_hódî
(&
dh
, 
ST_CALLER
, 
OP_SC_SESSION_BEGIN
, 
CLS_RESPONSE
, 0, 0, 
	`P2PCORE_TID
(&
uu
.
b¢
.dh));

615 
	`PA_SídTo
(
pc⁄n
->
sock
, &
dh
, (dh), 0, (
sockaddr
*)&
ßi_tmp
, (sai_tmp));

616 
	`¥ï¨eF‹Punchög
(
pc⁄n
, &
uu
.
b¢
, 
now
);

617 
	`udp_punch_ô
(
pc⁄n
);

620 
	}
}

622 
	$¥o˚ss_t˝_c⁄n_d©a
(
P2PCONN
 *
pc⁄n
, 
now
)

624 
BYTE
 
buf
[2048], *
buff
;

625 
buff_size
, 
Àn
;

627 
pc⁄n
->
œ°_ac˚ss
 = 
now
;

630 if(
pc⁄n
->
rbuff
)

632 
buff
 = 
pc⁄n
->
rbuff
 +Öc⁄n->
rbuff_off
;

633 
buff_size
 = 
pc⁄n
->
rbuff_size
 -Öc⁄n->
rbuff_off
;

637 
buff
 = (
BYTE
*)
buf
;

638 
buff_size
 = (
buf
);

641 
Àn
 = 
	`PA_Recv
(
pc⁄n
->
sock
, 
buff
, 
buff_size
, 0);

642 if(
Àn
 < 0 && 
	`PA_SockëGëEº‹
(Ë=
EWOULDBLOCK
)

644 if(
	`__LIKELY
(
Àn
 > 0))

646 
	`_CALLCB
(
OnD©a
)((
HP2PCONN
)
pc⁄n
, 
buff
, 
Àn
);

650 if(
Àn
 =0Ë
	`dbg_p2p
("peer closed");

651 
	`dbg_p2p
("¥obÀm o¿ª˚ivögÖackë: %d", 
	`PA_SockëGëEº‹
());

653 
	`_P2pC⁄nClo£
(
pc⁄n
);

657 
	}
}

659 
PA_THREAD_RETTYPE
 
__STDCALL
 
	$P2pThªad
(* 
p
)

661 
sockaddr_ö
 
ßi_tmp
;

662 
ß_Àn
, 
i
;

663 
sock_§ch
 = 
INVALID_SOCKET
;

664 
RUDPSOCKET
 
ac˚±ed_ru_sock
[
MAX_ACCEPTED_RUDPSOCK
];

665 
n_ac˚±ed_ru_sock
 = 0;

667 
hb_d©a
 
_hb_d©a
 = { 
NORMAL_INTERVAL
, 0, 
TRUE
, 0 };

672 
u≤p_rudp_sock
 = 
	`RUDPSockë
();

673 
	`mem£t
(&
ßi_tmp
, 0, (sai_tmp));

674 
ßi_tmp
.
sö_Ámûy
 = 
AF_INET
;

675 
ßi_tmp
.
sö_p‹t
 = 
	`ht⁄s
(
	`gëU≤pM≠pögP‹t
());

676 
	`RUDPBöd
(
u≤p_rudp_sock
, (
sockaddr
*)&
ßi_tmp
, (sai_tmp));

677 
	`RUDPLi°í
(
u≤p_rudp_sock
, 5);

679 if(
	`CÆÀeIsRegi°îed
())

681 
sock_§ch
 = 
	`Cª©eSîvi˚Sockë
(
SOCK_DGRAM
, 0, 7999);

683 
udp_sock_maö
 = 
	`Cª©eSîvi˚Sockë
(
SOCK_DGRAM
, 0, 0);

684 
	`£tblk
(
udp_sock_maö
, 0);

685 
ß_Àn
 = (
ßi_tmp
);

686 
	`PA_GëSockName
(
udp_sock_maö
, (
sockaddr
*)&
ßi_tmp
, &
ß_Àn
);

687 
p2p_maö_p‹t
 = 
	`¡ohs
(
ßi_tmp
.
sö_p‹t
);

690 
	`dbg_p2p
(">>>>>>>>>>>> P2P started <<<<<<<<<<<<");

692 
s_bRunP2p
)

694 
li°_hód
 *
p
, *
q
;

695 
P2PCONN
 *
pc⁄n
;

696 
RUDPSOCKCHNO
 
rudp_r_£t
[64], 
rudp_w_£t
[16];

697 
n_rsock
, 
n_wsock
;

698 
now
 = 
	`PA_GëTickCou¡
();

700 if(
	`CÆÀeIsRegi°îed
(Ë&& 
p2p_£rvî
.
sö_addr
.
s_addr
)

701 
	`hóπ_bót
(&
_hb_d©a
, 
now
);

704 
n_rsock
 = 
n_wsock
 = 0;

707 if(
	`PA_SockëIsVÆid
(
sock_§ch
)Ë
	`RUDP_FD_SET
(sock_§ch, 
rudp_r_£t
, 
n_rsock
);

708 if(
	`PA_SockëIsVÆid
(
udp_sock_maö
)Ë
	`RUDP_FD_SET
(udp_sock_maö, 
rudp_r_£t
, 
n_rsock
);

709 if(
u≤p_rudp_sock
Ë
	`RUDP_SET
(u≤p_rudp_sock, -1, 
rudp_r_£t
, 
n_rsock
);

710 
	`PA_MuãxLock
(
s_muãxC⁄nLi°
);

711 
	`li°_f‹_óch
(
p
, &
s_P2pC⁄nLi°
)

713 
pc⁄n
 = 
	`li°_íåy
(
p
, 
P2PCONN
, 
li°
);

714 if(
	`__UNLIKELY
(
pc⁄n
->
°©e
 =
PSS_WAIT_FOR_PEER_INFO
 ||Öc⁄n->°©ê=
PSS_WAIT_FOR_SERVER_ACK
))

716 if(
	`PA_SockëIsVÆid
(
pc⁄n
->
sock
)Ë
	`RUDP_FD_SET
’c⁄n->sock, 
rudp_r_£t
, 
n_rsock
);

718 if(
	`__LIKELY
(
pc⁄n
->
°©e
 =
PSS_CONNECTED
 &&Öc⁄n->
mode
 =
P2PCONN_MODE_PUSH
))

719 { if(
pc⁄n
->
bôs
.
t˝
 =0 &&Öc⁄n->
rudp_sock
)

720 
	`RUDP_SET
(
pc⁄n
->
rudp_sock
, 0, 
rudp_r_£t
, 
n_rsock
);

721 if(
	`PA_SockëIsVÆid
(
pc⁄n
->
sock
))

722 
	`RUDP_FD_SET
(
pc⁄n
->
sock
, 
rudp_r_£t
, 
n_rsock
);

724 if(
	`__UNLIKELY
(
pc⁄n
->
°©e
 =
PSS_RUDP_CONNECTING
))

725 
	`RUDP_SET
(
pc⁄n
->
rudp_sock
, 0, 
rudp_w_£t
, 
n_wsock
);

726 if(
	`__LIKELY
(
pc⁄n
->
°©e
 =
PSS_PUNCHING
))

728 if(
pc⁄n
->
bôs
.
t˝
)

730 if(
pc⁄n
->
tmp
->
çs_°©e
 =
TPS_CONNECT
)

731 
	`RUDP_FD_SET
(
pc⁄n
->
sock
, 
rudp_w_£t
, 
n_wsock
);

732 if(
pc⁄n
->
tmp
->
çs_°©e
 =
TPS_CONNECTED
)

733 
	`RUDP_FD_SET
(
pc⁄n
->
sock
, 
rudp_r_£t
, 
n_rsock
);

737 if(
pc⁄n
->
tmp
->
out_sock
 !
NULL
)

739 if(
pc⁄n
->
tmp
->
oss
 =
OSS_CONNECT
Ë
	`RUDP_SET
’c⁄n->tmp->
out_sock
, 0, 
rudp_w_£t
, 
n_wsock
);

740 if(
pc⁄n
->
tmp
->
oss
 =
OSS_CONNECTED
Ë
	`RUDP_SET
’c⁄n->tmp->
out_sock
, 0, 
rudp_r_£t
, 
n_rsock
);

742 if(
	`PA_SockëIsVÆid
(
pc⁄n
->
sock
))

743 
	`RUDP_FD_SET
(
pc⁄n
->
sock
, 
rudp_r_£t
, 
n_rsock
);

744 if(
	`PA_SockëIsVÆid
(
pc⁄n
->
tmp
->
sock2
))

745 
	`RUDP_FD_SET
(
pc⁄n
->
tmp
->
sock2
, 
rudp_r_£t
, 
n_rsock
);

749 
	`PA_MuãxU∆ock
(
s_muãxC⁄nLi°
);

751 
i
=0; i<
n_ac˚±ed_ru_sock
; i++)

752 if(
ac˚±ed_ru_sock
[
i
] !
INVALID_RUDPSOCKET
Ë
	`RUDP_SET
◊c˚±ed_ru_sock[i], 0, 
rudp_r_£t
, 
n_rsock
);

755 
timevÆ
 
tv
 = { 0, 100000 };

756 if(
	`RUDPSñe˘
(
rudp_r_£t
, &
n_rsock
, 
rudp_w_£t
, &
n_wsock
, 
NULL
, NULL, &
tv
) > 0)

759 
p2pc‹e_£ssi⁄_öô
 
b¢
;

760 
p2pc‹e_punch
 
dp
;

761 
p2pc‹e_hódî
 
dh
;

762 
buf
[2048];

763 } 
uu
;

764 
Àn
;

766 if(
	`RUDP_FD_ISSET
(
sock_§ch
, 
rudp_r_£t
, 
n_rsock
))

767 
	`h™dÀSórch
(
sock_§ch
);

768 if(
	`PA_SockëIsVÆid
(
udp_sock_maö
Ë&& 
	`RUDP_FD_ISSET
(udp_sock_maö, 
rudp_r_£t
, 
n_rsock
))

769 
	`h™dÀ_maö_udp_sock
(&
_hb_d©a
, 
now
);

772 if(
	`RUDP_ISSET
(
u≤p_rudp_sock
, 
rudp_r_£t
, 
n_rsock
))

774 
RUDPSOCKET
 
rskt
 = 
NULL
;

775 
ß_Àn
 = (
ßi_tmp
);

776 if(
	`RUDPAc˚±
(
u≤p_rudp_sock
, &
rskt
, (
sockaddr
*)&
ßi_tmp
, &
ß_Àn
) == 0)

778 
	`dbg_p2p
("öcomög c⁄√˘i⁄ác˚±ed. %s:%d", 
	`öë_¡ﬂ
(
ßi_tmp
.
sö_addr
), 
	`¡ohs
(ßi_tmp.
sö_p‹t
));

779 if(
n_ac˚±ed_ru_sock
 >
MAX_ACCEPTED_RUDPSOCK
)

781 
	`RUDPClo£
(
ac˚±ed_ru_sock
[0]);

782 
i
=1; i<
n_ac˚±ed_ru_sock
; i++Ë
ac˚±ed_ru_sock
[i-1] =áccepted_ru_sock[i];

783 
n_ac˚±ed_ru_sock
--;

785 
ac˚±ed_ru_sock
[
n_ac˚±ed_ru_sock
++] = 
rskt
;

789 
i
=0; i<
n_ac˚±ed_ru_sock
; i++)

791 if(
ac˚±ed_ru_sock
[
i
] !
INVALID_RUDPSOCKET
 && 
	`RUDP_ISSET
◊c˚±ed_ru_sock[i], 
rudp_r_£t
, 
n_rsock
))

793 
chno
, 
îr
, 
has_£ss
 = 0;

794 if–(
îr
 = 
	`RUDPRecv
(
ac˚±ed_ru_sock
[
i
], &
chno
, &
uu
, (uu), 0)Ë> 0 && 
	`check_p2pc‹e_hódî
(&uu.
dh
) &&

795 
uu
.
dh
.
°
 =
ST_CALLER
 && 
	`P2PCORE_OP
(&uu.dhË=
OP_PUNCH
)

797 
	`PA_MuãxLock
(
s_muãxC⁄nLi°
);

798 
	`li°_f‹_óch
(
p
, &
s_P2pC⁄nLi°
)

800 
pc⁄n
 = 
	`li°_íåy
(
p
, 
P2PCONN
, 
li°
);

801 if(
pc⁄n
->
°©e
 =
PSS_PUNCHING
 &&

802 
	`memcmp
(
pc⁄n
->
£ss_id
, 
uu
.
dp
.£ss_id, 
LENGTH_OF_SESSION_ID
) == 0)

804 
has_£ss
 = 1;

805 if(
	`h™dÀ_punch
(
pc⁄n
, &
uu
.
dp
, 
NULL
, 
ac˚±ed_ru_sock
[
i
]) == 0)

806 
has_£ss
 = 1;

810 
	`PA_MuãxU∆ock
(
s_muãxC⁄nLi°
);

812 if(!
has_£ss
Ë
	`RUDPClo£
(
ac˚±ed_ru_sock
[
i
]);

813 
ac˚±ed_ru_sock
[
i
] = 
INVALID_RUDPSOCKET
;

816 
n_ac˚±ed_ru_sock
 && 
ac˚±ed_ru_sock
[n_ac˚±ed_ru_sock-1] =
INVALID_RUDPSOCKET
)

817 
n_ac˚±ed_ru_sock
--;

823 
	`PA_MuãxLock
(
s_muãxC⁄nLi°
);

824 
	`li°_f‹_óch_ß„
(
p
, 
q
, &
s_P2pC⁄nLi°
)

826 
pc⁄n
 = 
	`li°_íåy
(
p
, 
P2PCONN
, 
li°
);

827 if(
	`__UNLIKELY
(
pc⁄n
->
°©e
 =
PSS_WAIT_FOR_PEER_INFO
 ||Öc⁄n->°©ê=
PSS_WAIT_FOR_SERVER_ACK
))

829 if(
	`PA_SockëIsVÆid
(
pc⁄n
->
sock
Ë&& 
	`RUDP_FD_ISSET
’c⁄n->sock, 
rudp_r_£t
, 
n_rsock
))

831 
	`h™dÀ_c⁄n_ö_waôög
(
pc⁄n
, 
now
);

834 if(
pc⁄n
->
bôs
.
t˝
)

836 if(
	`__UNLIKELY
(
pc⁄n
->
°©e
 =
PSS_PUNCHING
 &&

837 
	`PA_SockëIsVÆid
(
pc⁄n
->
sock
) ))

839 uni⁄ { 
p2pc‹e_punch
 
dp
; 
buff
[256]; } 
u
;

841 if(
pc⁄n
->
tmp
->
çs_°©e
 =
TPS_CONNECT
)

843 if(
	`RUDP_FD_ISSET
(
pc⁄n
->
sock
, 
rudp_w_£t
, 
n_wsock
))

845 
	`öô_punch_∑ckage
(&
u
.
dp
, 
pc⁄n
);

846 if(
	`PA_Síd
(
pc⁄n
->
sock
, &
u
, 
	`P2PCORE_PACKET_LEN
(&u.
dp
.
dh
), 0) < 0)

847 
	`≥º‹
("sendÖunch");

848 
pc⁄n
->
tmp
->
çs_°©e
 = 
TPS_CONNECTED
;

849 
	`dbg_p2p
("tps_state: CONNECTED");

852 if(
pc⁄n
->
tmp
->
çs_°©e
 =
TPS_CONNECTED
)

854 if(
	`RUDP_FD_ISSET
(
pc⁄n
->
sock
, 
rudp_r_£t
, 
n_rsock
))

856 if(
pc⁄n
->
bôs
.
˘
 =
P2P_CONNTYPE_RELAY
)

858 
Àn
;

859 if–(
Àn
 = 
	`PA_Recv
(
pc⁄n
->
sock
, &
u
, (u), 0)Ë>(
p2pc‹e_punch
) &&

860 
	`check_p2pc‹e_hódî
(&
u
.
dp
.
dh
Ë&& 
	`P2PCORE_OP
(&u.dp.dhË=
OP_PUNCH


863 
	`dbg_p2p
("punchÑecevied");

864 
	`h™dÀ_punch
(
pc⁄n
, &
u
.
dp
, &
ßi_tmp
, 
NULL
);

868 if(
Àn
 < 0Ë
	`dbg_p2p
("punchÑecvÉº‹: %d", 
	`PA_SockëGëEº‹
());

869 
	`dbg_p2p
("punchÑecv byãs: %d", 
Àn
);

870 if(
pc⁄n
->
is_ˇŒî
Ë
	`_CALLCB
(
C⁄nFaûed
)(
P2PE_FAILED
,Öc⁄n->
pU£rD©a
);

871 
pc⁄n
->
°©e
 = 
PSS_FAILED
;

877 if(
pc⁄n
->
°©e
 =
PSS_CONNECTED
 && 
	`RUDP_FD_ISSET
’c⁄n->
sock
, 
rudp_r_£t
, 
n_rsock
))

879 
	`¥o˚ss_t˝_c⁄n_d©a
(
pc⁄n
, 
now
);

884 if(
	`__UNLIKELY
(
pc⁄n
->
°©e
 =
PSS_RUDP_CONNECTING
))

887 if(
	`RUDP_ISSET
(
pc⁄n
->
rudp_sock
, 
rudp_w_£t
, 
n_wsock
))

889 
pc⁄n
->
°©e
 = 
PSS_CONNECTED
;

890 
	`dbg_p2p
("rudp connect ok");

891 
	`_CALLCB
(
C⁄nCª©ed
)((
HP2PCONN
)
pc⁄n
);

894 if(
	`__UNLIKELY
(
pc⁄n
->
°©e
 =
PSS_PUNCHING
))

896 
PA_SOCKET
 
s
[2];

897 
i
, 
˙t
 = 0;

898 if(
	`PA_SockëIsVÆid
(
pc⁄n
->
sock
Ë&& 
	`RUDP_FD_ISSET
’c⁄n->sock, 
rudp_r_£t
, 
n_rsock
))

899 
s
[
˙t
++] = 
pc⁄n
->
sock
;

900 if(
	`PA_SockëIsVÆid
(
pc⁄n
->
tmp
->
sock2
Ë&& 
	`RUDP_FD_ISSET
’c⁄n->tmp->sock2, 
rudp_r_£t
, 
n_rsock
))

901 
s
[
˙t
++] = 
pc⁄n
->
tmp
->
sock2
;

902 
i
=0; i<
˙t
; i++)

906 
ß_Àn
 = (
ßi_tmp
);

907 
Àn
 = 
	`PA_RecvFrom
(
pc⁄n
->
sock
, 
uu
.
buf
, 500, 0, (
sockaddr
*)&
ßi_tmp
, &
ß_Àn
);

908 if(
Àn
 < 0) ;

909 if(
Àn
 >(
p2pc‹e_hódî
Ë&& 
	`check_p2pc‹e_hódî
(&
uu
.
b¢
.
dh
))

911 if(
	`P2PCORE_OP
(&
uu
.
b¢
.
dh
Ë=
OP_PUNCH
)

913 if(
	`P2PCORE_STATUS
(&
uu
.
b¢
.
dh
))

915 if(
pc⁄n
->
is_ˇŒî
Ë
	`_CALLCB
(
C⁄nFaûed
)(
	`P2PCORE_STATUS
(&
uu
.
b¢
.
dh
),Öc⁄n->
pU£rD©a
);

916 
pc⁄n
->
°©e
 = 
PSS_FAILED
;

917 
	`dbg_p2p
("Punchög faûed: %d", 
	`P2PCORE_STATUS
(&
uu
.
b¢
.
dh
));

920 
	`h™dÀ_punch
(
pc⁄n
, (c⁄° 
p2pc‹e_punch
*)&
uu
.
dh
, &
ßi_tmp
, 
NULL
);

922 if(
	`P2PCORE_OP
(&
uu
.
b¢
.
dh
Ë=
OP_SC_SESSION_BEGIN
 && uu.b¢.dh.
˛s
 =
CLS_REQUEST
)

924 
p2pc‹e_hódî
 
dh
;

925 
	`öô_p2pc‹e_hódî
(&
dh
, 
ST_CALLER
, 
OP_SC_SESSION_BEGIN
, 
CLS_RESPONSE
, 0, 0, 
	`P2PCORE_TID
(&
uu
.
b¢
.dh));

926 
	`PA_SídTo
(
pc⁄n
->
sock
, &
dh
, (dh), 0, (
sockaddr
*)&
ßi_tmp
, (sai_tmp));

932 if(
pc⁄n
->
°©e
 =
PSS_PUNCHING
 &&Öc⁄n->
tmp
->
out_sock
)

934 if(
pc⁄n
->
tmp
->
oss
 =
OSS_CONNECT
 && 
	`RUDP_ISSET
’c⁄n->tmp->
out_sock
, 
rudp_w_£t
, 
n_wsock
))

936 uni⁄ { 
p2pc‹e_punch
 
dp
; 
buf
[256]; } 
u
;

937 
	`öô_punch_∑ckage
(&
u
.
dp
, 
pc⁄n
);

938 
	`RUDPSíd
(
pc⁄n
->
tmp
->
out_sock
, 0, &
u
.
dp
, 
	`P2PCORE_PACKET_LEN
(&u.dp.
dh
), 0);

939 
pc⁄n
->
tmp
->
oss
 = 
OSS_CONNECTED
;

941 if(
pc⁄n
->
tmp
->
oss
 =
OSS_CONNECTED
 && 
	`RUDP_ISSET
’c⁄n->tmp->
out_sock
, 
rudp_r_£t
, 
n_rsock
))

943 
chno
;

944 
Àn
 = 
	`RUDPRecv
(
pc⁄n
->
tmp
->
out_sock
, &
chno
, 
uu
.
buf
, 500, 0);

945 if(
Àn
 >(
p2pc‹e_hódî
Ë&& 
	`check_p2pc‹e_hódî
(&
uu
.
b¢
.
dh
) &&

946 
	`P2PCORE_OP
(&
uu
.
b¢
.
dh
Ë=
OP_PUNCH
)

948 if(
	`P2PCORE_STATUS
(&
uu
.
b¢
.
dh
))

950 if(
pc⁄n
->
is_ˇŒî
Ë
	`_CALLCB
(
C⁄nFaûed
)(
	`P2PCORE_STATUS
(&
uu
.
b¢
.
dh
),Öc⁄n->
pU£rD©a
);

951 
pc⁄n
->
°©e
 = 
PSS_FAILED
;

952 
	`dbg_p2p
("Punchög faûed: %d", 
	`P2PCORE_STATUS
(&
uu
.
b¢
.
dh
));

954 
	`h™dÀ_punch
(
pc⁄n
, (c⁄° 
p2pc‹e_punch
*)&
uu
.
dh
, 
NULL
, NULL);

959 if(
pc⁄n
->
°©e
 =
PSS_CONNECTED
 &&Öc⁄n->
rudp_sock
 !
INVALID_RUDPSOCKET
 &&

960 
	`RUDP_ISSET
(
pc⁄n
->
rudp_sock
, 
rudp_r_£t
, 
n_rsock
))

962 
chno
;

964 
pc⁄n
->
œ°_ac˚ss
 = 
now
;

967 
BYTE
 *
buff
;

968 
buff_size
;

969 if(
pc⁄n
->
rbuff
)

971 
buff
 = 
pc⁄n
->
rbuff
 +Öc⁄n->
rbuff_off
;

972 
buff_size
 = 
pc⁄n
->
rbuff_size
 -Öc⁄n->
rbuff_off
;

976 
buff
 = (
BYTE
*)
uu
.
buf
;

977 
buff_size
 = (
uu
.
buf
);

980 
Àn
 = 
	`RUDPRecv
(
pc⁄n
->
rudp_sock
, &
chno
, 
buff
, 
buff_size
, 0);

981 if(
Àn
 =-
ERUDP_AGAIN
) ;

982 if(
Àn
 <= 0)

984 
	`dbg_p2p
(
Àn
?"Error inÑeceivingÑudpÖacket: %d":"Peer closed session",Üen);

985 
	`_P2pC⁄nClo£
(
pc⁄n
);

990 
	`_CALLCB
(
OnD©a
)((
HP2PCONN
)
pc⁄n
, 
buff
, 
Àn
);

996 if(
pc⁄n
->
tmp
 && 
	`PA_SockëIsVÆid
’c⁄n->tmp->
sock2
Ë&& 
	`RUDP_FD_ISSET
’c⁄n->tmp->sock2, 
rudp_r_£t
, 
n_rsock
))

998 
ß_Àn
 = (
ßi_tmp
);

999 
Àn
 = 
	`PA_RecvFrom
(
pc⁄n
->
tmp
->
sock2
, 
uu
.
buf
, 500, 0, (
sockaddr
*)&
ßi_tmp
, &
ß_Àn
);

1000 if(
Àn
 > (
p2pc‹e_hódî
Ë&& 
	`check_p2pc‹e_hódî
(&
uu
.
b¢
.
dh
Ë&& 
	`P2PCORE_OP
(&uu.dhË=
OP_PUNCH
)

1001 
	`h™dÀ_punch
(
pc⁄n
, (c⁄° 
p2pc‹e_punch
*)&
uu
.
dh
, &
ßi_tmp
, 
NULL
);

1005 
	`PA_MuãxU∆ock
(
s_muãxC⁄nLi°
);

1008 
	`PunchNewAndKûlTimeouãdC⁄n
(
now
);

1011 
	`PA_SockëClo£
(
udp_sock_maö
);

1012 
	`RUDPClo£
(
u≤p_rudp_sock
);

1015  
NULL
;

1016 
	}
}

1020 
	$udp_punch_ô
(
P2PCONN
* 
pc⁄n
)

1022 
i
;

1023 
sockaddr_ö
 
ßi
;

1024 uni⁄ { 
p2pc‹e_punch
 
dp
; 
buff
[256]; } 
u
;

1026 
	`öô_punch_∑ckage
(&
u
.
dp
, 
pc⁄n
);

1028 
	`mem£t
(&
ßi
, 0, (sai));

1029 
ßi
.
sö_Ámûy
 = 
AF_INET
;

1030 
	`dbg_p2p
("udp_punch_ô:Çum o‡addªs£†%d: ", (
pc⁄n
->
bôs
.
n_addr
));

1031 
i
 = 
pc⁄n
->
bôs
.
n_addr
 - 1; i >= 0; i--)

1033 
ßi
.
sö_addr
.
s_addr
 = 
pc⁄n
->
tmp
->
addrs
[
i
].
ù
;

1034 
ßi
.
sö_p‹t
 = 
pc⁄n
->
tmp
->
addrs
[
i
].
p‹t
;

1035 if(
pc⁄n
->
tmp
->
addrs
[
i
].
Êags
 & 1)

1037 if(
pc⁄n
->
tmp
->
out_sock
 =
NULL
)

1039 
pc⁄n
->
tmp
->
out_sock
 = 
	`RUDPSockë
();

1040 
›t
 = 1; 
	`RUDPSëSockO±
(
pc⁄n
->
tmp
->
out_sock
, 
OPT_NBLK
, &opt, ());

1041 
	`RUDPC⁄√˘
(
pc⁄n
->
tmp
->
out_sock
, (
sockaddr
*)&
ßi
, (sai));

1042 
pc⁄n
->
tmp
->
oss
 = 
OSS_CONNECT
;

1046 
	`PA_SídTo
(
	`PA_SockëIsVÆid
(
pc⁄n
->
tmp
->
sock2
)?pc⁄n->tmp->sock2:pc⁄n->
sock
, &
u
,

1047 
	`P2PCORE_PACKET_LEN
(&
u
.
dp
.
dh
), 0, (
sockaddr
*)&
ßi
, (sai));

1048 
	`dbg_p2p
("%s:%d:%d, ", 
	`öë_¡ﬂ
(
ßi
.
sö_addr
), ()
	`¡ohs
(ßi.
sö_p‹t
), 
pc⁄n
->
tmp
->
addrs
[
i
].
Êags
);

1051 
pc⁄n
->
tmp
->
n_åy
 ++;

1052 
	}
}

1055 
	$PunchNewAndKûlTimeouãdC⁄n
(
now
)

1057 
li°_hód
 *
p
, *
q
;

1059 
	`PA_MuãxLock
(
s_muãxC⁄nLi°
);

1060 
	`li°_f‹_óch_ß„
(
p
, 
q
, &
s_P2pC⁄nLi°
)

1062 
P2PCONN
* 
pc⁄n
 = 
	`li°_íåy
(
p
, P2PCONN, 
li°
);

1063 if(
pc⁄n
->
°©e
 =
PSS_CONNECTED
)

1065 if(
now
 > 
pc⁄n
->
œ°_ac˚ss
 &&Çow -Öc⁄n->œ°_ac˚s†>Öc⁄n->
timeout_vÆ
)

1067 
	`dbg_p2p
("£ssi⁄Åimeouãd.Çow=%u,Üa°_ac˚ss=%u", 
now
, 
pc⁄n
->
œ°_ac˚ss
);

1068 
	`_P2pC⁄nClo£
(
pc⁄n
);

1071 if(
pc⁄n
->
°©e
 =
PSS_PUNCHING
 ||Öc⁄n->°©ê=
PSS_RUDP_CONNECTING
)

1073 c⁄° 
_waô_ms
[] = { 100, 400, 600, 800, 1000, 1500 };

1074 if(
pc⁄n
->
°©e
 =
PSS_PUNCHING
 &&Öc⁄n->
tmp
->
n_åy
 < (
_waô_ms
)/())

1076 if(
now
 - 
pc⁄n
->
œ°_ac˚ss
 >
_waô_ms
[pc⁄n->
tmp
->
n_åy
])

1078 
	`dbg_p2p
("t˝:%d", ()
pc⁄n
->
bôs
.
t˝
);

1079 if(
pc⁄n
->
bôs
.
t˝
Ëpc⁄n->
tmp
->
n_åy
++;

1081 
	`dbg_p2p
("udp_punch_ô(%dth),Üa°_ac˚ss:%d,Çow:%d", 
pc⁄n
->
tmp
->
n_åy
,Öc⁄n->
œ°_ac˚ss
, 
now
);

1082 
	`udp_punch_ô
(
pc⁄n
);

1084 
pc⁄n
->
œ°_ac˚ss
 = 
now
;

1087 if(
pc⁄n
->
°©e
 =
PSS_PUNCHING
 || (
now
 -Öc⁄n->
œ°_ac˚ss
) > 4000)

1090 if(
pc⁄n
->
is_ˇŒî
)

1092 if(!
pc⁄n
->
bôs
.
t˝
 &&Öc⁄n->bôs.
˘
 =
P2P_CONNTYPE_P2P
)

1095 
pc⁄n
->
tmp
->
n_åy
 = 0;

1096 
pc⁄n
->
tmp
->
£ss_ªq
.
bôs
.
˘
 = 
P2P_CONNTYPE_RELAY
;

1097 
pc⁄n
->
tmp
->
£ss_ªq
.
bôs
.
t˝
 = 1;

1098 
pc⁄n
->
tmp
->
£ss_ªq
.
bôs
.
n_addr
 = 0;

1099 
	`P2PCORE_SET_DATA_LEN
(&
pc⁄n
->
tmp
->
£ss_ªq
.
dh
,

1100 (
p2pc‹e_£ssi⁄_öô
Ë- (
p2pc‹e_hódî
));

1101 
	`PA_SpöLock
(
•ö_å™s_id
);

1102 
	`P2PCORE_SET_TID
(&
pc⁄n
->
tmp
->
£ss_ªq
.
dh
, 
s_TønsId
);

1103 
s_TønsId
++;

1104 
	`PA_SpöU∆ock
(
•ö_å™s_id
);

1105 
	`li°_add_èû
(
p
, &
s_P2pC⁄nLi°
);

1110 
	`_CALLCB
(
C⁄nFaûed
)(
P2PE_TIMEOUTED
, 
pc⁄n
->
pU£rD©a
);

1111 
pc⁄n
->
°©e
 = 
PSS_FAILED
;

1115 
pc⁄n
->
°©e
 = 
PSS_FAILED
;

1118 if(
pc⁄n
->
°©e
 =
PSS_WAIT_FOR_SERVER_ACK
)

1120 c⁄° 
_udpWaôMs
[] = { 100, 500, 800, 1200, 1500 };

1121 if(
pc⁄n
->
tmp
->
n_åy
 < (
_udpWaôMs
)/())

1123 if(
now
 - 
pc⁄n
->
œ°_ac˚ss
 >
_udpWaôMs
[pc⁄n->
tmp
->
n_åy
])

1125 
	`PA_SídTo
(
pc⁄n
->
sock
, &pc⁄n->
tmp
->
£ss_ªq
,Öc⁄n->tmp->
bß_Àn
, 0,

1126 (c⁄° 
sockaddr
*)&
pc⁄n
->
tmp
->
p2p_£rv
, (pconn->tmp->p2p_serv));

1127 
pc⁄n
->
tmp
->
n_åy
++;

1128 
pc⁄n
->
œ°_ac˚ss
 = 
now
;

1133 
	`_CALLCB
(
C⁄nFaûed
)(
P2PE_SERVER_NO_RESPONSE
, 
pc⁄n
->
pU£rD©a
);

1134 
pc⁄n
->
°©e
 = 
PSS_FAILED
;

1137 if(
pc⁄n
->
°©e
 =
PSS_WAIT_FOR_PEER_INFO
)

1139 c⁄° 
_£ssReqWaôMs
[] = { 100, 
SESSION_REQUEST_TIMEOUT
 };

1140 if(
pc⁄n
->
tmp
->
n_åy
 < (
_£ssReqWaôMs
)/())

1142 if(
now
 - 
pc⁄n
->
œ°_ac˚ss
 >
_£ssReqWaôMs
[pc⁄n->
tmp
->
n_åy
])

1144 
pc⁄n
->
tmp
->
n_åy
++;

1145 
pc⁄n
->
œ°_ac˚ss
 = 
now
;

1150 
	`_CALLCB
(
C⁄nFaûed
)(
P2PE_NO_RESPONSE
, 
pc⁄n
->
pU£rD©a
);

1151 
pc⁄n
->
°©e
 = 
PSS_FAILED
;

1154 if(
pc⁄n
->
°©e
 =
PSS_CLOSED
)

1156 
	`li°_dñ
(
p
);

1157 
	`‰ì
(
pc⁄n
);

1159 if(
pc⁄n
->
°©e
 =
PSS_FAILED
)

1161 
	`li°_dñ
(
p
);

1162 if(
	`PA_SockëIsVÆid
(
pc⁄n
->
sock
)Ë
	`PA_SockëClo£
(pconn->sock);

1163 if(
pc⁄n
->
tmp
)

1165 if(
	`PA_SockëIsVÆid
(
pc⁄n
->
tmp
->
sock2
))

1166 
	`PA_SockëClo£
(
pc⁄n
->
tmp
->
sock2
);

1167 if(
pc⁄n
->
tmp
->
out_sock
)

1168 
	`RUDPClo£
(
pc⁄n
->
tmp
->
out_sock
);

1169 if(
pc⁄n
->
tmp
->
auth_°r
Ë
	`‰ì
(pconn->tmp->auth_str);

1170 
	`‰ì
(
pc⁄n
->
tmp
);

1172 
	`‰ì
(
pc⁄n
);

1175 
	`PA_MuãxU∆ock
(
s_muãxC⁄nLi°
);

1176 
	}
}

1178 
	$_ˇŒìC⁄nInô
(c⁄° 
sockaddr_ö
* 
pSvrAddr
, c⁄° 
p2pc‹e_£ssi⁄_öô
* 
psi
, 
now
)

1180 
P2PCONN
 *
pc⁄n
;

1181 
li°_hód
 *
p
;

1182 
sock
;

1183 
sockaddr_ö
 
ßi_tmp
;

1188 
	`li°_f‹_óch
(
p
, &
s_P2pC⁄nLi°
)

1190 
pc⁄n
 = 
	`li°_íåy
(
p
, 
P2PCONN
, 
li°
);

1191 if(
	`memcmp
(
pc⁄n
->
£ss_id
, 
psi
->£ss_id, 
LENGTH_OF_SESSION_ID
) == 0)

1193 
sock
 = 
pc⁄n
->sock;

1194 
ack
;

1199 
pc⁄n
 = 
	`ÆlocC⁄n
();

1200 if(
psi
->
dh
.
°©us
 =
P2PS_CHANGE_MAIN_PORT
)

1202 
pc⁄n
->
sock
 = 
udp_sock_maö
;

1208 
ß_Àn
 = (
ßi_tmp
);

1209 
udp_sock_maö
 = 
	`Cª©eSîvi˚Sockë
(
SOCK_DGRAM
, 0, 0);

1210 
	`£tblk
(
udp_sock_maö
, 0);

1211 
ß_Àn
 = (
ßi_tmp
);

1212 
	`PA_GëSockName
(
udp_sock_maö
, (
sockaddr
*)&
ßi_tmp
, &
ß_Àn
);

1213 
p2p_maö_p‹t
 = 
	`¡ohs
(
ßi_tmp
.
sö_p‹t
);

1215 
	`¥ï¨eF‹Punchög
(
pc⁄n
, 
psi
, 
now
);

1218 
ack
:

1219 if(
	`__UNLIKELY
(
pc⁄n
->
bôs
.
t˝
))

1221 if(
	`__UNLIKELY
(
psi
->
bôs
.
˘
 !
P2P_CONNTYPE_P2P
))

1222 
	`PA_SídTo
(
udp_sock_maö
, 
pc⁄n
->
tmp
->
bß
,Öc⁄n->tmp->
bß_Àn
, 0, (
sockaddr
*)
pSvrAddr
, (sockaddr));

1223 if(
pc⁄n
->
tmp
->
çs_°©e
 == 0)

1226 
	`mem£t
(&
ßi_tmp
, 0, (sai_tmp));

1227 if(
psi
->
bôs
.
˘
 =
P2P_CONNTYPE_RELAY
)

1229 
ßi_tmp
.
sö_Ámûy
 = 
AF_INET
;

1230 
ßi_tmp
.
sö_addr
.
s_addr
 = 
pc⁄n
->
tmp
->
addrs
[0].
ù
;

1231 
ßi_tmp
.
sö_p‹t
 = 
pc⁄n
->
tmp
->
addrs
[0].
p‹t
;

1232 
	`dbg_p2p
("ªœy by %s:%d......", 
	`öë_¡ﬂ
(
ßi_tmp
.
sö_addr
), 
	`¡ohs
(ßi_tmp.
sö_p‹t
));

1237 
	`mem˝y
(&
ßi_tmp
, 
pSvrAddr
, (sai_tmp));

1238 
ßi_tmp
.
sö_p‹t
 = 
	`ht⁄s
(
	`¡ohs
(sai_tmp.sin_port)+1);

1240 
	`c⁄√˘
(
pc⁄n
->
sock
, (
sockaddr
*)&
ßi_tmp
, (sai_tmp));

1241 
pc⁄n
->
tmp
->
çs_°©e
 = 
TPS_CONNECT
;

1246 
	`PA_SídTo
(
psi
->
dh
.
°©us
==
P2PS_CHANGE_MAIN_PORT
?
udp_sock_maö
:
pc⁄n
->
sock
,

1247 
pc⁄n
->
tmp
->
bß
,Öc⁄n->tmp->
bß_Àn
, 0, (
sockaddr
*)
pSvrAddr
, (sockaddr));

1248 
	`udp_punch_ô
(
pc⁄n
);

1252 
	}
}

1254 
	$ˇŒì_t˝_punch_cb
(
sock
, 
°©us
, * 
d©a
)

1256 
P2PCONN
* 
pc⁄n
 = (P2PCONN*)
d©a
;

1257 
p2pc‹e_punch
 
dp
;

1259 
°©us
)

1261 
SOCK_STATUS_ACCEPTED
:

1262 
SOCK_STATUS_CONNECTED
:

1263  
CHECKCONNECTION_CONTINUE
;

1265 
SOCK_STATUS_READABLE
:

1266 
	`dbg_p2p
("%dÑecved clõ¡Å˝Öunch", 
sock
);

1267 if(
	`PA_Recv
(
sock
, &
dp
, (dp), 0Ë>(
p2pc‹e_hódî
) &&

1268 
	`check_p2pc‹e_hódî
(&
dp
.
dh
) &&

1269 
	`memcmp
(
dp
.
£ss_id
, 
pc⁄n
->£ss_id, 
LENGTH_OF_SESSION_ID
) == 0)

1271 if(
dp
.
dh
.
°
 !
ST_CALLEE
Ë 
CHECKCONNECTION_CONTINUE
;

1272 if(
dp
.
dh
.
°©us
 == 0)

1274 
	`dbg_p2p
("clientÅcpÖunch checked");

1275 
pc⁄n
->
sock
 = sock;

1276 if(
	`h™dÀ_punch
(
pc⁄n
, &
dp
, 
NULL
, NULL) == 0)

1277  
CHECKCONNECTION_OK
;

1282  -
dp
.
dh
.
°©us
;

1285  
CHECKCONNECTION_FAKE
;

1290 
	}
}

1292 
	$ˇŒî_t˝_punch_cb
(
sock
, 
°©us
, * 
d©a
)

1294 
Àn
;

1295 uni⁄ { 
p2pc‹e_hódî
 
dh
; 
p2pc‹e_punch
 
dp
; 
buff
[256]; } 
u
;

1296 
P2PCONN
 *
pc⁄n
 = (P2PCONN*)
d©a
;

1298 
°©us
)

1300 
SOCK_STATUS_ACCEPTED
:

1302 
SOCK_STATUS_CONNECTED
:

1303 
	`öô_punch_∑ckage
(&
u
.
dp
, 
pc⁄n
);

1304 if(
	`£nd
(
sock
, (*)
d©a
, 
	`P2PCORE_PACKET_LEN
((
p2pc‹e_hódî
*)data), 0) < 0)

1306 
îr
 = 
	`PA_SockëGëEº‹
();

1307 if(
îr
 =
ECONNABORTED
)

1312  
CHECKCONNECTION_CONTINUE
;

1314 
SOCK_STATUS_READABLE
:

1315 
Àn
 = 
	`ªcv
(
sock
, (*)&
u
, (u), 0);

1316 if(
Àn
 <= 0)

1318 
îr
 = 
	`PA_SockëGëEº‹
();

1319 if(
îr
 =
ECONNRESET
)

1320  
CHECKCONNECTION_RESETED
;

1322 if(
Àn
 >(
p2pc‹e_hódî
Ë&& 
	`check_p2pc‹e_hódî
(&
u
.
dh
Ë&& 
	`P2PCORE_OP
(&u.dhË=
OP_PUNCH
 &&

1323 
u
.
dh
.
˛s
 =
CLS_RESPONSE
 && u.dh.
°
 =
ST_CALLEE
)

1324  (
u
.
dh
.
°©us
 =0)?
CHECKCONNECTION_OK
:-u.dh.status;

1328 
	}
}

1331 
PA_THREAD_RETTYPE
 
__STDCALL
 
	$t˝_punch_thªad
(* 
d©a
)

1333 
P2PCONN
 *
pc⁄n
 = (P2PCONN*)
d©a
;

1334 
sock
;

1335 if(
	`p2pc‹e_t˝_punch
(
pc⁄n
->
tmp
->
loˇl_p‹t
, -1 ,Öc⁄n->
bôs
,Öc⁄n->tmp->
addrs
, &
sock
,

1336 
pc⁄n
->
is_ˇŒî
?
ˇŒî_t˝_punch_cb
:
ˇŒì_t˝_punch_cb
,Öconn) == 0)

1338 
	`dbg_p2p
("tcp_punch_thread -> connected.\n");

1339 if(
pc⁄n
->
tmp
->
auth_°r
Ë
	`‰ì
(pconn->tmp->auth_str);

1340 
	`‰ì
(
pc⁄n
->
tmp
);

1341 
pc⁄n
->
tmp
 = 
NULL
;

1342 
pc⁄n
->
°©e
 = 
PSS_CONNECTED
;

1343 
	`_CALLCB
(
C⁄nCª©ed
)((
HP2PCONN
)
pc⁄n
);

1344 
pc⁄n
->
sock
 = sock;

1356 
pc⁄n
->
œ°_ac˚ss
 = 
	`PA_GëTickCou¡
();

1357 
pc⁄n
->
°©e
 = 
PSS_FAILED
;

1359  (
PA_THREAD_RETTYPE
)0;

1360 
	}
}

1363 
	$h™dÀ_punch
(
P2PCONN
* 
pc⁄n
, c⁄° 
p2pc‹e_punch
* 
pdp
, c⁄° 
sockaddr_ö
* 
µìr_addr
, 
RUDPSOCKET
 
ac˚±ed_rsock
)

1365 if(
pc⁄n
->
°©e
 !
PSS_PUNCHING
)

1367 
	`dbg_p2p
("Conn isáctivated or died");

1371 if(
	`memcmp
(
pc⁄n
->
£ss_id
, 
pdp
->£ss_id, 
LENGTH_OF_SESSION_ID
))

1373 
	`dbg_p2p
("unmatched session id.");

1377 
	`dbg_p2p
("%s", 
pc⁄n
->
bôs
.
t˝
?"tcp":"udp");

1378 if(
pc⁄n
->
bôs
.
auth
 ||Öc⁄n->bôs.
˘
 =
P2P_CONNTYPE_LOCAL
)

1381 
BOOL
 
bAuthOk
 = 
FALSE
;

1382 if(
s_pCÆlbackFuncs
 && s_pCÆlbackFuncs->
VîifyAuthSåög
)

1383 
bAuthOk
 = 
s_pCÆlbackFuncs
->
	`VîifyAuthSåög
(
pdp
->
auth_°r
);

1384 if(!
bAuthOk
)

1386 
p2pc‹e_hódî
 
dh
;

1387 
	`öô_p2pc‹e_hódî
(&
dh
, 
ST_CALLEE
, 
OP_PUNCH
, 
CLS_RESPONSE
, 
P2PS_AUTH_FAILED
, 0, 
	`P2PCORE_TID
(&
pdp
->dh));

1388 if(
pc⁄n
->
bôs
.
t˝
)

1389 
	`PA_Síd
(
pc⁄n
->
sock
, &
dh
, (dh), 0);

1391 
	`PA_SídTo
(
pc⁄n
->
sock
, &
dh
, (dh), 0, (
sockaddr
*)
µìr_addr
, (
sockaddr_ö
));

1394 
pc⁄n
->
tmp
->
n_åy
 = 100;

1399 if(
pc⁄n
->
bôs
.
t˝
)

1401 
sockÀn_t
 
ß_Àn
 = (
pc⁄n
->
≥î_addr
);

1402 
	`gë≥î«me
(
pc⁄n
->
sock
, (
sockaddr
*)&pc⁄n->
≥î_addr
, &
ß_Àn
);

1404 { 
›t
 = 0x40000;

1405 
	`PA_SëSockO±
(
pc⁄n
->
sock
, 
SOL_SOCKET
, 
SO_SNDBUF
, &
›t
, ());

1408 if(
µìr_addr
)

1410 
	`dbg_p2p
("establish udp session ...");

1411 if(
pc⁄n
->
tmp
->
out_sock
Ë{ 
	`RUDPClo£
’c⁄n->tmp->out_sock);Öc⁄n->tmp->out_sock = 
NULL
; }

1412 if(
	`PA_SockëIsVÆid
(
pc⁄n
->
tmp
->
sock2
))

1414 
	`PA_SockëClo£
(
pc⁄n
->
sock
);Öc⁄n->sock =Öc⁄n->
tmp
->
sock2
;Öc⁄n->tmp->sock2 = 
INVALID_SOCKET
;

1417 uni⁄ { 
p2pc‹e_punch
 
punch
; 
buff
[256]; } 
u
;

1418 
	`öô_punch_∑ckage
(&
u
.
punch
, 
pc⁄n
);

1419 
	`PA_SídTo
(
pc⁄n
->
sock
, &
u
.
punch
, 
	`P2PCORE_PACKET_LEN
(&u.punch.
dh
), 0, (
sockaddr
*)
µìr_addr
, (
sockaddr_ö
));

1420 
	`mem˝y
(&
pc⁄n
->
≥î_addr
, 
µìr_addr
, (
sockaddr
));

1422 
pc⁄n
->
rudp_sock
 = 
	`RUDPSockëFromUdp
’c⁄n->
sock
);

1423 
›t
=1; 
	`RUDPSëSockO±
(
pc⁄n
->
rudp_sock
, 
OPT_NBLK
, &opt, (opt));

1424 
pc⁄n
->
sock
 = -1;

1425 if(
	`RUDPC⁄√˘
(
pc⁄n
->
rudp_sock
, (c⁄° 
sockaddr
*)&pc⁄n->
≥î_addr
, (sockaddr)Ë!-
ERUDP_AGAIN
)

1427 
pc⁄n
->
°©e
 = 
PSS_FAILED
;

1428 
	`dbg_p2p
("rudp connect failed");

1433 
pc⁄n
->
°©e
 = 
PSS_RUDP_CONNECTING
;

1434 if(
pc⁄n
->
tmp
->
auth_°r
Ë
	`‰ì
(pconn->tmp->auth_str);

1435 
	`‰ì
(
pc⁄n
->
tmp
);

1436 
pc⁄n
->
tmp
 = 
NULL
;

1437 
	`dbg_p2p
("rudp connecting....");

1443 if(
	`PA_SockëIsVÆid
(
pc⁄n
->
tmp
->
sock2
)Ë{ 
	`PA_SockëClo£
’c⁄n->tmp->sock2);Öc⁄n->tmp->sock2 = 
INVALID_SOCKET
; }

1444 if(
	`PA_SockëIsVÆid
(
pc⁄n
->
sock
)Ë{ 
	`PA_SockëClo£
’c⁄n->sock);Öc⁄n->sock = 
INVALID_SOCKET
; }

1445 if(
pc⁄n
->
tmp
->
out_sock
)

1448 
pc⁄n
->
rudp_sock
 =Öc⁄n->
tmp
->
out_sock
;

1449 
pc⁄n
->
tmp
->
out_sock
 = 
NULL
;

1451 if(
ac˚±ed_rsock
)

1454 
pc⁄n
->
rudp_sock
 = 
ac˚±ed_rsock
;

1455 if(
pc⁄n
->
tmp
->
out_sock
Ë{ 
	`RUDPClo£
’c⁄n->tmp->out_sock);Öc⁄n->tmp->out_sock = 
NULL
; }

1456 
›t
 = 1; 
	`RUDPSëSockO±
(
pc⁄n
->
rudp_sock
, 
OPT_NBLK
, &opt, ());

1458 
	`RUDPGëPìrName
(
pc⁄n
->
rudp_sock
, (
sockaddr
*)&pc⁄n->
≥î_addr
);

1461 if(
pc⁄n
->
tmp
->
auth_°r
Ë
	`‰ì
(pconn->tmp->auth_str);

1462 
	`‰ì
(
pc⁄n
->
tmp
);

1463 
pc⁄n
->
tmp
 = 
NULL
;

1464 
pc⁄n
->
°©e
 = 
PSS_CONNECTED
;

1474 
	`_CALLCB
(
C⁄nCª©ed
)((
HP2PCONN
)
pc⁄n
);

1477 
	}
}

1479 
	$¸óã_£ssi⁄_öô_ack
(
uöt8
 *
buf
, 
c⁄n_bô_fõlds
 
bôs
, c⁄° 
p2pc‹e_addr
* 
∑ddrs
,

1480 c⁄° * 
¢
, c⁄° 
uöt8
* 
£ss_id
, 
uöt32
 
å™s_id
)

1482 
p2pc‹e_£ssi⁄_öô
* 
p¢a
 = (p2pc‹e_£ssi⁄_öô*)
buf
;

1483 
	`öô_p2pc‹e_hódî
(&
p¢a
->
dh
, 
ST_CALLEE
, 
OP_SD_SESSION_NOTIFY
, 
CLS_RESPONSE
, 0,

1484 (
p2pc‹e_£ssi⁄_öô
Ë+ (
p2pc‹e_addr
)*
bôs
.
n_addr
 - (
p2pc‹e_hódî
),

1485 
å™s_id
);

1486 
p¢a
->
bôs
 = bits;

1487 
	`mem£t
(
p¢a
->
sidít
, 0, 
LENGTH_OF_SIDENT
);

1488 
	`mem£t
(
p¢a
->
¢
, 0, 
LENGTH_OF_SN
);

1489 
	`mem˝y
(
p¢a
->
¢
, sn, 
LENGTH_OF_SN
);

1490 
	`mem˝y
(
p¢a
->
£ss_id
, sess_id, 
LENGTH_OF_SESSION_ID
);

1492 
	`mem˝y
(
p¢a
->
addrs
, 
∑ddrs
, (
p2pc‹e_addr
)* 
bôs
.
n_addr
);

1494  
	`P2PCORE_PACKET_LEN
(&(
p¢a
->
dh
));

1495 
	}
}

1497 
	$£ncRecvOvîUdp
(
sock
, c⁄° 
p2pc‹e_hód
 *
pOut
, 
sockaddr_ö
 *
pTgt
, *
pIn
, 
size
, c⁄° *
waô_ms
, 
n_waô
)

1499 
i
;

1500 
i
=0; i<
n_waô
; i++)

1502 
sockaddr_ö
 
ßi
;

1503 
sockÀn_t
 
ß_Àn
;

1504 
Àn
;

1506 
ß_Àn
 = (
ßi
);

1507 
	`PA_SídTo
(
sock
, 
pOut
, 
	`P2PCORE_PACKET_LEN
(pOut), 0,

1508 (c⁄° 
sockaddr
*)
pTgt
, (
sockaddr_ö
));

1509 
ß_Àn
 = (
ßi
);

1510 
Àn
 = 
	`timed_ªcv_‰om
(
sock
, 
pIn
, 
size
, &
ßi
, &
ß_Àn
, 
waô_ms
[
i
]);

1511 if(
Àn
 <= 0) { ; }

1512  
Àn
;

1514  -
P2PE_NO_RESPONSE
;

1515 
	}
}

1521 
	$P2pC⁄nInôEx
(c⁄° *
p2psvr
, c⁄° *
pcsSN
, c⁄° 
uöt8
 *
sidít
 ,

1522 c⁄° *
auth_°r
, 
auth_Àn
, *
pIdít
, 
˘
)

1524 uni⁄ { 
p2pc‹e_£ssi⁄_öô
 
ªq
; 
uöt8
 
buf
[256]; } 
u
;

1525 
udp_sock
;

1526 
sockaddr_ö
 
ßi
, 
ßi_svr
;

1527 
sockÀn_t
 
ß_Àn
;

1528 
P2PCONN
 *
pc⁄n
;

1530 if(
	`öô_ßi
(&
ßi_svr
, 
p2psvr
, 
P2PCORE_SERVICE_PORT
) != 0)

1531  -
P2PE_CANNOT_RESOLVE_HOST
;

1532 if(!
pcsSN
Ë -
P2PE_INVALID_PARAM
;

1534 
udp_sock
 = 
	`NewSockëAndBöd
(
SOCK_DGRAM
, 0, 0);

1535 if(!
	`PA_SockëIsVÆid
(
udp_sock
))

1536  -
P2PE_SOCKET_ERROR
;

1537 
	`£tblk
(
udp_sock
, 0);

1539 
ß_Àn
 = (
ßi
);

1540 
	`PA_GëSockName
(
udp_sock
, (
sockaddr
*)&
ßi
, &
ß_Àn
);

1543 
	`mem£t
(&
u
.
ªq
, 0, (u.req));

1544 
u
.
ªq
.
bôs
.
˘
 = ct==
P2P_CONNTYPE_AUTO
?
P2P_CONNTYPE_P2P
:ct;

1545 if(
˘
 =
P2P_CONNTYPE_RELAY
)

1547 
u
.
ªq
.
bôs
.
t˝
 = 1;

1551 
LOCALCONNINFO
 
lci
;

1552 
	`cﬁÀ˘LoˇlC⁄nInfo
(&
lci
, 
	`¡ohs
(
ßi
.
sö_p‹t
));

1553 
u
.
ªq
.
bôs
 = 
lci
.bits;

1554 
	`mem˝y
(
u
.
ªq
.
addrs
, 
lci
.addrs, (
p2pc‹e_addr
)*lci.
bôs
.
n_addr
);

1556 
	`°∫˝y
(
u
.
ªq
.
¢
, 
pcsSN
, 
LENGTH_OF_SN
);

1557 if(
sidít
Ë
	`mem˝y
(
u
.
ªq
.sidít, sidít, 
LENGTH_OF_SIDENT
);

1558 
	`öô_p2pc‹e_hódî
(&
u
.
ªq
.
dh
, 
ST_CALLER
, 
OP_CS_SESSION_INIT
, 
CLS_REQUEST
, 0,

1559 (
u
.
ªq
)-(
p2pc‹e_hódî
Ë+ u.ªq.
bôs
.
n_addr
 * (
p2pc‹e_addr
), 
s_TønsId
 ++);

1561 
pc⁄n
 = 
	`ÆlocC⁄n
();

1562 
pc⁄n
->
œ°_ac˚ss
 = 
	`PA_GëTickCou¡
();

1563 
pc⁄n
->
sock
 = 
udp_sock
;

1564 
pc⁄n
->
pU£rD©a
 = 
pIdít
;

1565 
pc⁄n
->
is_ˇŒî
 = 1;

1566 
pc⁄n
->
bôs
 = 
u
.
ªq
.bits;

1567 
pc⁄n
->
tmp
 = (
punch_tmp
*)
	`ˇŒoc
((punch_tmp), 1);

1568 
pc⁄n
->
tmp
->
sock2
 = 
INVALID_SOCKET
;

1569 if(
auth_°r
) {

1570 
pc⁄n
->
tmp
->
auth_°r
 = (*)
	`mÆloc
(
auth_Àn
+1);

1571 
	`mem˝y
(
pc⁄n
->
tmp
->
auth_°r
,áuth_°r, 
auth_Àn
+1);

1572 
pc⁄n
->
tmp
->
auth_Àn
 =áuth_len;

1575 
pc⁄n
->
°©e
 = 
PSS_WAIT_FOR_SERVER_ACK
;

1576 
pc⁄n
->
tmp
->
bß_Àn
 = 
	`P2PCORE_DATA_LEN
(&
u
.
ªq
.
dh
);

1577 
	`mem˝y
(&
pc⁄n
->
tmp
->
£ss_ªq
, &
u
.
ªq
,Öc⁄n->tmp->
bß_Àn
);

1578 
	`mem˝y
(&
pc⁄n
->
tmp
->
p2p_£rv
, &
ßi_svr
, (
sockaddr
));

1579 
ßi_svr
.
sö_p‹t
 = 
	`ht⁄s
(
P2PCORE_SERVICE_PORT
);

1580 if(
	`PA_SídTo
(
udp_sock
, &
u
.
ªq
, 
	`P2PCORE_PACKET_LEN
(&u.ªq.
dh
), 0, (c⁄° 
sockaddr
*)&
ßi_svr
, (sai_svr)) < 0)

1581 
	`≥º‹
("sendto");

1584 
	}
}

1586 
	$P2pC⁄nInô
(c⁄° *
p2psvr
, c⁄° *
pcsSN
, c⁄° 
uöt8
 *
sidít
 ,

1587 c⁄° *
auth_°r
, 
auth_Àn
, *
pIdít
)

1589  
	`P2pC⁄nInôEx
(
p2psvr
, 
pcsSN
, 
sidít
, 
auth_°r
, 
auth_Àn
, 
pIdít
, 
P2P_CONNTYPE_AUTO
);

1590 
	}
}

1592 
	$P2pC⁄nSëMode
(
HP2PCONN
 
hc⁄n
, 
mode
)

1594 
hc⁄n
->
mode
 = mode;

1596 
	}
}

1598 
	$P2pC⁄nGëMode
(
HP2PCONN
 
hc⁄n
)

1600  
hc⁄n
->
mode
;

1601 
	}
}

1606 
	$_P2pC⁄nClo£
(
HP2PCONN
 
hc⁄n
)

1608 
P2PCONN
 *
pc⁄n
 = (P2PCONN*)
hc⁄n
;

1609 if(
pc⁄n
->
dwTag
 !
HP2PCONN_TAG
Ë -
P2PE_INVALID_CONN_OBJECT
;

1611 if(
pc⁄n
->
°©e
 =
PSS_CLOSED
)  0;

1613 
	`_CALLCB
(
C⁄nAb‹ãd
)(
hc⁄n
);

1615 if(!
pc⁄n
->
bôs
.
t˝
)

1617 if(
pc⁄n
->
°©e
 =
PSS_CONNECTED
Ë
	`RUDPClo£
’c⁄n->
rudp_sock
);

1618 
	`PA_SockëClo£
(
pc⁄n
->
sock
);

1620 if(
	`PA_SockëIsVÆid
(
pc⁄n
->
sock
))

1621 
	`PA_SockëClo£
(
pc⁄n
->
sock
);

1623 
pc⁄n
->
°©e
 = 
PSS_CLOSED
;

1626 
	}
}

1628 
	$P2pC⁄nClo£
(
HP2PCONN
 
hc⁄n
)

1630 
P2PCONN
 *
pc⁄n
 = (P2PCONN*)
hc⁄n
;

1631 if(
pc⁄n
->
dwTag
 !
HP2PCONN_TAG
Ë -
P2PE_INVALID_CONN_OBJECT
;

1633 
	`PA_MuãxLock
(
s_muãxC⁄nLi°
);

1634 
	`li°_dñ
(&
pc⁄n
->
li°
);

1635 
	`PA_MuãxU∆ock
(
s_muãxC⁄nLi°
);

1637 
	`_P2pC⁄nClo£
(
hc⁄n
);

1638 
	`‰ì
(
pc⁄n
);

1641 
	}
}

1643 
	$P2pC⁄nWaôR
(
HP2PCONN
 
hc⁄n
, 
waô_ms
)

1645 if(
hc⁄n
->
mode
 =
P2PCONN_MODE_PUSH
Ë -
P2PE_NOT_ALLOWED
;

1647 
timevÆ
 
tv
;

1649 
tv
.
tv_£c
 = 
waô_ms
/1000;

1650 
tv
.
tv_u£c
 = (
waô_ms
%1000)*1000;

1651 if(
hc⁄n
->
bôs
.
t˝
)

1653 
fd_£t
 
rfds
;

1654 
	`FD_ZERO
(&
rfds
);

1655 
	`FD_SET
(
hc⁄n
->
sock
, &
rfds
);

1656  
	`£À˘
(
hc⁄n
->
sock
+1, &
rfds
, 
NULL
, NULL, &
tv
);

1660  
	`RUDPSñe˘Sock
(
hc⁄n
->
rudp_sock
, -1, 
RUDPSELECT_READABLE
, &
tv
);

1662 
	}
}

1664 
	$P2pC⁄nWaôW
(
HP2PCONN
 
hc⁄n
, 
phy_chno
, 
waô_ms
)

1666 
timevÆ
 
tv
;

1667 
P2PCONN
 *
pc⁄n
 = (P2PCONN*)
hc⁄n
;

1669 
tv
.
tv_£c
 = 
waô_ms
/1000;

1670 
tv
.
tv_u£c
 = (
waô_ms
%1000)*1000;

1671 if(
pc⁄n
->
bôs
.
t˝
)

1673 
fd_£t
 
wfds
;

1674 
	`FD_ZERO
(&
wfds
);

1675 
	`FD_SET
(
pc⁄n
->
sock
, &
wfds
);

1676  
	`£À˘
(
pc⁄n
->
sock
+1, 
NULL
, &
wfds
, NULL, &
tv
);

1678  
	`RUDPSñe˘Sock
(
pc⁄n
->
rudp_sock
, 
phy_chno
, 
RUDPSELECT_WRITABLE
, &
tv
);

1679 
	}
}

1681 
	$P2pC⁄nRecv
(
HP2PCONN
 
hc⁄n
, 
BYTE
 *
pBuff
, 
size
)

1683 
æí
;

1684 
P2PCONN
 *
pc⁄n
 = (P2PCONN*)
hc⁄n
;

1685 if(
pc⁄n
->
mode
 =
P2PCONN_MODE_PUSH
Ë -
P2PE_NOT_ALLOWED
;

1687 if(
pc⁄n
->
bôs
.
t˝
)

1689 
æí
 = 
	`PA_Recv
(
pc⁄n
->
sock
, 
pBuff
, 
size
, 0);

1690 if(
æí
 < 0)

1692 if(
	`PA_SockëGëEº‹
(Ë!
EWOULDBLOCK
Ë -
P2PE_AGAIN
;

1698 
chno
;

1699 if–(
æí
 = 
	`RUDPRecv
(
pc⁄n
->
rudp_sock
, &
chno
, 
pBuff
, 
size
, 0)) < 0 )

1701 if(
æí
 =-
ERUDP_AGAIN
)

1702  -
P2PE_AGAIN
;

1706  
æí
;

1707 
	}
}

1709 
	$P2pC⁄nSídV
(
HP2PCONN
 
hc⁄n
, 
phy_chno
, 
PA_IOVEC
 *
v
, 
size_v
)

1711 
îr
;

1712 
P2PCONN
 *
pc⁄n
 = (P2PCONN*)
hc⁄n
;

1713 if(
pc⁄n
->
bôs
.
t˝
)

1715 #ifde‡
WIN32


1716 
DWORD
 
dwByãsSít
;

1717 if(
	`WSASíd
(
pc⁄n
->
sock
, 
v
, 
size_v
, &
dwByãsSít
, 0, 
NULL
, NULLË=
SOCKET_ERROR
)

1719 if(
	`WSAGëLa°Eº‹
(Ë!
WSAEWOULDBLOCK
Ë -
P2PE_AGAIN
;

1722 #ñi‡
	`deföed
(
__LINUX__
)

1723 
msghdr
 
msg
;

1724 
msg
.
msg_iov
 = 
v
;

1725 
msg
.
msg_iovÀn
 = 
size_v
;

1726 
msg
.
msg_c⁄åﬁ
 = 
NULL
;

1727 
msg
.
msg_c⁄åﬁÀn
 = 0;

1728 
msg
.
msg_Êags
 = 0;

1729 
msg
.
msg_«me
 = (*)&
pc⁄n
->
≥î_addr
;

1730 
msg
.
msg_«mñí
 = (
sockaddr_ö
);

1731 if(
	`£ndmsg
(
pc⁄n
->
sock
, &
msg
, 
MSG_NOSIGNAL
) < 0)

1733 if(
î∫o
 =
EAGAIN
Ë -
P2PE_AGAIN
;

1734 
	`≥º‹
("P2pConnSendV==>sendmsg");

1741 if–(
îr
 = 
	`RUDPSídV
(
pc⁄n
->
rudp_sock
, 
phy_chno
, 
v
, 
size_v
, 0)) == 0)

1742  
îr
;

1743 if(
îr
 =-
ERUDP_AGAIN
Ë -
P2PE_AGAIN
;

1747 
	}
}

1749 
	$P2pC⁄nSíd
(
HP2PCONN
 
hc⁄n
, 
phy_chno
, *
pD©a
, 
Àn
)

1751 
PA_IOVEC
 
v
;

1752 
	`PA_IoVecSëPå
(&
v
, 
pD©a
);

1753 
	`PA_IoVecSëLí
(&
v
, 
Àn
);

1754  
	`P2pC⁄nSídV
(
hc⁄n
, 
phy_chno
, &
v
, 1);

1755 
	}
}

1757 
	$P2pC⁄nGëInfo
(
HP2PCONN
 
hc⁄n
, 
P2PCONNINFO
 *
öfo
)

1759 
P2PCONN
 *
pc⁄n
 = (P2PCONN*)
hc⁄n
;

1760 if(
pc⁄n
->
dwTag
 !
HP2PCONN_TAG
Ë -
P2PE_INVALID_CONN_OBJECT
;

1761 
öfo
->
˘
 = 
pc⁄n
->
bôs
.ct;

1762 
	`mem˝y
(&
öfo
->
≥î
, &
pc⁄n
->
≥î_addr
, (
sockaddr_ö
));

1763 
öfo
->
°©e
 = 
pc⁄n
->state;

1765 
	}
}

1767 
	$P2pC⁄nSëTimeout
(
HP2PCONN
 
hc⁄n
, 
£c
 )

1769 
P2PCONN
 *
pc⁄n
 = (P2PCONN*)
hc⁄n
;

1770 if(
pc⁄n
->
dwTag
 !
HP2PCONN_TAG
Ë -
P2PE_INVALID_CONN_OBJECT
;

1771 
r
 = 
pc⁄n
->
timeout_vÆ
/1000;

1772 if(
£c
 != 0)

1774 if(
£c
 < 5) sec = 5;

1775 if(
£c
 > 25) sec = 25;

1776 
pc⁄n
->
timeout_vÆ
 = 
£c
*1000;

1778  
r
;

1779 
	}
}

1782 
	$P2pC⁄nSëU£rBuf„r
(
HP2PCONN
 
hc⁄n
, *
pBuff
, 
size
)

1784 
P2PCONN
 *
pc⁄n
 = (P2PCONN*)
hc⁄n
;

1785 if(
pc⁄n
->
dwTag
 !
HP2PCONN_TAG
Ë -
P2PE_INVALID_CONN_OBJECT
;

1786 
pc⁄n
->
rbuff
 = (
BYTE
*)
pBuff
;

1787 
pc⁄n
->
rbuff_size
 = 
size
;

1788 
pc⁄n
->
rbuff_off
 = 0;

1790 
	}
}

1792 
	$P2pC⁄nSëU£rBuf„rOff£t
(
HP2PCONN
 
hc⁄n
, 
off£t
)

1794 
P2PCONN
 *
pc⁄n
 = (P2PCONN*)
hc⁄n
;

1795 if(
pc⁄n
->
dwTag
 !
HP2PCONN_TAG
Ë -
P2PE_INVALID_CONN_OBJECT
;

1796 
pc⁄n
->
rbuff_off
 = 
off£t
;

1798 
	}
}

1801 
	$P2pC⁄nSëU£rD©a
(
HP2PCONN
 
hc⁄n
, *
pU£r
)

1803 
P2PCONN
 *
pc⁄n
 = (P2PCONN*)
hc⁄n
;

1804 if(
pc⁄n
->
dwTag
 !
HP2PCONN_TAG
Ë -
P2PE_INVALID_CONN_OBJECT
;

1805 
pc⁄n
->
pU£rD©a
 = 
pU£r
;

1807 
	}
}

1810 
	$P2pC⁄nGëU£rD©a
(
HP2PCONN
 
hc⁄n
, **
µU£r
)

1812 
P2PCONN
 *
pc⁄n
 = (P2PCONN*)
hc⁄n
;

1813 if(
pc⁄n
->
dwTag
 !
HP2PCONN_TAG
Ë -
P2PE_INVALID_CONN_OBJECT
;

1814 *
µU£r
 = 
pc⁄n
->
pU£rD©a
;

1816 
	}
}

1820 
	$P2pNŸifyAŒ
(c⁄° *
pD©a
, 
UINT
 
nD©aLí
)

1822 
li°_hód
 *
p
;

1823 
P2PCONN
 *
pc⁄n
;

1824 
p2pc‹e_hódî
 
dh
;

1826 
	`öô_p2pc‹e_hódî
(&
dh
, 
ST_CALLEE
, 
OP_EVENT
, 0, 
CLS_REQUEST
, 
nD©aLí
, 0);

1827 
dh
.
chno
 = 0;

1828 
dh
.
íd
 = 1;

1830 
	`PA_MuãxLock
(
s_muãxC⁄nLi°
);

1831 
	`li°_f‹_óch
(
p
, &
s_P2pC⁄nLi°
)

1833 
pc⁄n
 = 
	`li°_íåy
(
p
, 
P2PCONN
, 
li°
);

1834 
	`£ndC⁄nPackë
(
pc⁄n
, &
dh
, 
pD©a
, 
nD©aLí
);

1836 
	`PA_MuãxU∆ock
(
s_muãxC⁄nLi°
);

1837 
	}
}

1842 
PA_HTHREAD
 
	gthd_ˇŒì
 = 
PA_HTHREAD_NULL
;

1843 
	#MAX_KERNEL_SERVER
 6

	)

1844 
	gkî√l_£rvîs
[
MAX_KERNEL_SERVER
][
LENGTH_OF_SERVER
];

1845 
	gn_kî_£rvî
 = 0, 
	gi_kî_£rvî
 = -1;

1849 
PA_THREAD_RETTYPE
 
	$_ThªadLogö
(*
p
)

1851 
	`PA_ThªadClo£H™dÀ
(
	`PA_ThªadGëCuºítH™dÀ
());

1853 
sock
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

1854 
˙t
 = 0;

1857 
sockaddr_ö
 
ßi
;

1858 if(
	`öô_ßi
(&
ßi
, 
kî√l_£rvîs
[
i_kî_£rvî
], 
P2PCORE_SERVICE_PORT
-1) == 0)

1861 
p2pc‹e_hódî
 
dh
;

1862 
p2pc‹e_quîy_£rvî_ªq
 
ªq
;

1863 
p2pc‹e_quîy_£rvî_ª•
 
ª•
;

1864 
buff
[1024];

1865 } 
u
;

1866 
	`öô_p2pc‹e_hódî
(&
u
.
dh
, 
ST_CALLEE
, 
OP_QUERY_SERVER
, 
CLS_REQUEST
, 0,

1867 (
p2pc‹e_quîy_£rvî_ªq
Ë- (
p2pc‹e_hódî
Ë+ 
LENGTH_OF_SN
, 0);

1868 
u
.
ªq
.
Êags
 = 
QSF_STUN_SERVER
;

1869 
u
.
ªq
.
n_q
 = 1;

1870 
	`°r˝y
(
u
.
ªq
.
¢
[0], 
__SN
);

1871 
	`PA_SídTo
(
sock
, &
u
, 
	`P2PCORE_PACKET_LEN
(&u.
dh
), 0, (
sockaddr
*)&
ßi
, (sai));

1872 if(
	`timed_waô_fd
(
sock
, 5000) > 0)

1874 
ß_Àn
 = (
ßi
);

1875 
Àn
 = 
	`PA_RecvFrom
(
sock
, &
u
, (u), 0, (
sockaddr
*)&
ßi
, &
ß_Àn
);

1876 if(
Àn
 > (
u
.
dh
Ë&& 
	`check_p2pc‹e_hódî
(&u.dhË&& u.dh.
›
 =
OP_QUERY_SERVER
)

1878 *
p
 = 
u
.
buff
 + (
p2pc‹e_quîy_£rvî_ª•
);

1879 
¢_£rvî_∑ú
 *
s•
 = (¢_£rvî_∑ú*)(
p
 + 
LENGTH_OF_SERVER
 * 
u
.
ª•
.
n_°un_svr
);

1880 
sockaddr_ö
 
ßi_tmp
;

1883 *
s
 = 
p
 + 
LENGTH_OF_SERVER
 * (
	`ønd
()%
u
.
ª•
.
n_°un_svr
);

1884 if(
	`öô_ßi
(&
ßi_tmp
, 
s
, 3478) == 0)

1886 
	`°r˝y
(
°un_£rvî
, 
s
);

1887 
	`dëe˘N©
(
NULL
);

1891 
	`dbg_p2p
("resolve stun server failed\n");

1892 
	`PA_SÀï
(10000);

1897 if(
s•
[0].
£rvî
[0] && 
	`°rcmp
(s•[0].
¢
, 
__SN
) == 0)

1899 if(
	`öô_ßi
(&
p2p_£rvî
, 
s•
[0].
£rvî
, 
P2PCORE_SERVICE_PORT
) == 0)

1904 
	`dbg_p2p
("resolveÖ2p server failed\n");

1905 
	`PA_SÀï
(10000);

1910 
	`dbg_p2p
("Nÿp2∞£rvî f‹ s¿%s\n", 
__SN
);

1916 
i_kî_£rvî
 ++;

1917 
i_kî_£rvî
 %
n_kî_£rvî
;

1918 
˙t
++;

1920 if(
˙t
 % 
n_kî_£rvî
 == 0)

1921 
	`PA_SÀï
(30000);

1923 
	`PA_SÀï
(5000);

1925 
	`PA_SockëClo£
(
sock
);

1926  (
PA_THREAD_RETTYPE
)0;

1927 
	}
}

1930 
PA_THREAD_RETTYPE
 
__STDCALL
 
	$_TimeC⁄sumögInôüliz©i⁄Task
(*
p
)

1932 
	`PA_ThªadClo£H™dÀ
(
	`PA_ThªadGëCuºítH™dÀ
());

1934 
s_bRunP2p
)

1936 
sockaddr_ö
 
ßi_tmp
;

1937 if(
	`öô_ßi
(&
ßi_tmp
, 
°un_£rvî
, 3478) != 0)

1939 
	`dbg_p2p
("resolving failed.");

1940 
	`PA_SÀï
(5000);

1941 #ifde‡
__LINUX__


1942 
	`dbg_p2p
("retrying...");

1943 
	`ªs_˛o£
();

1944 
	`ªs_öô
();

1950 if(!
s_bRunP2p
Ë (
PA_THREAD_RETTYPE
)0;

1951 
	`dbg_p2p
("serversÑesolved.");

1953 
	`PA_ThªadCª©e
(
_ThªadLogö
, 
NULL
);

1955 
	`dëe˘N©
(
NULL
);

1956 
	`öô_ßi
(&
p2p_£rvî
, 
kî√l_£rvîs
[0], 
P2PCORE_SERVICE_PORT
);

1959 
ù_gw
, 
ù_loc
;

1960 
	`GëDeÁu…Rouã
(&
ù_gw
, &
ù_loc
);

1961 
	`§™d
(
	`time
(
NULL
Ë* 
ù_loc
);

1963 
i_kî_£rvî
 = 
	`ønd
(Ë% 
n_kî_£rvî
;

1965  (
PA_THREAD_RETTYPE
)0;

1966 
	}
}

1968 
	$P2pC‹eInôülize
(c⁄° *
svrs
[], 
n_svr
, c⁄° *
¢
, 
P2PCORECBFUNCS
 *
cbs
)

1970 if(
thd_ˇŒì
)  0;

1972 
s_pCÆlbackFuncs
 = 
cbs
;

1975 
i
;

1976 if(
n_svr
 > 
MAX_KERNEL_SERVER
)Ç_svr = MAX_KERNEL_SERVER;

1977 
i
=0; i<
n_svr
; i++)

1978 
	`°r˝y
(
kî√l_£rvîs
[
i
], 
svrs
[i]);

1979 
n_kî_£rvî
 = 
n_svr
;

1982 if(
¢
Ë
	`°r˝y
(
__SN
, sn);

1983 
	`PA_MuãxInô
(
s_muãxC⁄nLi°
);

1984 
	`PA_SpöInô
(
•ö_å™s_id
);

1986 
	`SèπTimîQueue
();

1987 
	`U≤pIgdCpInôülize
();

1988 
	`U≤pIgdCpAddP‹tM≠
("p2p", 
	`gëU≤pM≠pögP‹t
(), gëU≤pM≠pögP‹t(), 
IGD_PORTTYPE_UDP
);

1989 
	`RUDPSèπ
();

1991 
s_bRunP2p
 = 
TRUE
;

1992 
	`PA_ThªadCª©e
(
_TimeC⁄sumögInôüliz©i⁄Task
, 
NULL
);

1993 
	`PA_SÀï
(500);

1995 if(
thd_ˇŒì
 =
PA_HTHREAD_NULL
)

1996 
thd_ˇŒì
 = 
	`PA_ThªadCª©e
(
P2pThªad
, 
NULL
);

1999 
	}
}

2001 
	$P2pC‹eTîmö©e
()

2003 
s_bRunP2p
 = 
FALSE
;

2004 
	}
}

2005 
	$P2pC‹eCÀ™up
()

2007 
li°_hód
 *
p
, *
q
;

2009 
	`PA_ThªadWaôU¡ûTîmö©e
(
thd_ˇŒì
);

2010 
	`PA_ThªadClo£H™dÀ
(
thd_ˇŒì
);

2012 
	`li°_f‹_óch_ß„
(
p
, 
q
, &
s_P2pC⁄nLi°
)

2014 
P2PCONN
 *
pc⁄n
 = 
	`li°_íåy
(
p
, P2PCONN, 
li°
);

2015 
	`_P2pC⁄nClo£
(
pc⁄n
);

2016 
	`‰ì
(
pc⁄n
);

2019 
	`PA_MuãxUnöô
(
s_muãxC⁄nLi°
);

2020 
	`PA_SpöUnöô
(
•ö_å™s_id
);

2021 
thd_ˇŒì
 = 
PA_HTHREAD_NULL
;

2023 
	`RUDPCÀ™up
();

2025 
	`U≤pIgdCpSt›
();

2026 
	`St›TimîQueue
();

2027 
	}
}

2029 
DWORD
 
	$P2pC‹eGëVîsi⁄
()

2032 
	}
}

2034 
BOOL
 
	$P2pC‹eEnumCÆÀe
(
LPENUMCALLEE
 *
µEnumDev
, 
UINT
 *
pNDev
, c⁄° *
pszSN
)

2036 
PA_SOCKET
 
sk
;

2037 
ßÀn
, 
i›t
;

2038 
sockaddr_ö
 
ß
;

2039 
ENUMCALLEE
 *
pEnumDev
;

2040 
size
, 
˙t
;

2041 °ru˘ { 
p2pc‹e_hódî
 
dh
; 
buff
[32]; } 
ªq
;

2042 °ru˘ { 
p2pc‹e_hódî
 
dh
; 
ENUMCALLEE
 
e
; } 
ª•
;

2044 
sk
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

2045 if(
sk
 =
INVALID_SOCKET
Ë 
FALSE
;

2046 
ß
.
sö_Ámûy
 = 
AF_INET
;

2047 
ß
.
sö_p‹t
 = 
	`ht⁄s
(7999);

2048 
ß
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

2049 
›t
 = 1;

2050 
	`PA_SëSockO±
(
sk
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
›t
, ());

2051 
	`mem£t
(
ß
.
sö_zîo
, 0, (sa.sin_zero));

2052 
	`böd
(
sk
, (
sockaddr
*)&
ß
, (sa));

2053 
ßÀn
 = (
ß
);

2054 
	`PA_GëSockName
(
sk
, (
sockaddr
*)&
ß
, &
ßÀn
);

2056 
i›t
 = 1; 
	`PA_SëSockO±
(
sk
, 
SOL_SOCKET
, 
SO_BROADCAST
, (const *)&iopt, (iopt));

2058 
	`öô_p2pc‹e_hódî
(&
ªq
.
dh
, 
ST_CALLER
, 
OP_SEARCH
, 0, 
CLS_REQUEST
, 
pszSN
?(
	`°æí
(pszSN)+1):0, 0);

2059 if(
pszSN
Ë
	`°r˝y
(
ªq
.
buff
,ÖszSN);

2060 
size
 = (
pszSN
 && *pszSN)?2:10;

2061 
˙t
 = 0;

2062 
pEnumDev
 = (
LPENUMCALLEE
)
	`mÆloc
((
ENUMCALLEE
Ë* 
size
);

2064 
i
;

2065 
i
 = 0; i < 1; i++)

2067 
sockaddr_ö
 
ß‰om
;

2068 
ßsize
, 
Àn
;

2069 
fd_£t
 
rfds
;

2070 
timevÆ
 
tv
;

2072 
ß
.
sö_addr
.
s_addr
 = 
	`öë_addr
("255.255.255.255");

2073 
	`PA_SídTo
(
sk
, &
ªq
, 
	`P2PCORE_PACKET_LEN
(&ªq.
dh
), 0, (c⁄° 
sockaddr
*)&
ß
, (sa));

2076 
	`FD_ZERO
(&
rfds
);

2077 
	`FD_SET
(
sk
, &
rfds
);

2078 
îr
;

2079 
tv
.
tv_£c
 = 1;Åv.
tv_u£c
 = 0;

2080 if((
îr
 = 
	`£À˘
(
sk
+1, &
rfds
, 
NULL
, NULL, &
tv
)) <= 0)

2086 
ßsize
 = (
ß‰om
);

2087 
Àn
 = 
	`PA_RecvFrom
(
sk
, &
ª•
, ‘e•), 0, (
sockaddr
*)&
ß‰om
, &
ßsize
);

2088 if(
Àn
 =(
ª•
Ë&& 
	`check_p2pc‹e_hódî
(&ª•.
dh
) &&

2089 
ª•
.
dh
.
˛s
 =
CLS_RESPONSE
 && 
	`P2PCORE_OP
(&ª•.dhË=
OP_SEARCH
)

2091 if(
pszSN
 && *pszSN)

2093 if(
	`°rcmp
(
pszSN
, 
pEnumDev
[
˙t
].
¢
)) ;

2096 
ii
;

2097 
ii
=0; ii<
˙t
; ii++)

2099 if(
	`°rcmp
(
pEnumDev
[
ii
].
¢
, 
ª•
.
e
.sn) == 0) ;

2101 if(
ii
 >
˙t
) {

2102 
	`mem˝y
(&
pEnumDev
[
˙t
], &
ª•
.
e
, (
ENUMCALLEE
));

2103 
˙t
++;

2105 if(
pszSN
) ;

2107 if(
˙t
 >
size
) {

2108 
size
 += 5;

2109 
pEnumDev
 = (
ENUMCALLEE
*)
	`ªÆloc
’EnumDev, (ENUMCALLEE)*
size
);

2116 
	`PA_SockëClo£
(
sk
);

2117 if(
˙t
){

2118 *
µEnumDev
 = 
pEnumDev
;

2120 
	`‰ì
(
pEnumDev
);

2121 *
µEnumDev
 = 
NULL
;

2123 *
pNDev
 = 
˙t
;

2124  
˙t
 > 0;

2125 
	}
}

2127 
	$P2pC‹eGëN©Info
(
P2PCORENATINFO
* 
pNi
)

2129 
uöt32
 
tmp
;

2131 
pNi
->
°unTy≥
 = (
N©Ty≥
)
_°un_bf
.
«t
;

2132 
pNi
->
dñè_u
 = 
_°un_bf
.
dñè
;

2135 
pNi
->
bU≤pIgd
 = 
	`U≤pIgdCpGëN©M≠≥dAddªss
(
	`gëU≤pM≠pögP‹t
(), &
tmp
, (*)&tmp)?1:0;

2137 
	}
}

2139 
	$P2pC‹eEnumC⁄n
(
ENUMCONNCB
 
cb
, *
pU£r
)

2141 
li°_hód
 *
p
, *
q
;

2142 
	`PA_MuãxLock
(
s_muãxC⁄nLi°
);

2143 
	`li°_f‹_óch_ß„
(
p
, 
q
, &
s_P2pC⁄nLi°
)

2145 
P2PCONN
 *
pc⁄n
 = 
	`li°_íåy
(
p
, P2PCONN, 
li°
);

2146 if(!
	`cb
(
pc⁄n
, 
pU£r
)) ;

2148 
	`PA_MuãxU∆ock
(
s_muãxC⁄nLi°
);

2150 
	}
}

	@p2pcore.h

37 #i‚de‡
__p2pc‹e_h__


38 
	#__p2pc‹e_h__


	)

40 #ifde‡
__˝lu•lus


44 
	~"∂©f‹m_ad±.h
"

45 
	~"p2pc⁄°.h
"

46 
	~"medütyp.h
"

49 
P2PCONN
;

50 
P2PCONN
* 
	tHP2PCONN
;

52 
	#NETSTATE_OK
 0

	)

53 
	#NETSTATE_SERVER_DOES_NOT_RESPONSE
 1

	)

54 
	sP2pC‹eCbFuncs
 {

60 
BOOL
 (*
VîifyAuthSåög
)(c⁄° *
auth_°r
);

63 (*
C⁄nCª©ed
)(
HP2PCONN
 
hc⁄n
);

69 (*
C⁄nAb‹ãd
)(
HP2PCONN
 
hc⁄n
);

76 (*
C⁄nFaûed
)(
îr
, *
pU£r
);

81 (*
OnD©a
)(
HP2PCONN
, 
BYTE
 *
pD©a
, 
Àn
);

86 (*
Nëw‹kSèãCh™ged
)(
°©e
);

87 } 
	tP2PCORECBFUNCS
;

89 
	sP2PCORENATINFO
 {

90 
N©Ty≥
 
°unTy≥
, 
°u¡Ty≥
;

91 
USHORT
 
dñè_u
, 
dñè_t
;

92 
BOOL
 
bU≤pIgd
;

93 
BOOL
 
bMu…iN©
;

94 } 
	tP2PCORENATINFO
;

98 
DWORD
 
P2pC‹eGëVîsi⁄
();

105 
P2pC‹eInôülize
(c⁄° *
svr
[], 
n_svr
, c⁄° *
¢
, 
P2PCORECBFUNCS
 *
cbs
);

109 
P2pC‹eTîmö©e
();

113 
P2pC‹eCÀ™up
();

116 
P2pC‹eGëN©Info
(
P2PCORENATINFO
* 
pNi
);

118 
	#TPCGSF_LOCAL_READY
 0x0001

	)

119 
	#TPCGSF_REMOTE_READY
 0x0002

	)

120 
	#TPCGS_EXPIRED
 1

	)

121 
	#TPCGS_INVALID_SN
 2

	)

123 
	sP2pC‹eSèã
 {

124 
ªadySèãs
;

125 
°©e
;

126 } 
	tP2PCORESTATE
;

130 
P2pC‹eGëSèã
(
P2PCORESTATE
 *
çcSèã
);

132 
	sEnumCÆÀe
 {

133 
ù
[16];

134 
√tmask
[16];

135 
¢
[48];

136 
p2µ‹t
;

137 } 
	tENUMCALLEE
, *
	tLPENUMCALLEE
;

150 
BOOL
 
P2pC‹eEnumCÆÀe
(
LPENUMCALLEE
 *
µEnumDev
, 
UINT
 *
pNDev
, c⁄° *
pszSN
);

152 
	s_ègTpcC⁄nInfo
 {

153 
˘
;

154 
sockaddr_ö
 
≥î
;

155 
°©e
;

156 } 
	tP2PCONNINFO
;

157 
P2pC⁄nGëInfo
(
HP2PCONN
 
hc⁄n
, 
P2PCONNINFO
 *
öfo
);

172 
P2pC⁄nInô
(c⁄° *
p2psvr
, c⁄° *
pcsSN
, c⁄° 
uöt8
 *
sidít
 ,

173 c⁄° *
auth_°r
, 
auth_Àn
, *
pIdít
);

191 
P2pC⁄nInôEx
(c⁄° *
p2psvr
, c⁄° *
pcsSN
, c⁄° 
uöt8
 *
sidít
 ,

192 c⁄° *
auth_°r
, 
auth_Àn
, *
pIdít
, 
˘
);

194 
	#P2PCONN_MODE_PUSH
 0

195 
	#P2PCONN_MODE_PULL
 1

196 

	)

199 
P2pC⁄nSëMode
(
HP2PCONN
 
hc⁄n
, 
mode
);

203 
P2pC⁄nGëMode
(
HP2PCONN
 
hc⁄n
);

214 
P2pC⁄nWaôR
(
HP2PCONN
 
hc⁄n
, 
waô_ms
);

218 
P2pC⁄nRecv
(
HP2PCONN
 
hc⁄n
, 
BYTE
 *
pBuff
, 
size
);

226 
P2pC⁄nWaôW
(
HP2PCONN
 
hc⁄n
, 
phy_chno
, 
waô_ms
);

229 
P2pC⁄nSídV
(
HP2PCONN
 
hc⁄n
, 
phy_chno
, 
PA_IOVEC
 *
v
, 
size_v
);

232 
P2pC⁄nSíd
(
HP2PCONN
 
hc⁄n
, 
phy_chno
, *
pD©a
, 
Àn
);

238 
P2pC⁄nSëTimeout
(
HP2PCONN
 
hc⁄n
, 
£c
 );

241 
_P2pC⁄nClo£
(
HP2PCONN
 
pc⁄n
);

244 
P2pC⁄nClo£
(
HP2PCONN
 
hc⁄n
);

247 
P2pC⁄nClo£C⁄n
(
HP2PCONN
 
hC⁄n
);

250 
P2pC⁄nSëU£rD©a
(
HP2PCONN
 
hc⁄n
, *
pU£r
);

253 
P2pC⁄nGëU£rD©a
(
HP2PCONN
 
hc⁄n
, **
µU£r
);

259 
P2pC⁄nSëU£rBuf„r
(
HP2PCONN
 
hc⁄n
, *
pBuff
, 
size
);

265 
P2pC⁄nSëU£rBuf„rOff£t
(
HP2PCONN
 
hc⁄n
, 
off£t
);

268 
BOOL
 (*
	tENUMCONNCB
)(
	tHP2PCONN
 
	thc⁄n
, *
	tpU£r
);

273 
P2pC‹eEnumC⁄n
(
ENUMCONNCB
 
cb
, *
pU£r
);

275 #ifde‡
__˝lu•lus


	@p2pcore_ex.h

1 #i‚de‡
__p2pc‹e_ex_h__


2 
	#__p2pc‹e_ex_h__


	)

4 
	~"p2pba£.h
"

15 
	#OP_QUERY_SERVER
 17

	)

16 
	#QSF_STUN_SERVER
 0x0001

17 
	sp2pc‹e_quîy_£rvî_ªq
 {

	)

18 
p2pc‹e_hódî
 
	mdh
;

19 
uöt8
 
	mÊags
;

20 
uöt8
 
	mn_q
;

21 
uöt8
 
	mª£rved
[2];

22 
	m¢
[0][
LENGTH_OF_SN
];

25 
	#LENGTH_OF_SERVER
 48

	)

26 
	s¢_£rvî_∑ú
 {

27 
	m¢
[
LENGTH_OF_SN
];

28 
	m£rvî
[
LENGTH_OF_SERVER
];

31 
	sp2pc‹e_quîy_£rvî_ª•
 {

32 
p2pc‹e_hódî
 
	mdh
;

33 
uöt8
 
	mn_°un_svr
, 
	mn_ª•
;

34 
uöt8
 
	mª£rved
[2];

	@p2pcore_imp.h

1 #i‚de‡
__p2pc‹e_imp_h__


2 
	#__p2pc‹e_imp_h__


	)

4 
	~"∂©f‹m_ad±.h
"

5 
	~"löux_li°.h
"

8 
	mOSS_CONNECT
 = 1,

9 
	mOSS_CONNECTED


10 } 
	tOUTSOCKSTATE
;

13 
	spunch_tmp
 {

14 *
	mauth_°r
;

15 
	mauth_Àn
;

17 
p2pc‹e_addr
 
	maddrs
[8];

18 
uöt16
 
	mloˇl_p‹t
;

19 
	msock2
;

22 
RUDPSOCKET
 
	mout_sock
;

23 
OUTSOCKSTATE
 
	moss
;

25 
	mn_åy
;

29 
	#TPS_CONNECT
 1

	)

30 
	#TPS_CONNECTED
 2

	)

31 
sockaddr
 
	mp2p_£rv
;

32 
	mçs_°©e
;

33 
	mbß_Àn
;

35 
	mbß
[200];

36 
p2pc‹e_£ssi⁄_öô
 
	m£ss_ªq
;

40 
	#HP2PCONN_TAG
 0x53435054

	)

41 
	sP2PCONN
 {

42 
DWORD
 
	mdwTag
;

43 
li°_hód
 
	mli°
;

45 
uöt8
 
	m£ss_id
[
LENGTH_OF_SESSION_ID
];

46 
c⁄n_bô_fõlds
 
	mbôs
;

47 
punch_tmp
 *
	mtmp
;

48 
	mis_ˇŒî
;

50 
sockaddr_ö
 
	m≥î_addr
;

51 
	m°©e
;

53 
	mmode
;

54 
	msock
;

55 
RUDPSOCKET
 
	mrudp_sock
;

58 
	mœ°_ac˚ss
;

59 
	mtimeout_vÆ
;

62 
BYTE
 *
	mrbuff
;

63 
	mrbuff_size
, 
	mrbuff_off
;

67 *
	mpU£rD©a
;

68 } 
	tP2PCONN
;

	@p2plog.c

1 
	~<°dio.h
>

2 
	~<°d¨g.h
>

3 
	~"∂©f‹m_ad±.h
"

4 
	~"p2∂og.h
"

6 
	$_gëTime
(*
°rTime
)

8 
sf
[16];

9 #ifde‡
WIN32


10 
SYSTEMTIME
 
t
;

11 
	`GëLoˇlTime
(&
t
);

12 
	`•rötf
(
sf
, "%.06f", 
t
.
wMûli£c⁄ds
/1000.0);

13 
	`•rötf
(
°rTime
, "%02d:%02d:%02d.%s", 
t
.
wHour
,Å.
wMöuã
,Å.
wSec⁄d
, 
sf
+2);

15 
timevÆ
 
tv
;

16 
tm
 
_tm
;

17 
	`gëtimeofday
(&
tv
, 
NULL
);

18 
	`loˇ…ime_r
(&
tv
.
tv_£c
, &
_tm
);

19 
	`•rötf
(
sf
, "%.06f", 
tv
.
tv_u£c
/1000000.0);

20 
	`•rötf
(
°rTime
, "%02d:%02d:%02d.%s", 
_tm
.
tm_hour
, _tm.
tm_mö
, _tm.
tm_£c
, 
sf
+2);

22 
	}
}

24 
FILE
 *
	gÂLog
 = 
NULL
;

25 
	$Log
(c⁄° *
who
, c⁄° *
fmt
, ...)

27 
FILE
 *
Â
 = 
ÂLog
?ÂLog:
°dout
;

28 if(
Â
)

30 
°rTime
[30];

31 
va_li°
 
va
;

34 
time_t
 
t
;

35 
	`time
(&
t
);

36 
	`°r·ime
–
°rTime
, (°rTime), "%Y-%m-%d %H:%M:%S", 
	`loˇ…ime
–&
t
) );

38 
	`_gëTime
(
°rTime
);

40 
	`Ârötf
(
Â
, "[%s] [%s] ", 
°rTime
, 
who
);

42 
	`va_°¨t
(
va
, 
fmt
);

43 
	`vÂrötf
(
Â
, 
fmt
, 
va
);

44 
	`va_íd
(
va
);

45 
	`Ârötf
(
Â
, "\n");

47 
	}
}

	@p2plog.h

1 #i‚de‡
__p2∂og_h__


2 
	#__p2∂og_h__


	)

4 #ifde‡
__˝lu•lus


8 
Log
(c⁄° *
who
, c⁄° *
fmt
, ...);

10 #ifde‡
__˝lu•lus


	@p2psess.c

1 
	~"rudp.h
"

3 
	~"p2pc‹e.h
"

4 
	~"p2p£ss_imp.h
"

5 
	~"p2p£ss.h
"

6 
	~"chnbuf.h
"

7 
	~"ùccmd.h
"

8 
	~"√tba£.h
"

9 
	~"löux_li°.h
"

11 
	#MAX_RESP_SIZE
 1400

	)

12 
	#NAL_TYPE_SPS
 7

	)

14 #i‚de‡
mö


15 
	#mö
(
x
,
y
Ë((x)<(y)?(x):(y))

	)

17 #i‚de‡
max


18 
	#max
(
x
,
y
Ë((x)>(y)?(x):(y))

	)

21 #i‚de‡
off£tof


22 
	#off£tof
(
s
,
m
Ë(
size_t
)&(((†*)0)->m)

	)

25 
	sPídögC⁄n
 {

26 
li°_hód
 
	mli°
;

28 
BOOL
 
	mbSync
;

32 
PA_EVENT
 
	mevít
;

33 } 
	msync
;

37 
SESSCREATECB
 
	mcb
;

38 *
	mpU£r
;

39 } 
	masync
;

42 
	mîr
;

43 
HP2PSESS
 
	mh£ss
;

44 } 
	tPENDINGCONN
;

46 
_MedüDemu…ùÀxî
(
P2PSESS
 *
pP2pSess
, 
BOOL
 
bDcsPackë
, * 
pBuff
, 
Àn
);

47 
VERIFYAUTHSTRINGCB
 
	gs_AuthCb
;

48 
PA_MUTEX
 
	gs_PídögC⁄nMuãx
;

49 
LIST_HEAD
(
s_PídögC⁄nLi°
);

51 
PA_EVENT
 
	gs_Ac˚±SessEvít
;

52 
LIST_HEAD
(
s_Ac˚±edSessLi°
);

53 
PA_SPIN
 
	gs_•öTid
;

55 
BOOL
 
	$_VîifyAuthSåög
(c⁄° *
auth_°r
)

57 if(
s_AuthCb
Ë 
	`s_AuthCb
(
auth_°r
);

58  
TRUE
;

59 
	}
}

61 
P2PSESS
 *
	$ÆlocP2pSess
()

63 
P2PSESS
 *
p£ss
 = 
	`ˇŒoc
((P2PSESS), 1);

64 
	`INIT_LIST_HEAD
(&
p£ss
->
£ss_li°
);

65 
p£ss
->
rBuff
 = (
BYTE
*)
	`mÆloc
(1500);

66  
p£ss
;

67 
	}
}

69 
	$öô_p2pcmd_hódî
(
p2pcmd_hódî
* 
p
, 
›
, 
˛s
, 
°©us
, 
Àn
, 
uöt32
 
å™s_id
)

71 
p
->
èg
 = 
P2PCMD_TAG
;

72 
	`P2PCMD_SET_STATUS
(
p
, 
°©us
);

73 
	`P2PCMD_SET_OP
(
p
, 
›
);

74 
	`P2PCMD_SET_DATA_LEN
(
p
, 
Àn
);

75 
p
->
˛s
 = cls;

76 
p
->
íd
 = 1;

77 
	`P2PCMD_SET_TID
(
p
, 
å™s_id
);

78 
	}
}

80 
	$_˛ónSess
(
P2PSESS
 *
pP2pSess
)

82 
i
;

84 
	`‰ì
(
pP2pSess
->
rBuff
);

86 
i
=0; i<
MAX_MEDIA_CHN
; i++)

87 if(
pP2pSess
->
imch
[
i
].
pMedüChn
)

88 
	`ChnBuffC™˚l
(
pP2pSess
->
imch
[
i
].
pMedüChn
->
pChnBuff
);

90 
i
=0; i<
MAX_CMD_CHN
; i++)

91 if(
pP2pSess
->
icch
[
i
].
pCmdChn
)

92 
	`ChnBuffC™˚l
(
pP2pSess
->
icch
[
i
].
pCmdChn
);

94 
i
=0; i<
MAX_MEDIA_CHN
; i++)

96 if(
pP2pSess
->
imch
[
i
].
pMedüChn
)

98 
	`MedüChnDe°roy
(
pP2pSess
->
imch
[
i
].
pMedüChn
);

99 
pP2pSess
->
imch
[
i
].
pMedüChn
 = 
NULL
;

103 
i
=0; i<
MAX_CMD_CHN
; i++)

105 if(
pP2pSess
->
icch
[
i
].
pCmdChn
)

107 
	`ChnBuffDe°roy
(
pP2pSess
->
icch
[
i
].
pCmdChn
);

108 
pP2pSess
->
icch
[
i
].
pCmdChn
 = 
NULL
;

113 
i
=0; i<
MAX_MEDIA_CHN
; i++)

114 
	`PA_RWLockUnöô
(
pP2pSess
->
imch
[
i
].
rwlock
);

115 
i
=0; i<
MAX_CMD_CHN
; i++)

116 
	`PA_RWLockUnöô
(
pP2pSess
->
icch
[
i
].
rwlock
);

118 
pP2pSess
->
èg
 = 0;

119 
	}
}

122 
	$_C⁄nCª©ed
(
HP2PCONN
 
hc⁄n
)

124 
P2PSESS
 *
p£ss
 = 
	`ÆlocP2pSess
();

126 
p£ss
->
hc⁄n
 = hconn;

127 
	`P2pC⁄nSëU£rD©a
(
hc⁄n
, 
p£ss
);

128 
	`P2pC⁄nSëU£rBuf„r
(
hc⁄n
, 
p£ss
->
rBuff
, (psess->rBuff));

130 *
pU£r
;

131 
	`P2pC⁄nGëU£rD©a
(
hc⁄n
, &
pU£r
);

132 if(
pU£r
)

134 
	`PA_MuãxLock
(
s_PídögC⁄nMuãx
);

135 
li°_hód
 *
p
;

136 
	`li°_f‹_óch
(
p
, &
s_PídögC⁄nLi°
)

138 
PENDINGCONN
 *
ôem
 = 
	`li°_íåy
(
p
, PENDINGCONN, 
li°
);

139 if(
ôem
 =
pU£r
)

141 
ôem
->
h£ss
 = (
HP2PSESS
)
p£ss
;

142 
ôem
->
îr
 = 0;

143 if(
ôem
->
bSync
)

144 
	`PA_EvítSë
(
ôem
->
sync
.
evít
);

147 if(
ôem
->
async
.
cb
)

148 
ôem
->
async
.
	`cb
(
h£ss
, iãm->async.
pU£r
);

149 
	`li°_dñ
(&
ôem
->
li°
);

150 
	`‰ì
(
ôem
);

155 
	`PA_MuãxU∆ock
(
s_PídögC⁄nMuãx
);

159 
	`PA_MuãxLock
(
s_PídögC⁄nMuãx
);

160 
	`li°_add_èû
(&
p£ss
->
£ss_li°
, &
s_Ac˚±edSessLi°
);

161 
	`PA_MuãxU∆ock
(
s_PídögC⁄nMuãx
);

162 
	`PA_EvítSë
(
s_Ac˚±SessEvít
);

166 
	}
}

168 
	$_C⁄nAb‹ãd
(
HP2PCONN
 
hc⁄n
)

170 
P2PSESS
 *
p£ss
;

171 if(
	`P2pC⁄nGëU£rD©a
(
hc⁄n
, (**)&
p£ss
) != 0 || !psess) ;

172 
	`PA_MuãxLock
(
s_PídögC⁄nMuãx
);

173 
li°_hód
 *
p
;

174 
	`li°_f‹_óch
(
p
, &
s_Ac˚±edSessLi°
)

176 
P2PSESS
 *
ôem
 = 
	`li°_íåy
(
p
, P2PSESS, 
£ss_li°
);

177 if(
ôem
 =
p£ss
)

179 
	`li°_dñ
(&
p£ss
->
£ss_li°
);

183 
	`PA_MuãxU∆ock
(
s_PídögC⁄nMuãx
);

185 
	`_˛ónSess
(
p£ss
);

186 
	`‰ì
(
p£ss
);

187 
	}
}

189 
	$_C⁄nFaûed
(
îr
, *
pU£r
)

191 
PENDINGCONN
 *
≥nd
 = (PENDINGCONN*)
pU£r
;

193 
	`PA_MuãxLock
(
s_PídögC⁄nMuãx
);

194 
li°_hód
 *
p
;

195 
	`li°_f‹_óch
(
p
, &
s_PídögC⁄nLi°
)

197 
PENDINGCONN
 *
ôem
 = 
	`li°_íåy
(
p
, PENDINGCONN, 
li°
);

198 if(
ôem
 =
≥nd
)

200 
ôem
->
îr
 =Érr;

201 if(
ôem
->
bSync
Ë
	`PA_EvítSë
(ôem->
sync
.
evít
);

204 if(
ôem
->
async
.
cb
Ëôem->async.
	`cb
(
NULL
, iãm->async.
pU£r
);

205 
	`li°_dñ
(&
ôem
->
li°
);

206 
	`‰ì
(
ôem
);

211 
	`PA_MuãxU∆ock
(
s_PídögC⁄nMuãx
);

212 
	}
}

214 
	$_OnD©a
(
HP2PCONN
 
hc⁄n
, 
BYTE
 *
pD©a
, 
Àn
)

216 
P2PSESS
 *
p£ss
;

217 if(
	`P2pC⁄nGëU£rD©a
(
hc⁄n
, (**)&
p£ss
) != 0 || !psess) ;

219 
nExi°edD©a
;

220 
P2PMEDIAHEADER
 *
pMdHdr
;

221 
p2pcmd_hódî
 *
pDh
;

223 
pMdHdr
 = (
P2PMEDIAHEADER
*)
p£ss
->
rBuff
;

224 
pDh
 = (
p2pcmd_hódî
*)
pMdHdr
;

225 
nExi°edD©a
 = 
p£ss
->
nByãsInBuff
 + 
Àn
;

226 if–(
nExi°edD©a
 < 
	`mö
–(
P2PMEDIAHEADER
), (
p2pcmd_hódî
) )) ||

227 (
pMdHdr
->
syncByã1
 =0xAA && ( 
nExi°edD©a
 < (
P2PMEDIAHEADER
Ë+ 
	`¡ohs
’MdHdr->
Àn
) )) ||

228 (
	`check_p2pcmd_hódî
(
pDh
Ë&& 
nExi°edD©a
 < (
p2pcmd_hódî
Ë+ 
	`¡ohl
’Dh->
Àngth
)) )

230 
p£ss
->
nByãsInBuff
 = 
nExi°edD©a
;

231 
	`P2pC⁄nSëU£rBuf„rOff£t
(
hc⁄n
, 
nExi°edD©a
);

237 
UINT
 
∑ckLí
;

238 
BOOL
 
bDcsPackë
 = 
FALSE
;

239 if–
pMdHdr
->
syncByã1
 =0xAA &&ÖMdHdr->
syncByã2
 == 0x55 )

241 
∑ckLí
 = (
P2PMEDIAHEADER
Ë+ 
	`¡ohs
(
pMdHdr
->
Àn
);

243 if(
	`check_p2pcmd_hódî
(
pDh
))

245 
bDcsPackë
 = 
TRUE
;

246 
∑ckLí
 = (
p2pcmd_hódî
Ë+ 
	`¡ohl
(
pDh
->
Àngth
);

250 *
p
, *
ª¨
;

252 
p
 = (*)
pMdHdr
;

253 
ª¨
 = 
p
 + 
nExi°edD©a
 - 3;

254 ; 
p
 < 
ª¨
;Ö++)

256 if–(*
p
 =0xAA && *’+1Ë=0x55Ë|| 
	`check_p2pcmd_hódî
((c⁄° 
p2pcmd_hódî
*)p) )

260 
nExi°edD©a
 -(
p
 - (*)
pMdHdr
);

261 if(
nExi°edD©a
 <= 0) {ÇExistedData = 0; ; }

262 #ifde‡
__FORCE_ALIGNMENT__


264 
	`mem˝y
(
p£ss
->
rBuff
,Ö£ss->rBuff+
∑ckLí
, 
nExi°edD©a
);

266 
pMdHdr
 = (
P2PMEDIAHEADER
*)
p
;

268 
pDh
 = (
p2pcmd_hódî
*)
pMdHdr
;

270 
check_∑πül_∑ck
;

274 if(
bDcsPackë
 && 
pDh
->
›
 =
OP_HEART_BEAT
)

278 
	`_MedüDemu…ùÀxî
(
p£ss
, 
bDcsPackë
, (*)
pMdHdr
, 
∑ckLí
);

281 
nExi°edD©a
 -
∑ckLí
;

282 #ifde‡
__FORCE_ALIGNMENT__


284 
	`mem˝y
(
p£ss
->
rBuff
,Ö£ss->rBuff+
∑ckLí
, 
nExi°edD©a
);

286 
pMdHdr
 = (
P2PMEDIAHEADER
*)((*ÌMdHd∏+ 
∑ckLí
);

288 
pDh
 = (
p2pcmd_hódî
*)
pMdHdr
;

292 
check_∑πül_∑ck
:

293 if–
nExi°edD©a
 < 
	`mö
–(
P2PMEDIAHEADER
), (
p2pcmd_hódî
) ) ||

294 (
pMdHdr
->
syncByã1
 =0xAA && (
nExi°edD©a
 < (
P2PMEDIAHEADER
Ë+ 
	`¡ohs
’MdHdr->
Àn
))) ||

295 (
	`check_p2pcmd_hódî
(
pDh
Ë&& ( 
nExi°edD©a
 < (
p2pcmd_hódî
Ë+ 
	`¡ohl
’Dh->
Àngth
) )) )

297 
	`mem˝y
(
p£ss
->
rBuff
, 
pMdHdr
, 
nExi°edD©a
);

298 
p£ss
->
nByãsInBuff
 = 
nExi°edD©a
;

299 
	`P2pC⁄nSëU£rBuf„rOff£t
(
hc⁄n
, 
nExi°edD©a
);

303 
	}
}

305 
P2pC‹eCbFuncs
 
	g_p2pc‹e_cb
 = {

306 .
VîifyAuthSåög
 = 
_VîifyAuthSåög
,

307 .
	gC⁄nCª©ed
 = 
_C⁄nCª©ed
,

308 .
	gC⁄nAb‹ãd
 = 
_C⁄nAb‹ãd
,

309 .
	gC⁄nFaûed
 = 
_C⁄nFaûed
,

310 .
	gOnD©a
 = 
_OnD©a


314 
	$P2pSessGlobÆInôülize
(c⁄° *
£rvî1
, c⁄° *
£rvî2
, c⁄° *
¢
, 
VERIFYAUTHSTRINGCB
 
cb
)

316 c⁄° *
svrs
[] = { 
£rvî1
, 
£rvî2
 };

317 
s_AuthCb
 = 
cb
;

318 
	`PA_SpöInô
(
s_•öTid
);

319 
	`PA_MuãxInô
(
s_PídögC⁄nMuãx
);

320 
	`PA_EvítInô
(
s_Ac˚±SessEvít
);

321  
	`P2pC‹eInôülize
(
svrs
, 2, 
¢
, &
_p2pc‹e_cb
);

322 
	}
}

324 
	$P2pSessGlobÆUnöôülize
()

326 
	`P2pC‹eTîmö©e
();

327 
	`P2pC‹eCÀ™up
();

328 
	`PA_MuãxUnöô
(
s_PídögC⁄nMuãx
);

329 
	`PA_EvítUnöô
(
s_Ac˚±SessEvít
);

330 
	`PA_SpöUnöô
(
s_•öTid
);

331 
	}
}

333 
	$_MedüDemu…ùÀxî
(
P2PSESS
 *
pP2pSess
, 
BOOL
 
bDcsPackë
, * 
pBuff
, 
Àn
)

336 if(
bDcsPackë
)

338 
p2pcmd_hódî
 *
pdh
 = (p2pcmd_hódî*)
pBuff
;

339 
	`P2PCMD_OP
(
pdh
))

341 
OP_END_SESSION
:

342 
	`dbg_msg
("close session gracefully.\n");

343 
	`_P2pC⁄nClo£
(
pP2pSess
->
hc⁄n
);

346 
OP_HEART_BEAT
:

347 if(
pdh
->
˛s
 =
CLS_REQUEST
)

348 
	`P2pSessSídRe•⁄£
((
HP2PSESS
)
pP2pSess
, 0, 
OP_HEART_BEAT
, 
NULL
, 0, 
	`P2PCMD_TID
(
pdh
));

351 
OP_EVENT
:

352 if(
pP2pSess
->
OnEvítCB
)

354 *
p
 = (*)(
pdh
+1);

355 
pP2pSess
->
	`OnEvítCB
(*
p
, (
BYTE
*)’+1), 
Àn
 - (
p2pcmd_hódî
Ë- 4,ÖP2pSess->
pU£rD©a
);

360 if(
pdh
->
˛s
 =
CLS_RESPONSE
)

363 
li°_hód
 *
p
;

364 
	`PA_MuãxLock
(
pP2pSess
->
mutx_cbq
);

365 
	`li°_f‹_óch
(
p
, &
pP2pSess
->
cb_li°
)

367 
P2PCBITEM
 *
ôem
 = 
	`li°_íåy
(
p
, P2PCBITEM, 
cb_li°
);

368 if(
ôem
->
tid
 =
	`P2PCMD_TID
(
pdh
))

370 
	`li°_dñ
(&
ôem
->
cb_li°
);

371 
	`PA_MuãxU∆ock
(
pP2pSess
->
mutx_cbq
);

372 
ôem
->
	`cb
(
	`P2PCMD_STATUS
(
pdh
),Ödh->
íd
,Ödh + (
p2pcmd_hódî
), 
	`P2PCMD_DATA_LEN
’dh), iãm->
pU£rD©a
);

373 if(
pdh
->
íd
Ë
	`‰ì
(
ôem
);

375 
	`PA_MuãxLock
(
pP2pSess
->
mutx_cbq
);

376 
	`li°_add_èû
(&
ôem
->
cb_li°
, &
pP2pSess
->cb_list);

377 
	`PA_MuãxLock
(
pP2pSess
->
mutx_cbq
);

382 
	`PA_MuãxU∆ock
(
pP2pSess
->
mutx_cbq
);

386 if(
pdh
->
chno
 < 
MAX_CMD_CHN
)

388 
	`PA_RWLockLockR
(
pP2pSess
->
icch
[
pdh
->
chno
].
rwlock
);

389 if(
pP2pSess
->
icch
[
pdh
->
chno
].
pCmdChn
)

391 
	`CmdChnBuffWrôe
(
pP2pSess
->
icch
[
pdh
->
chno
].
pCmdChn
,Ödh->
°©us
, 
	`P2PCMD_TID
’dh),Ödh->
íd
,

392 
pBuff
 + (
p2pcmd_hódî
),

393 
Àn
 - (
p2pcmd_hódî
));

395 
	`PA_RWLockU∆ock
(
pP2pSess
->
icch
[
pdh
->
chno
].
rwlock
);

401 
BYTE
 *
pD©a
;

402 
UINT
 
d©aLí
, 
ts
, 
±
;

403 
P2PMEDIAHEADER
 *
pHdr
;

404 
nSQ
;

405 
MEDIACHN
 *
pMdChn
;

407 
pHdr
 = (
P2PMEDIAHEADER
*)
pBuff
;

408 if(
pHdr
->
chno
 >
MAX_MEDIA_CHN
) ;

410 
	`PA_RWLockLockR
(
pP2pSess
->
imch
[
pHdr
->
chno
].
rwlock
);

411 if(!(
pMdChn
 = 
pP2pSess
->
imch
[
pHdr
->
chno
].
pMedüChn
))

412 
out
;

414 
pD©a
 = 
pBuff
 + (
P2PMEDIAHEADER
);

415 
d©aLí
 = 
Àn
 - (
P2PMEDIAHEADER
);

416 
ts
 = 
	`¡ohl
(
pHdr
->ts);

417 
±
 = 
pHdr
->pt;

418 
nSQ
 = 
	`¡ohs
(
pHdr
->
£qno
);

421 i‡((
pMdChn
->
u16SN
 + 1 !
nSQ
) && (pMdChn->u16SN != 0) && (0 !=ÇSQ))

423 
pMdChn
->
bWaôIDR
 = 
TRUE
;

424 
	`ChnBuffDisˇrdCuºítFøme
(
pMdChn
->
pChnBuff
);

425 
pMdChn
->
pFømeHódîWrôãn
 = 
FALSE
;

427 
pMdChn
->
u16SN
 = 
nSQ
;

429 if(
pHdr
->
key‰ame
){

430 
pMdChn
->
bWaôIDR
 = 
FALSE
;

432 if(
pMdChn
->
bWaôIDR
Ë
out
;

436 if(
pMdChn
->
pFømeHódîWrôãn
 == 0)

438 
	`MedüChnWrôeHódî
(
pMdChn
, 
±
, 
ts
, 
pHdr
->
key‰ame
);

439 
pMdChn
->
pFømeHódîWrôãn
 = 
TRUE
;

443 
	`ChnBuffWrôeFøgmít
(
pMdChn
->
pChnBuff
, 
pD©a
, 
d©aLí
, 
pHdr
->
íd
);

444 
pMdChn
->
pFømeHódîWrôãn
 = 
pHdr
->
íd
 ? 
FALSE
 : 
TRUE
;

459 
out
:

460 
	`PA_RWLockU∆ock
(
pP2pSess
->
imch
[
pHdr
->
chno
].
rwlock
);

462 
	}
}

465 
HP2PSESS
 
	$P2pSessFromC⁄n
(
HP2PCONN
 
hc⁄n
)

467 
P2PSESS
 *
pP2pSess
;

469 
pP2pSess
 = (
P2PSESS
*)
	`ˇŒoc
((P2PSESS), 1);

470 
pP2pSess
->
èg
 = 
P2PSESS_TAG
;

472 
i
;

473 
i
=0; i<
MAX_CMD_CHN
; i++)

474 
	`PA_RWLockInô
(
pP2pSess
->
icch
[
i
].
rwlock
);

475 
i
=0; i<
MAX_MEDIA_CHN
; i++)

476 
	`PA_RWLockInô
(
pP2pSess
->
imch
[
i
].
rwlock
);

477 
pP2pSess
->
icch
[0].
pCmdChn
 = 
	`ChnBuffCª©e
(2*1500, 1500);

479  (
HP2PSESS
)
pP2pSess
;

480 
	}
}

482 
	$P2pSessCª©e
(c⁄° *
p2psvr
, c⁄° *
id
, c⁄° 
uöt8
 *
sidít
, c⁄° *
auth_°r
, 
HP2PSESS
 *
h£ss
)

484 
îr
;

485 
PENDINGCONN
 
≥nd
;

487 
	`INIT_LIST_HEAD
(&
≥nd
.
li°
);

488 
	`PA_EvítInô
(
≥nd
.
sync
.
evít
);

489 
≥nd
.
bSync
 = 
TRUE
;

490 
≥nd
.
îr
 = 0;

492 if–(
îr
 = 
	`P2pC⁄nInô
(
p2psvr
, 
id
, 
sidít
, 
auth_°r
,áuth_°r?
	`°æí
◊uth_°r):0, &
≥nd
)) == 0)

494 
	`PA_MuãxLock
(
s_PídögC⁄nMuãx
);

495 
	`li°_add_èû
(&
≥nd
.
li°
, &
s_PídögC⁄nLi°
);

496 
	`PA_MuãxU∆ock
(
s_PídögC⁄nMuãx
);

498 
	`PA_EvítWaô
(
≥nd
.
sync
.
evít
);

500 
	`PA_MuãxLock
(
s_PídögC⁄nMuãx
);

501 
	`li°_dñ
(&
≥nd
.
li°
);

502 
	`PA_MuãxU∆ock
(
s_PídögC⁄nMuãx
);

504 if(
≥nd
.
îr
 == 0)

506 *
h£ss
 = 
≥nd
.hsess;

507 
îr
 = 0;

510 
îr
 = 
≥nd
.err;

512 
	`PA_EvítUnöô
(
≥nd
.
sync
.
evít
);

513  
îr
;

514 
	}
}

516 
	$P2pSessCª©eAsync
(c⁄° *
p2psvr
, c⁄° *
id
, c⁄° 
uöt8
 *
sidít
,

517 c⁄° *
auth_°r
, 
SESSCREATECB
 
cb
, *
pU£r
)

519 
PENDINGCONN
 *
pPídC⁄n
 = (PENDINGCONN*)
	`ˇŒoc
((PENDINGCONN), 1);

520 
pPídC⁄n
->
bSync
 = 
FALSE
;

521 
pPídC⁄n
->
async
.
cb
 = cb;

522 
pPídC⁄n
->
async
.
pU£r
 =ÖUser;

523  
	`P2pC⁄nInô
(
p2psvr
, 
id
, 
sidít
, 
auth_°r
,áuth_°r?
	`°æí
◊uth_°r):0, 
pPídC⁄n
);

524 
	}
}

526 
	$P2pSessAc˚±
(
HP2PSESS
 *
h£ss
, 
UINT
 
waô_ms
)

528 if(
	`li°_em±y
(&
s_Ac˚±edSessLi°
))

529 if(!
	`PA_EvítWaôTimed
(
s_Ac˚±SessEvít
, 
waô_ms
))

530  
P2PE_TIMEOUTED
;

532 
P2PSESS
 *
p£ss
;

533 
	`PA_MuãxLock
(
s_PídögC⁄nMuãx
);

534 
p£ss
 = 
	`li°_íåy
(
s_Ac˚±edSessLi°
.
√xt
, 
P2PSESS
, 
£ss_li°
);

535 
	`li°_dñ
(
s_Ac˚±edSessLi°
.
√xt
);

536 
	`PA_MuãxU∆ock
(
s_PídögC⁄nMuãx
);

537 
	`INIT_LIST_HEAD
(&
p£ss
->
£ss_li°
);

539 
	}
}

541 
BOOL
 
	$P2pSessO≥nCh™√l
(
HP2PSESS
 
hP2pSess
, 
P2PCHANNEL
 
ty≥
, 
chno
, 
UINT
 
size
, UINT 
nSa„S∑˚
)

543 
P2PSESS
 *
pP2pSess
 = (P2PSESS*)
hP2pSess
;

544 if(
pP2pSess
->
èg
 !
P2PSESS_TAG
Ë 
FALSE
;

547 if(
ty≥
 =
P2P_CMD_CHANNEL
)

549 if(
chno
 >
MAX_CMD_CHN
Ë 
FALSE
;

550 
	`PA_RWLockLockW
(
pP2pSess
->
icch
[
chno
].
rwlock
);

551 if(!
pP2pSess
->
icch
[
chno
].
pCmdChn
)

552 
pP2pSess
->
icch
[
chno
].
pCmdChn
 = 
	`ChnBuffCª©e
(4*1500, 1500);

553 
	`PA_RWLockU∆ock
(
pP2pSess
->
icch
[
chno
].
rwlock
);

554  
TRUE
;

556 if(
ty≥
 =
P2P_MEDIA_CHANNEL
)

558 if(
chno
 >
MAX_MEDIA_CHN
Ë 
FALSE
;

559 
	`PA_RWLockLockW
(
pP2pSess
->
imch
[
chno
].
rwlock
);

560 if(!
pP2pSess
->
imch
[
chno
].
pMedüChn
)

561 
pP2pSess
->
imch
[
chno
].
pMedüChn
 = 
	`MedüChnCª©e
(
size
, 
nSa„S∑˚
);

562 
	`PA_RWLockU∆ock
(
pP2pSess
->
imch
[
chno
].
rwlock
);

563  
TRUE
;

565  
FALSE
;

566 
	}
}

567 
BOOL
 
	$P2pSessClo£Ch™√l
(
HP2PSESS
 
hP2pSess
, 
P2PCHANNEL
 
ty≥
, 
chno
)

569 
P2PSESS
 *
pP2pSess
 = (P2PSESS*)
hP2pSess
;

570 if(
pP2pSess
->
èg
 !
P2PSESS_TAG
Ë 
FALSE
;

572 if(
ty≥
 =
P2P_CMD_CHANNEL
)

574 if(
chno
 >
MAX_CMD_CHN
Ë 
FALSE
;

575 if(
pP2pSess
->
icch
[
chno
].
pCmdChn
)

577 
	`ChnBuffC™˚l
(
pP2pSess
->
icch
[
chno
].
pCmdChn
);

579 
	`PA_RWLockLockW
(
pP2pSess
->
icch
[
chno
].
rwlock
);

580 
	`ChnBuffDe°roy
(
pP2pSess
->
icch
[
chno
].
pCmdChn
);

581 
pP2pSess
->
icch
[
chno
].
pCmdChn
 = 
NULL
;

582 
	`PA_RWLockU∆ock
(
pP2pSess
->
icch
[
chno
].
rwlock
);

584  
TRUE
;

585 }if(
ty≥
 =
P2P_MEDIA_CHANNEL
)

587 if(
chno
 >
MAX_MEDIA_CHN
Ë 
FALSE
;

588 if(
pP2pSess
->
imch
[
chno
].
pMedüChn
)

590 
	`ChnBuffC™˚l
(
pP2pSess
->
imch
[
chno
].
pMedüChn
->
pChnBuff
);

592 
	`PA_RWLockLockW
(
pP2pSess
->
imch
[
chno
].
rwlock
);

593 
	`MedüChnDe°roy
(
pP2pSess
->
imch
[
chno
].
pMedüChn
);

594 
pP2pSess
->
imch
[
chno
].
pMedüChn
 = 
NULL
;

595 
	`PA_RWLockU∆ock
(
pP2pSess
->
imch
[
chno
].
rwlock
);

597  
TRUE
;

599  
FALSE
;

600 
	}
}

603 
	$P2pSessClo£
(
HP2PSESS
 
hP2pSess
)

605 
P2PSESS
 *
pP2pSess
 = (P2PSESS*)
hP2pSess
;

607 if(
pP2pSess
->
èg
 !
P2PSESS_TAG
)

608  -
P2PSE_INVALID_SESSION_OBJECT
;

610 
	`P2pSessSídReque°
(
hP2pSess
, 0, 
OP_END_SESSION
, 
NULL
, 0);

612 
	`P2pC⁄nClo£
(
pP2pSess
->
hc⁄n
);

614 
pP2pSess
->
èg
 = 0;

615 
	`‰ì
(
pP2pSess
);

618 
	}
}

621 
	$P2pSessGëInfo
(
HP2PSESS
 
hP2pSess
, 
P2PSESSINFO
 *
pInfo
)

623 
P2PSESS
 *
pP2pSess
 = (P2PSESS*)
hP2pSess
;

624 if(
pP2pSess
->
èg
 !
P2PSESS_TAG
Ë -
P2PSE_INVALID_SESSION_OBJECT
;

626 if–(
pInfo
->
°©e
 = (
P2PSESSSTATE
)
pP2pSess
->°©eË=
TPCS_RUNNING
 )

628 
pInfo
->
˘
 = 
pP2pSess
->
c⁄nTy≥
;

629 
	`mem˝y
(&
pInfo
->
≥î_addr
, &
pP2pSess
->≥î_addr, (
sockaddr
));

632 
	}
}

633 
	$P2pSessGëSèã
(
HP2PSESS
 
hP2pSess
)

635 
P2PSESS
 *
pP2pSess
 = (P2PSESS*)
hP2pSess
;

636 if(
pP2pSess
->
èg
 !
P2PSESS_TAG
Ë -
P2PSE_INVALID_SESSION_OBJECT
;

637  (
P2PSESSSTATE
)
pP2pSess
->
°©e
;

638 
	}
}

641 
	$P2pSessSëU£rD©a
(
HP2PSESS
 
hP2pSess
, *
pU£r
)

643 
P2PSESS
 *
pP2pSess
 = (P2PSESS*)
hP2pSess
;

644 if(
pP2pSess
->
èg
 !
P2PSESS_TAG
Ë -
P2PSE_INVALID_SESSION_OBJECT
;

645 
pP2pSess
->
pU£rD©a
 = 
pU£r
;

647 
	}
}

648 *
	$P2pSessGëU£rD©a
(
HP2PSESS
 
hP2pSess
)

650 
P2PSESS
 *
pP2pSess
 = (P2PSESS*)
hP2pSess
;

651 if(
pP2pSess
->
èg
 !
P2PSESS_TAG
Ë 
NULL
;

652  
pP2pSess
->
pU£rD©a
;

653 
	}
}

655 
	$P2pSessSëEvítCÆlback
(
HP2PSESS
 
hP2pSess
, 
ONEVENT_CB
 
cb
, *
pD©a
)

657 
P2PSESS
 *
pP2pSess
 = (P2PSESS*)
hP2pSess
;

659 if(
pP2pSess
->
èg
 =
P2PSESS_TAG
)

661 
pP2pSess
->
OnEvítCB
 = 
cb
;

662 
pP2pSess
->
pU£rD©a
 = 
pD©a
;

664 
	}
}

667 
	$_£ndPackë
(
P2PSESS
 *
p£ss
, c⁄° 
p2pcmd_hódî
 *
pdh
, c⁄° *
pD©a
, 
nD©aLí
)

669 
PA_IOVEC
 
v
[2];

671 
	`PA_IoVecSëPå
(&
v
[0], &
pdh
);

672 
	`PA_IoVecSëLí
(&
v
[0], (
p2pcmd_hódî
));

673 
	`PA_IoVecSëPå
(&
v
[1], 
pD©a
);

674 
	`PA_IoVecSëLí
(&
v
[1], 
nD©aLí
);

676  
	`P2pC⁄nSídV
(
p£ss
->
hc⁄n
, 0, 
v
, 2);

677 
	}
}

678 
	$_£ndRe•
(
P2PSESS
 *
p£ss
, 
chno
, 
cmd
, c⁄° *
pD©a
, 
UINT
 
nD©aLí
, 
uöt8
 
°©us
, 
uöt32
 
å™s_id
, 
isLa°
)

680 
p2pcmd_hódî
 
dh
;

682 
	`öô_p2pcmd_hódî
(&
dh
, 
cmd
, 
CLS_RESPONSE
, 
°©us
, 
nD©aLí
, 
å™s_id
);

683 
dh
.
chno
 = chno;

684 
dh
.
íd
 = 
isLa°
?1:0;

685  
	`_£ndPackë
(
p£ss
, &
dh
, 
pD©a
, 
nD©aLí
);

686 
	}
}

688 
	$P2pSessSídEvít
(
HP2PSESS
 
h£ss
, c⁄° *
pD©a
, 
UINT
 
nD©aLí
)

690 
p2pcmd_hódî
 
dh
;

692 
P2PSESS
 *
p£ss
 = (P2PSESS*)
h£ss
;

693 if(
p£ss
->
èg
 !
P2PSESS_TAG
Ë 
P2PSE_INVALID_SESSION_OBJECT
;

695 
	`öô_p2pcmd_hódî
(&
dh
, 
OP_EVENT
, 
CLS_REQUEST
, 0, 
nD©aLí
, 0);

696 
dh
.
chno
 = 0;

697 
dh
.
íd
 = 1;

698  
	`_£ndPackë
(
p£ss
, &
dh
, 
pD©a
, 
nD©aLí
);

699 
	}
}

701 
	$P2pSessSídRe•⁄£Eº‹
(
HP2PSESS
 
h£ss
, 
chno
, 
cmd
, 
uöt8
 
°©us
, 
uöt32
 
å™s_id
)

703  
	`_£ndRe•
((
P2PSESS
*)
h£ss
, 
chno
, 
cmd
, 
NULL
, 0, 
°©us
, 
å™s_id
, 1);

704 
	}
}

706 
	$P2pSessSídRe•⁄£
(
HP2PSESS
 
h£ss
, 
chno
, 
cmd
, c⁄° *
pD©a
, 
UINT
 
nD©aLí
, 
uöt32
 
å™s_id
)

708 
P2PSESS
 *
p£ss
 = (P2PSESS*)
h£ss
;

709 if(
p£ss
->
èg
 !
P2PSESS_TAG
Ë 
P2PSE_INVALID_SESSION_OBJECT
;

711 *
±r
 = (*)
pD©a
;

712 
æt
 = 0;

714 
n
 = 
nD©aLí
 > 1400 ? 1400 :ÇDataLen;

715 
nD©aLí
 -
n
;

716 if–(
æt
 = 
	`_£ndRe•
(
p£ss
, 
chno
, 
cmd
, 
±r
, 
n
, 0, 
å™s_id
, 
nD©aLí
?0:1)) )

718 
±r
 +
n
;

719 } 
nD©aLí
);

720  
æt
;

721 
	}
}

724 
	$P2pSessSídMedüFømeV
(
HP2PSESS
 
h£ss
, 
chno
, 
MEDIATYPE
 
mt
, 
DWORD
 
time°amp
, 
BOOL
 
isKeyFøme
,

725 
PA_IOVEC
 *
vec
, 
UINT
 
size
, UINT 
maxWaôMs
)

727 
P2PSESS
 *
p£ss
 = (P2PSESS*)
h£ss
;

728 if(
p£ss
->
èg
 !
P2PSESS_TAG
Ë 
P2PSE_INVALID_SESSION_OBJECT
;

730 
P2PMEDIAHEADER
 
mhdr
;

731 
UINT
 
i
, 
tŸÆ
;

732 
PA_IOVEC
 
v
[2];

734 if(
isKeyFøme
Ë
p£ss
->
omch
[
chno
].
°©e
 = 
OMCHN_STATE_SENDING
;

735 if(
p£ss
->
omch
[
chno
].
°©e
 !
OMCHN_STATE_SENDING
)

738 
mhdr
.
syncByã1
 = 0xAA;

739 
mhdr
.
syncByã2
 = 0x55;

740 
mhdr
.
key‰ame
 = 
isKeyFøme
?1:0;

741 
mhdr
.
chno
 = chno;

742 
mhdr
.
ts
 = 
	`ht⁄l
(
time°amp
);

743 
mhdr
.
±
 = 
mt
;

745 
	`PA_IoVecSëPå
(&
v
[0], &
mhdr
);

746 
	`PA_IoVecSëLí
(&
v
[0], (
mhdr
));

748 
i
=
tŸÆ
=0; i<
size
; i++ËtŸÆ +
	`PA_IoVecGëLí
(&
vec
[i]);

749 
i
=0; i<
size
; i++)

751 
Àn
 = 
	`PA_IoVecGëLí
(&
vec
[
i
]);

752 c⁄° 
BYTE
 *
pD©a
 = (c⁄° BYTE*)
	`PA_IoVecGëPå
(&
vec
[
i
]);

753 
Àn
)

755 
îr
;

756 
¶
 = 
Àn
 > 1400 ? 1400 :Üen;

758 
mhdr
.
íd
 = 
tŸÆ
 =
¶
;

759 
mhdr
.
£qno
 = 
	`ht⁄s
(
p£ss
->
omch
[
chno
].seqno);

760 
mhdr
.
Àn
 = 
	`ht⁄s
(
¶
);

762 
p£ss
->
omch
[
chno
].
£qno
++;

764 
	`PA_IoVecSëPå
(&
v
[1], 
pD©a
);

765 
	`PA_IoVecSëLí
(&
v
[1], 
¶
);

767 if(
	`P2pC⁄nWaôW
(
p£ss
->
hc⁄n
, 1, 
maxWaôMs
) <= 0)

768 
îr
 = 
P2PE_TIMEOUTED
;

770 
îr
 = 
	`P2pC⁄nSídV
(
p£ss
->
hc⁄n
, 1, 
v
, 2);

771 if(
îr
)

773 
p£ss
->
omch
[
chno
].
°©e
 = 
OMCHN_STATE_WAIT_KEYFRAME
;

774 
p£ss
->
omch
[
chno
].
£qno
++;

775  
îr
;

778 
tŸÆ
 -
¶
;

779 
Àn
 -
¶
;

780 
pD©a
 +
¶
;

785 
	}
}

787 
	$P2pSessSídMedüFøme
(
HP2PSESS
 
h£ss
, 
chno
, 
MEDIATYPE
 
mt
, 
DWORD
 
time°amp
, 
BOOL
 
isKeyFøme
, 
BYTE
 *
pFøme
, 
Àn
, 
UINT
 
maxWaôMs
)

789 
PA_IOVEC
 
v
;

790 
	`PA_IoVecSëPå
(&
v
, 
pFøme
);

791 
	`PA_IoVecSëLí
(&
v
, 
Àn
);

792  
	`P2pSessSídMedüFømeV
(
h£ss
, 
chno
, 
mt
, 
time°amp
, 
isKeyFøme
, &
v
, 1, 
maxWaôMs
);

793 
	}
}

796 
	$P2pSessGëFøme
(
HP2PSESS
 
hP2pSess
, 
chn
, 
P2PFRAMEINFO
 *
pFrmHdr
, 
UINT
 
timeout
)

798 
P2PSESS
 *
pP2pSess
 = (P2PSESS*)
hP2pSess
;

799 if(
pP2pSess
->
èg
 !
P2PSESS_TAG
)

800  -
P2PSE_INVALID_SESSION_OBJECT
;

801 if(
chn
 > 
MAX_MEDIA_CHN
)

802  -
P2PSE_INVALID_P2PCHNO
;

804 
æt
;

805 
	`PA_RWLockLockR
(
pP2pSess
->
imch
[
chn
].
rwlock
);

806 if(
pP2pSess
->
imch
[
chn
].
pMedüChn
)

807 
æt
 = 
	`MedüChnGëFøme
(
pP2pSess
->
imch
[
chn
].
pMedüChn
, (
FRAMEINFO
*)
pFrmHdr
, 
timeout
);

809 
æt
 = -
P2PSE_P2PCHN_NOT_OPEN
;

810 
	`PA_RWLockU∆ock
(
pP2pSess
->
imch
[
chn
].
rwlock
);

811  
æt
;

812 
	}
}

814 
	$P2pSessRñó£Føme
(
HP2PSESS
 
hP2pSess
, 
chn
, c⁄° 
P2PFRAMEINFO
 *
pFøme
)

816 
P2PSESS
 *
pP2pSess
 = (P2PSESS*)
hP2pSess
;

817 if(
pP2pSess
->
èg
 !
P2PSESS_TAG
)

818  -
P2PSE_INVALID_SESSION_OBJECT
;

820 if(
chn
 > 
MAX_MEDIA_CHN
)

821  -
P2PSE_INVALID_P2PCHNO
;

823 
æt
;

824 
	`PA_RWLockLockR
(
pP2pSess
->
imch
[
chn
].
rwlock
);

825 if(
pP2pSess
->
imch
[
chn
].
pMedüChn
)

826 
æt
 = 
	`MedüChnRñó£Føme
(
pP2pSess
->
imch
[
chn
].
pMedüChn
, (c⁄° 
FRAMEINFO
*)
pFøme
);

828 
æt
 = -
P2PSE_P2PCHN_NOT_OPEN
;

829 
	`PA_RWLockU∆ock
(
pP2pSess
->
imch
[
chn
].
rwlock
);

830  
æt
;

831 
	}
}

833 
uöt32
 
	$_gëTid
(
P2PSESS
 *
p£ss
)

835 
uöt32
 
tid
;

836 
	`PA_SpöLock
(
s_•öTid
);

837 
tid
 = 
p£ss
->
uTønsId
++;

838 
	`PA_SpöLock
(
s_•öTid
);

839  
tid
;

840 
	}
}

842 
	$_P2pSessSídReque°
(
P2PSESS
 *
pP2pSess
, 
chn
, 
cmd
, c⁄° *
pD©a
, 
UINT
 
nD©aLí
, 
uöt32
 
tid
)

844 
p2pcmd_hódî
 
dh
;

846 
	`öô_p2pcmd_hódî
(&
dh
, 
cmd
, 
CLS_REQUEST
, 0, 
nD©aLí
, 
tid
);

847 
dh
.
chno
 = 
chn
;

848 
dh
.
íd
 = 1;

849  
	`_£ndPackë
(
pP2pSess
, &
dh
, 
pD©a
, 
nD©aLí
);

850 
	}
}

852 
	$P2pSessSídReque°
(
HP2PSESS
 
hP2pSess
, 
chn
, 
cmd
, c⁄° *
pD©a
, 
UINT
 
nD©aLí
)

854 
uöt32
 
tid
;

855 
P2PSESS
 *
pP2pSess
 = (P2PSESS*)
hP2pSess
;

857 if(
pP2pSess
->
èg
 !
P2PSESS_TAG
Ë -
P2PSE_INVALID_SESSION_OBJECT
;

859 if(
chn
 > 
MAX_CMD_CHN
Ë -
P2PSE_INVALID_P2PCHNO
;

860 if(!
pP2pSess
->
icch
[
chn
].
pCmdChn
Ë -
P2PSE_P2PCHN_NOT_OPEN
;

862 
tid
 = 
	`_gëTid
(
pP2pSess
);

864  
	`_P2pSessSídReque°
(
pP2pSess
, 
chn
, 
cmd
, 
pD©a
, 
nD©aLí
, 
tid
);

865 
	}
}

868 
	$P2pSessRecvRe•⁄£
(
HP2PSESS
 
hP2pSess
, 
chn
, **
µRe•
, 
UINT
 *
pRe•Size
, 
BOOL
 *
pbHasM‹e
, 
DWORD
 
timeout
)

870 
RESPINFO
 
ª•Info
;

871 
P2PSESS
 *
pP2pSess
;

873 
pP2pSess
 = (
P2PSESS
*)
hP2pSess
;

874 if(
pP2pSess
->
èg
 !
P2PSESS_TAG
)

875  
P2PSE_INVALID_SESSION_OBJECT
;

879 if(
chn
 > 
MAX_CMD_CHN
)

880  
P2PSE_INVALID_P2PCHNO
;

881 if(!
pP2pSess
->
icch
[
chn
].
pCmdChn
)

882  
P2PSE_P2PCHN_NOT_OPEN
;

884 if–!
	`CmdChnBuffGëRe•
(
pP2pSess
->
icch
[
chn
].
pCmdChn
, &
ª•Info
, 
timeout
) )

885  
P2PE_TIMEOUTED
;

887 if(
ª•Info
.
°©us
)

889 *
pRe•Size
 = 0;

890 
	`CmdChnBuffRñó£Re•
(
pP2pSess
->
icch
[
chn
].
pCmdChn
, &
ª•Info
);

891  
ª•Info
.
°©us
;

895 *
µRe•
 = 
ª•Info
.
pD©a
;

896 *
pRe•Size
 = 
ª•Info
.
Àn
;

897 *
pbHasM‹e
 = !
ª•Info
.
isLa°
;

900  
ª•Info
.
°©us
;

901 
	}
}

903 
	$P2pSessRñó£Re•⁄£
(
HP2PSESS
 
hP2pSess
, 
chn
, *
pRe•
)

905 if(!
pRe•
)  0;

906 
P2PSESS
 *
pP2pSess
 = (P2PSESS*)
hP2pSess
;

907 if(
pP2pSess
->
èg
 !
P2PSESS_TAG
)

908  -
P2PSE_INVALID_SESSION_OBJECT
;

910 if(
chn
 > 
MAX_CMD_CHN
)

911  -
P2PSE_INVALID_P2PCHNO
;

912 if(!
pP2pSess
->
icch
[
chn
].
pCmdChn
)

913  -
P2PSE_P2PCHN_NOT_OPEN
;

915  
	`ChnBuffRñó£Føme
(
pP2pSess
->
icch
[
chn
].
pCmdChn
, (
RESPINFO
*)((*)
pRe•
 - 
	`off£tof
(RESPINFO, 
pD©a
)));

916 
	}
}

918 
	$P2pSessRecvSètus
(
HP2PSESS
 
hP2pSess
, 
chn
, 
DWORD
 
timeout
)

920 *
pRe•
;

921 
UINT
 
nSize
;

922 
BOOL
 
bHasM‹e
;

923 
°©us
 = 
	`P2pSessRecvRe•⁄£
(
hP2pSess
, 
chn
, &
pRe•
, &
nSize
, &
bHasM‹e
, 
timeout
);

924 if(
°©us
 == 0)

926 #i‚de‡
off£tof


927 
	#off£tof
(
s
,
m
Ë(
size_t
)&(((†*)0)->m)

	)

929 
	`CmdChnBuffRñó£Re•
(((
P2PSESS
*)
hP2pSess
)->
icch
[
chn
].
pCmdChn
, (c⁄° 
RESPINFO
*)((
BYTE
*)
pRe•
 - 
	`off£tof
(RESPINFO, 
pD©a
)));

931  
°©us
;

932 
	}
}

934 
	$P2pSessComm™dWôhCB
(
HP2PSESS
 
hP2pSess
, 
chn
, 
cmd
, c⁄° *
pD©aIn
, 
UINT
 
nD©aInLí
,

935 
P2PCMD_RESP_CB
 
cb
, *
pU£rD©a
, 
UINT
 
timeout
)

937 
P2PSESS
 *
pP2pSess
;

938 
uöt32
 
å™s_id
;

939 
P2PCBITEM
 *
cbIãm
;

940 
îr
;

942 
pP2pSess
 = (
P2PSESS
*)
hP2pSess
;

944 if(
pP2pSess
->
èg
 !
P2PSESS_TAG
Ë -
P2PSE_INVALID_SESSION_OBJECT
;

946 if(
chn
 > 
MAX_CMD_CHN
Ë -
P2PSE_INVALID_P2PCHNO
;

947 if(!
pP2pSess
->
icch
[
chn
].
pCmdChn
Ë -
P2PSE_P2PCHN_NOT_OPEN
;

949 
å™s_id
 = 
	`_gëTid
(
pP2pSess
);

951 
cbIãm
 = (
P2PCBITEM
*)
	`mÆloc
((P2PCBITEM));

952 
	`INIT_LIST_HEAD
(&
cbIãm
->
cb_li°
);

953 
cbIãm
->
›
 = 
cmd
;

954 
cbIãm
->
cb
 = cb;

955 
cbIãm
->
tid
 = 
å™s_id
;

956 
cbIãm
->
pU£rD©a
 =ÖUserData;

959 
	`PA_MuãxLock
(
pP2pSess
->
mutx_cbq
);

960 
	`li°_add_èû
(&
cbIãm
->
cb_li°
, &
pP2pSess
->cb_list);

961 
	`PA_MuãxU∆ock
(
pP2pSess
->
mutx_cbq
);

963 
îr
 = 
	`_P2pSessSídReque°
(
pP2pSess
, 
chn
, 
cmd
, 
pD©aIn
, 
nD©aInLí
, 
å™s_id
);

964 if(
îr
)

966 
	`PA_MuãxLock
(
pP2pSess
->
mutx_cbq
);

967 
	`li°_dñ
(&
cbIãm
->
cb_li°
);

968 
	`PA_MuãxU∆ock
(
pP2pSess
->
mutx_cbq
);

969 
	`‰ì
(
cbIãm
);

970  
îr
;

973 
	}
}

976 
	s_MemD©aCbP¨am
 {

977 
	m°©us
;

978 
BYTE
 *
	mpBuff
;

979 
UINT
 
	mnBuffSize
, 
	mnByãsInBuff
;

981 
	$_mem‹yD©aCB
(
°©us
, 
íd
, *
pD©a
, 
UINT
 
nSize
, *
pU£r
)

983 
_MemD©aCbP¨am
 *
∑øm
 = (_MemD©aCbP¨am*)
pU£r
;

985 
∑øm
->
°©us
 = status;

986 if(
∑øm
->
pBuff
)

988 
nByãsToC›y
 = 
∑øm
->
nBuffSize
 -Ö¨am->
nByãsInBuff
;

989 if(
nByãsToC›y
 >
nSize
)ÇBytesToCopy =ÇSize;

990 if(
nByãsToC›y
)

992 
	`mem˝y
(
∑øm
->
pBuff
 +Ö¨am->
nByãsInBuff
, 
pD©a
, 
nByãsToC›y
);

993 
∑øm
->
nByãsInBuff
 +
nByãsToC›y
;

997 
	}
}

999 
	$P2pSessQuîy
(
HP2PSESS
 
hP2pSess
, 
chn
, 
cmd
, c⁄° *
pD©aIn
, 
UINT
 
nD©aInLí
,

1000  *
pD©aOut
, 
UINT
 *
nD©aOutLí
, UINT 
timeout
)

1002 
_MemD©aCbP¨am
 
∑øm
;

1003 
æt
;

1005 
∑øm
.
pBuff
 = (
BYTE
*)
pD©aOut
;

1006 
∑øm
.
nBuffSize
 = *
nD©aOutLí
;

1007 
∑øm
.
nByãsInBuff
 = 0;

1009 
æt
 = 
	`P2pSessComm™dWôhCB
(
hP2pSess
, 
chn
, 
cmd
, 
pD©aIn
, 
nD©aInLí
, 
_mem‹yD©aCB
, &
∑øm
, 
timeout
);

1010 if(
æt
) Ñlt;

1011 *
nD©aOutLí
 = 
∑øm
.
nByãsInBuff
;

1013 
	}
}

1015 
	$P2pSessExec
(
HP2PSESS
 
hP2pSess
, 
chn
, 
cmd
, c⁄° *
pD©aIn
, 
UINT
 
nD©aInLí
, UINT 
timeout
)

1017 
îr
;

1018 
_MemD©aCbP¨am
 
∑øm
;

1019 
	`mem£t
(&
∑øm
, 0, (param));

1020 
îr
 = 
	`P2pSessComm™dWôhCB
(
hP2pSess
, 
chn
, 
cmd
, 
pD©aIn
, 
nD©aInLí
, 
NULL
, NULL, 
timeout
);

1021 if(
îr
) Érr;

1022  
∑øm
.
°©us
;

1023 
	}
}

	@p2psess.h

1 #i‚de‡
__p2p£ss_h__


2 
	#__p2p£ss_h__


	)

4 #ifde‡
__˝lu•lus


8 
	~"∂©f‹m_ad±.h
"

9 
	~"medütyp.h
"

10 
	~"p2pc⁄°.h
"

12 #ifde‡
WIN32


13 #ifde‡
P2PCLT_EXPORTS


14 
	#P2PSESSAPI_DECL
 
	`__de˛•ec
(
dŒexp‹t
)

	)

16 
	#P2PSESSAPI_DECL
 
	`__de˛•ec
(
dŒimp‹t
)

	)

19 
	#P2PSESSAPI_DECL


	)

22 #i‚de‡
__BIG_ENDIAN__


23 
	#P2PCMD_TAG
 0xD0EAC10D

	)

25 
	#P2PCMD_TAG
 0x0DC1EAD0

	)

28 
	#OP_END_SESSION
 0x0001

	)

32 
	sp2pcmd_hódî


34 
uöt32
 
èg
;

35 
uöt8
 
chno
;

36 
uöt8
 
°©us
;

37 #i‚de‡
__BIG_ENDIAN__


38 
uöt16
 
›
:14;

39 
uöt16
 
íd
:1;

40 
uöt16
 
˛s
:1;

42 
uöt16
 
˛s
:1;

43 
uöt16
 
íd
:1;

44 
uöt16
 
›
:14;

53 
uöt32
 
å™s_id
;

54 
uöt32
 
Àngth
;

55 } 
__PACKET__
;

56 
	#P2PCMD_STATUS
(
ph
Ë(’h)->
°©us
)

	)

57 
	#P2PCMD_SET_STATUS
(
ph
, 
°©us
Ë’h)->°©u†(°©us)

	)

58 
	#P2PCMD_OP
(
ph
Ë
	`¡ohs
(’h)->
›
)

	)

59 
	#P2PCMD_SET_OP
(
ph
, 
›
Ë’h)->› = 
	`ht⁄s
(›)

	)

60 
	#P2PCMD_TID
(
ph
Ë
	`¡ohl
(’h)->
å™s_id
)

	)

61 
	#P2PCMD_SET_TID
(
ph
, 
å™s_id
Ë(’h)->å™s_id = 
	`ht⁄l
—øns_id))

	)

62 
	#P2PCMD_DATA_LEN
(
ph
Ë
	`¡ohl
(’h)->
Àngth
)

	)

63 
	#P2PCMD_SET_DATA_LEN
(
ph
, 
Àn
Ë’h)->
Àngth
 = 
	`ht⁄l
÷í)

	)

64 
	#P2PCMD_PACKET_LEN
(
ph
Ë((
p2pc‹e_hódî
Ë+ 
	`¡ohl
(’h)->
Àngth
))

	)

66 
öô_p2pcmd_hódî
(
p2pcmd_hódî
* 
p
, 
›
, 
˛s
, 
°©us
, 
Àn
, 
uöt32
 
å™s_id
);

67 
INLINE
 
BOOL
 
check_p2pcmd_hódî
(c⁄° 
p2pcmd_hódî
 *
pch
)

69  (
pch
->
èg
 =
P2PCMD_TAG
);

75 
	#P2PSE_INVALID_SESSION_OBJECT
 401

	)

76 
	#P2PSE_INVALID_P2PCHNO
 402

	)

77 
	#P2PSE_P2PCHN_NOT_OPEN
 403

	)

79 
P2PSESS
;

80 
P2PSESS
* 
	tHP2PSESS
;

82 
BOOL
 (*
	tVERIFYAUTHSTRINGCB
)(c⁄° *
	tauth_°r
);

83 (*
SESSCREATEDCB
)(
	tHP2PSESS
 
	th£ss
);

84 (*
SESSABORTEDCB
)(
	tHP2PSESS
 
	th£ss
);

85 (*
CONNFAILEDCB
)(
	tîr
, *
	tpU£r
);

89 
PSCB_ID_VERIFY_AUTH_STRING
 = 1,

90 
PSCB_ID_SESS_CREATED
,

91 
PSCB_ID_SESS_ABORTED
,

92 
PSCB_ID_CONN_FAILED


93 } 
	tEP2PSESSCBID
;

95 
P2pSessSëAuthCÆlback
(
id
, 
VERIFYAUTHSTRINGCB
 
cb
);

99 
	s_ègP2PFRAMEINFO
 {

100 
UINT
 
mt
;

101 
UINT
 
ts
;

102 
UINT
 
isKeyFøme
;

104 
BYTE
 *
pFøme
;

105 
UINT
 
Àn
;

106 } 
__PACKED__
;

107 
_ègP2PFRAMEINFO
 
	tP2PFRAMEINFO
;

121 íum { 
P2P_CMD_CHANNEL
, 
P2P_MEDIA_CHANNEL
 } 
	tP2PCHANNEL
;

123 
	#P2PEVENT_ALERT_MOTION
 1

	)

124 
	#P2PEVENT_ALERT_IO
 2

	)

125 
	#P2PEVENT_ALERT_SOUND
 3

	)

126 
	#P2PEVENT_SDCARD_FAILURE
 4

	)

127 (*
ONEVENT_CB
)(
	tevít
, 
	tBYTE
 *
	tpD©a
, 
	tÀn
, *
	tpU£rD©a
);

131 (*
SESSCREATECB
)(
	tHP2PSESS
 
	th£ss
, *
	tpU£r
);

134 
P2PSESSAPI_DECL
 
P2pSessGlobÆInôülize
(c⁄° *
£rvî1
, c⁄° *
£rvî2
, c⁄° *
¢
, 
VERIFYAUTHSTRINGCB
 
cb
);

135 
P2PSESSAPI_DECL
 
P2pSessGlobÆUnöôülize
();

137 
P2PSESSAPI_DECL
 
P2pSessCª©e
(c⁄° *
p2psvr
, c⁄° *
id
, c⁄° 
uöt8
 *
sidít
, c⁄° *
auth_°r
, 
HP2PSESS
 *
h£ss
);

138 
P2PSESSAPI_DECL
 
P2pSessCª©eAsync
(c⁄° *
p2psvr
, c⁄° *
id
, c⁄° 
uöt8
 *
sidít
,

139 c⁄° *
auth_°r
, 
SESSCREATECB
 
cb
, *
pU£r
);

141 
P2PSESSAPI_DECL
 
P2pSessAc˚±
(
HP2PSESS
 *
h£ss
, 
UINT
 
waô_ms
);

143 
P2PSESSAPI_DECL
 
P2pSessDe°roy
(
HP2PSESS
 
hP2pSess
);

150 
P2PSESSAPI_DECL
 
P2pSessGëSèã
(
HP2PSESS
 
hP2pSess
);

152 
P2PSESSAPI_DECL
 *
P2pSessGëU£rD©a
(
HP2PSESS
 
hP2pSess
);

153 
P2pSessSëU£rD©a
(
HP2PSESS
 
hP2pSess
, *
pU£r
);

154 
P2PSESSAPI_DECL
 
P2pSessSëEvítCÆlback
(
HP2PSESS
 
hP2pSess
, 
ONEVENT_CB
 
cb
, *
pD©a
);

157 
P2PSESSAPI_DECL
 
BOOL
 
P2pSessO≥nCh™√l
(
HP2PSESS
 
hP2pSess
, 
P2PCHANNEL
 
ty≥
, 
chno
, 
UINT
 
size
, UINT 
nSa„S∑˚
);

158 
P2PSESSAPI_DECL
 
BOOL
 
P2pSessClo£Ch™√l
(
HP2PSESS
 
hP2pSess
, 
P2PCHANNEL
 
ty≥
, 
chno
);

162 
P2PSESSAPI_DECL
 
P2pSessSídReque°
(
HP2PSESS
 
h£ss
, 
chno
, 
cmd
, c⁄° *
pD©a
, 
UINT
 
nD©aLí
);

165 
P2PSESSAPI_DECL
 
P2pSessSídRe•⁄£
(
HP2PSESS
 
h£ss
, 
chno
, 
cmd
, c⁄° *
pD©a
, 
UINT
 
nD©aLí
, 
uöt32
 
å™s_id
);

168 
P2PSESSAPI_DECL
 
P2pSessSídEvít
(
HP2PSESS
 
h£ss
, c⁄° *
pD©a
, 
UINT
 
nD©aLí
);

171 
P2PSESSAPI_DECL
 
P2pSessSídEvítToAŒ
(c⁄° *
pD©a
, 
UINT
 
nD©aLí
);

175 
P2PSESSAPI_DECL
 
P2pSessSídRe•⁄£Eº‹
(
HP2PSESS
 
h£ss
, 
chno
, 
cmd
, 
uöt8
 
°©us
, 
uöt32
 
å™s_id
);

177 
P2PSESSAPI_DECL
 
P2pSessGëFøme
(
HP2PSESS
 
hP2pSess
, 
chn
, 
P2PFRAMEINFO
 *
pFrmHdr
, 
UINT
 
timeout
);

178 
P2PSESSAPI_DECL
 
P2pSessRñó£Føme
(
HP2PSESS
 
hP2pSess
, 
chn
, c⁄° 
P2PFRAMEINFO
 *
pFrmHdr
);

179 
P2PSESSAPI_DECL
 
P2pSessSídAudioFøme
(
HP2PSESS
 
hP2pSess
, 
chno
, 
MEDIATYPE
 
mt
, 
BYTE
 *
pFøme
, 
Àn
, 
UINT
 
maxWaôMs
);

180 
P2PSESSAPI_DECL
 
P2pSessRecvRe•⁄£
(
HP2PSESS
 
hP2pSess
, 
chn
, **
µRe•
, 
UINT
 *
pRe•Size
, 
BOOL
 *
pbHasM‹e
, 
DWORD
 
timeout
);

181 
P2PSESSAPI_DECL
 
P2pSessRñó£Re•⁄£
(
HP2PSESS
 
hP2pSess
, 
chn
, *
pRe•
);

182 
P2PSESSAPI_DECL
 
P2pSessRecvSètus
(
HP2PSESS
 
hP2pSess
, 
chn
, 
DWORD
 
timeout
);

184 (*
P2PCMD_RESP_CB
)(
	t°©us
, 
	tíd
, *
	tpD©a
, 
	tUINT
 
	tnSize
, *
	tpU£rD©a
);

185 
P2PSESSAPI_DECL
 
P2pSessComm™dWôhCB
(
HP2PSESS
 
hP2pSess
, 
chn
, 
cmd
, c⁄° *
pD©aIn
, 
UINT
 
nD©aInLí
,

186 
P2PCMD_RESP_CB
 
cb
, *
pU£rD©a
, 
UINT
 
timeout
);

188 
P2PSESSAPI_DECL
 
P2pSessQuîy
(
HP2PSESS
 
hP2pSess
, 
chn
, 
cmd
, c⁄° *
pD©aIn
, 
UINT
 
nD©aInLí
,

189  *
pD©aOut
, 
UINT
 *
nD©aOutLí
, UINT 
timeout
);

191 
P2PSESSAPI_DECL
 
P2pSessExec
(
HP2PSESS
 
hP2pSess
, 
chn
, 
cmd
, c⁄° *
pD©aIn
, 
UINT
 
nD©aInLí
, UINT 
timeout
);

195 
	#OP_EVENT
 100

196 
	sp2pcmd_evít_hódî
 {

	)

197 
p2pcmd_hódî
 
dh
;

198 
evít
;

213 
	s_ègP2PMEDIAHEADER


215 
uöt8
 
syncByã1
, 
syncByã2
;

216 
uöt8
 
±
;

217 #i‚de‡
__BIG_ENDIAN__


218 
uöt8
 
chno
:6;

219 
uöt8
 
íd
:1;

220 
uöt8
 
key‰ame
:1;

222 
uöt8
 
key‰ame
:1;

223 
uöt8
 
íd
:1;

224 
uöt8
 
chno
:6;

227 
uöt16
 
£qno
;

228 
uöt16
 
Àn
;

230 
uöt32
 
ts
;

231 } 
	tP2PMEDIAHEADER
;

234 
	#P2P_LIVE_VIDEO_CHNO
 0

	)

235 
	#P2P_LIVE_AUDIO_CHNO
 1

	)

236 
	#P2P_PLAYBACK_VIDEO_CHNO
 2

	)

237 
	#P2P_PLAYBACK_AUDIO_CHNO
 3

	)

241 
P2PSESSAPI_DECL
 
P2pSessSídMedüFøme
(
HP2PSESS
 
hSess
, 
chno
, 
MEDIATYPE
 
mt
, 
DWORD
 
time°amp
,

242 
BOOL
 
isKeyFøme
, 
BYTE
 *
pFøme
, 
size
, 
UINT
 
maxWaôMs
);

243 
P2PSESSAPI_DECL
 
P2pSessSídMedüFømeV
(
HP2PSESS
 
h£ss
, 
chno
, 
MEDIATYPE
 
mt
, 
DWORD
 
time°amp
,

244 
BOOL
 
isKeyFøme
, 
PA_IOVEC
 *
vec
, 
UINT
 
size
, UINT 
maxWaôMs
);

247 #ifde‡
__˝lu•lus


	@p2psess_imp.h

1 #i‚de‡
__p2p£ss_imp_h__


2 
	#__p2p£ss_imp_h__


	)

4 #ifde‡
__˝lu•lus


8 
	~"rudp.h
"

9 
	~"chnbuf.h
"

10 
	~"p2pc‹e.h
"

11 
	~"p2p£ss.h
"

12 
	~"löux_li°.h
"

14 
	#P2PSESS_TAG
 0x57503250

15 

	)

16 
	sOUTMEDIACHN
 {

17 
uöt16
 
£qno
;

18 
	#OMCHN_STATE_WAIT_KEYFRAME
 0

	)

19 
	#OMCHN_STATE_SENDING
 1

	)

20 
uöt16
 
°©e
;

21 } 
	tOUTMEDIACHN
;

23 
	s_ègMedüChnEx
 {

24 
MEDIACHN
 *
pMedüChn
;

25 
PA_RWLOCK
 
rwlock
;

26 } 
	tINMEDIACHN
;

27 
	s_ègCmdChnEx
 {

28 
P2PCHNBUFF
 *
pCmdChn
;

29 
PA_RWLOCK
 
rwlock
;

30 } 
	tINCMDCHN
;

31 
	#MAX_MEDIA_CHN
 8

	)

32 
	#MAX_CMD_CHN
 8

	)

34 
	s_cbIãm
 {

35 
li°_hód
 
cb_li°
;

36 
uöt32
 
tid
;

37 
›
;

38 
P2PCMD_RESP_CB
 
cb
;

39 *
pU£rD©a
;

40 } 
	tP2PCBITEM
;

42 
	s_ègP2pSess
 {

43 
DWORD
 
èg
;

45 
li°_hód
 
£ss_li°
;

46 
HP2PCONN
 
hc⁄n
;

47 
BYTE
 *
rBuff
;

48 
nByãsInBuff
;

52 
OUTMEDIACHN
 
omch
[
MAX_MEDIA_CHN
];

53 
INMEDIACHN
 
imch
[
MAX_MEDIA_CHN
];

54 
INCMDCHN
 
icch
[
MAX_CMD_CHN
];

56 
UINT
 
uTønsId
;

59 
PA_MUTEX
 
mutx_cbq
;

60 
li°_hód
 
cb_li°
;

62 
timeout_vÆ
;

66 
ONEVENT_CB
 
OnEvítCB
;

67 *
pU£rD©a
;

68 } 
	tP2PSESS
;

71 #ifde‡
__˝lu•lus


	@platform_adpt.c

1 
	~"∂©f‹m_ad±.h
"

2 
	~<°dlib.h
>

4 #ifde‡
WIN32


6 
	$PA_NëLibInô
()

8 
WSADATA
 
wd
;

9 
	`WSASèπup
(0x0202, &
wd
);

10 
	}
}

12 
	$PA_Wrôe
(
PA_HFILE
 
hFûe
, c⁄° *
pBuff
, 
size
)

14 
DWORD
 
dwWrôãn
;

15 if–! 
	`WrôeFûe
(
hFûe
, 
pBuff
, 
size
, &
dwWrôãn
, 
NULL
) )

17  
dwWrôãn
;

18 
	}
}

19 
	$PA_Ród
(
PA_HFILE
 
hFûe
, *
pBuff
, 
size
)

21 
DWORD
 
dwRódí
;

22 if–! 
	`RódFûe
(
hFûe
, 
pBuff
, 
size
, &
dwRódí
, 
NULL
) )

24  
dwRódí
;

25 
	}
}

27 
PA_HTHREAD
 
	$PA_ThªadCª©e
(
PA_ThªadRoutöe
* 
routöe
, * 
d©a
)

29  
	`Cª©eThªad
(
NULL
, 0, (
LPTHREAD_START_ROUTINE
)
routöe
, 
d©a
, 0, NULL);

30 
	}
}

32 *
	$PA_ThªadWaôU¡ûTîmö©e
(
PA_HTHREAD
 
hThªad
)

34 
DWORD
 
dwExôCode
;

35 
	`WaôF‹SögÀObje˘
(
hThªad
, 
INFINITE
);

36 
	`GëExôCodeThªad
(
hThªad
, &
dwExôCode
);

37  (*)
dwExôCode
;

38 
	}
}

40 
BOOL
 
	$PA_PùeCª©e
(
PA_PIPE
 *
pHPùeRd
, PA_PIPE *
pHPùeWπ
)

42  
	`Cª©ePùe
(
pHPùeRd
, 
pHPùeWπ
, 
NULL
, 0Ë=
TRUE
;

43 
	}
}

44 
BOOL
 
	$PA_PùeClo£
(
PA_PIPE
 
hPùe
)

46  
	`Clo£H™dÀ
(
hPùe
);

47 
	}
}

52 íum { 
	mLOCK_LEVEL_NONE
, 
	mLOCK_LEVEL_READ
, 
	mLOCK_LEVEL_WRITE
 };

54 
RWLOCK
 *
	$RWLockCª©e
()

56 
RWLOCK
 *
pLock
 = (RWLOCK*)
	`mÆloc
((RWLOCK));

57 
pLock
->
m_cuºítLevñ
 = 
LOCK_LEVEL_NONE
;

58 
pLock
->
m_ªadîCou¡
 =ÖLock->
m_wrôeCou¡
 = 0;

59 
pLock
->
m_wrôîId
 = 0;

61 
pLock
->
m_u∆ockEvít
 = 
	`Cª©eEvít
–
NULL
, 
FALSE
, FALSE, NULL );

62 
pLock
->
m_ac˚ssMuãx
 = 
	`Cª©eMuãx
–
NULL
, 
FALSE
, NULL );

63 
	`InôülizeCrôiˇlSe˘i⁄
–&
pLock
->
m_csSèãCh™ge
 );

64  
pLock
;

65 
	}
}

67 
BOOL
 
	$RWLockDe°roy
(
RWLOCK
 *
pLock
)

69 
	`DñëeCrôiˇlSe˘i⁄
–&
pLock
->
m_csSèãCh™ge
 );

70 i‡–
pLock
->
m_ac˚ssMuãx
 ) 
	`Clo£H™dÀ
(ÖLock->m_accessMutex );

71 i‡–
pLock
->
m_u∆ockEvít
 ) 
	`Clo£H™dÀ
(ÖLock->m_unlockEvent );

72 
	`‰ì
(
pLock
);

73  
TRUE
;

74 
	}
}

76 
BOOL
 
	$_Lock
(
RWLOCK
 *
pLock
, 
Àvñ
, 
DWORD
 
timeout
)

78 
BOOL
 
bªsu…
 = 
TRUE
;

79 
DWORD
 
waôResu…
 = 0;

81 
waôResu…
 = 
	`WaôF‹SögÀObje˘
–
pLock
->
m_ac˚ssMuãx
, 
timeout
 );

82 i‡–
waôResu…
 !
WAIT_OBJECT_0
 )  
FALSE
;

84 i‡–
Àvñ
 =
LOCK_LEVEL_READ
 && 
pLock
->
m_cuºítLevñ
 !
LOCK_LEVEL_WRITE
 )

86 
	`E¡îCrôiˇlSe˘i⁄
–&
pLock
->
m_csSèãCh™ge
 );

87 
pLock
->
m_cuºítLevñ
 = 
Àvñ
;

88 
pLock
->
m_ªadîCou¡
 += 1;

89 
	`Re£tEvít
–
pLock
->
m_u∆ockEvít
 );

90 
	`LóveCrôiˇlSe˘i⁄
–&
pLock
->
m_csSèãCh™ge
 );

92 i‡–
Àvñ
 =
LOCK_LEVEL_READ
 &&

93 
pLock
->
m_cuºítLevñ
 =
LOCK_LEVEL_WRITE
 )

95 
waôResu…
 = 
	`WaôF‹SögÀObje˘
–
pLock
->
m_u∆ockEvít
, 
timeout
 );

96 i‡–
waôResu…
 =
WAIT_OBJECT_0
 )

98 
	`E¡îCrôiˇlSe˘i⁄
–&
pLock
->
m_csSèãCh™ge
 );

99 
pLock
->
m_cuºítLevñ
 = 
Àvñ
;

100 
pLock
->
m_ªadîCou¡
 += 1;

101 
	`Re£tEvít
–
pLock
->
m_u∆ockEvít
 );

102 
	`LóveCrôiˇlSe˘i⁄
–&
pLock
->
m_csSèãCh™ge
 );

104 
bªsu…
 = 
FALSE
;

106 i‡–
Àvñ
 =
LOCK_LEVEL_WRITE
 &&

107 
pLock
->
m_cuºítLevñ
 =
LOCK_LEVEL_NONE
 )

109 
	`E¡îCrôiˇlSe˘i⁄
–&
pLock
->
m_csSèãCh™ge
 );

110 
pLock
->
m_cuºítLevñ
 = 
Àvñ
;

111 
pLock
->
m_wrôîId
 = 
	`GëCuºítThªadId
();

112 
pLock
->
m_wrôeCou¡
 = 1;

113 
	`Re£tEvít
–
pLock
->
m_u∆ockEvít
 );

114 
	`LóveCrôiˇlSe˘i⁄
–&
pLock
->
m_csSèãCh™ge
 );

116 i‡–
Àvñ
 =
LOCK_LEVEL_WRITE
 &&

117 
pLock
->
m_cuºítLevñ
 !
LOCK_LEVEL_NONE
 )

119 
DWORD
 
id
 = 
	`GëCuºítThªadId
();

120 if(
id
 =
pLock
->
m_wrôîId
ËpLock->
m_wrôeCou¡
++;

123 
waôResu…
 = 
	`WaôF‹SögÀObje˘
–
pLock
->
m_u∆ockEvít
, 
timeout
 );

124 i‡–
waôResu…
 =
WAIT_OBJECT_0
 )

126 
	`E¡îCrôiˇlSe˘i⁄
–&
pLock
->
m_csSèãCh™ge
 );

127 
pLock
->
m_cuºítLevñ
 = 
Àvñ
;

128 
pLock
->
m_wrôîId
 = 
	`GëCuºítThªadId
();

129 
pLock
->
m_wrôeCou¡
 = 1;

130 
	`Re£tEvít
–
pLock
->
m_u∆ockEvít
 );

131 
	`LóveCrôiˇlSe˘i⁄
–&
pLock
->
m_csSèãCh™ge
 );

133 
bªsu…
 = 
FALSE
;

137 
	`Rñó£Muãx
–
pLock
->
m_ac˚ssMuãx
 );

138  
bªsu…
;

140 
	}
}

142 
BOOL
 
	$RWLockLockR
(
RWLOCK
 *
pLock
, 
DWORD
 
timeout
)

144  
	`_Lock
(
pLock
, 
LOCK_LEVEL_READ
, 
timeout
);

145 
	}
}

147 
BOOL
 
	$RWLockLockW
(
RWLOCK
 *
pLock
, 
DWORD
 
timeout
)

149  
	`_Lock
(
pLock
, 
LOCK_LEVEL_WRITE
, 
timeout
);

150 
	}
}

152 
	$RWLockU∆ock
(
RWLOCK
 *
pLock
)

154 
	`E¡îCrôiˇlSe˘i⁄
–&
pLock
->
m_csSèãCh™ge
 );

155 i‡–
pLock
->
m_cuºítLevñ
 =
LOCK_LEVEL_READ
 )

157 
pLock
->
m_ªadîCou¡
 --;

158 i‡–
pLock
->
m_ªadîCou¡
 == 0 )

160 
pLock
->
m_cuºítLevñ
 = 
LOCK_LEVEL_NONE
;

161 
	`SëEvít
 (
pLock
->
m_u∆ockEvít
);

164 i‡–
pLock
->
m_cuºítLevñ
 =
LOCK_LEVEL_WRITE
 )

166 
pLock
->
m_wrôeCou¡
--;

167 if(
pLock
->
m_wrôeCou¡
 == 0)

169 
pLock
->
m_cuºítLevñ
 = 
LOCK_LEVEL_NONE
;

170 
pLock
->
m_wrôîId
 = 0;

171 
	`SëEvít
 ( 
pLock
->
m_u∆ockEvít
 );

174 
	`LóveCrôiˇlSe˘i⁄
–&
pLock
->
m_csSèãCh™ge
 );

175 
	}
}

179 #ñi‡
deföed
(
__LINUX__
)

181 
BOOL
 
	$PA_EvítWaôTimed
(
PA_EVENT
 
e
, 
DWORD
 
ms
)

183 
time•ec
 
ts
;

186 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ts
);

187 
ts
.
tv_£c
 +
ms
/1000;

188 
ts
.
tv_n£c
 +(
ms
%1000)*1000000;

190 
	`gëtimeofday
((
timevÆ
*)&
ts
, 
NULL
);

191 
ts
.
tv_n£c
 *= 1000;

192 
ts
.
tv_£c
 +
ms
/1000;

193 
ts
.
tv_n£c
 +(
ms
%1000)*1000000;

194 if(
ts
.
tv_n£c
 > 1000000000) {

195 
ts
.
tv_n£c
 -= 1000000000;

196 
ts
.
tv_£c
 ++;

199  
	`£m_timedwaô
(
e
, &
ts
) == 0;

200 
	}
}

202 
PA_HTHREAD
 
	$PA_ThªadCª©e
(
PA_ThªadRoutöe
* 
routöe
, * 
d©a
)

204 
±hªad_t
 
thd
;

205 if(
	`±hªad_¸óã
(&
thd
, 
NULL
, 
routöe
, 
d©a
) == 0)

206  
thd
;

209 
	}
}

211 * 
	$PA_ThªadWaôU¡ûTîmö©e
(
PA_HTHREAD
 
hThªad
)

213 *
tmp
;

214 
	`±hªad_joö
(
hThªad
, &
tmp
); Åmp;

215 
	}
}

217 
BOOL
 
	$PA_PùeCª©e
(
PA_PIPE
 *
pHPùeRd
, PA_PIPE *
pHPùeWπ
)

219 
PA_PIPE
 
fds
[2];

220 if(
	`pùe
(
fds
Ë< 0Ë 
FALSE
;

221 *
pHPùeRd
 = 
fds
[0];

222 *
pHPùeWπ
 = 
fds
[1];

223  
TRUE
;

224 
	}
}

225 
BOOL
 
	$PA_PùeClo£
(
PA_PIPE
 
hPùe
)

227  0 =
	`˛o£
(
hPùe
);

228 
	}
}

230 
	$PA_SÀï
(
UINT
 
ms
)

232 
timevÆ
 
tv
;

233 
tv
.
tv_£c
 = 
ms
/1000;

234 
tv
.
tv_u£c
 = (
ms
%1000)*1000;

235 
	`£À˘
(0, 
NULL
, NULL, NULL, &
tv
);

236 
	}
}

238 
DWORD
 
	$PA_GëTickCou¡
()

240 
time•ec
 
ts
;

241 
	`˛ock_gëtime
(
CLOCK_MONOTONIC
, &
ts
);

242  1000*
ts
.
tv_£c
 +Ås.
tv_n£c
/1000000;

243 
	}
}

245 
BOOL
 
	$PA_DñëeFûe
(c⁄° *
‚
)

247  
	`u∆ök
(
‚
) == 0;

248 
	}
}

253 
BOOL
 
	$_RWLockLockR
(
±hªad_rwlock_t
 *
lock
, 
DWORD
 
timeout
)

255 if(
timeout
 =
INFINITE
)

256  
	`±hªad_rwlock_rdlock
(
lock
) == 0;

259 !
	`±hªad_rwlock_åyrdlock
(
lock
Ë&& 
timeout
 > 0)

261 
	`u¶ìp
(10000);

262 if(
timeout
 > 10)Åimeout -= 10;

263  
FALSE
;

265  
TRUE
;

267 
	}
}

268 
BOOL
 
	$_RWLockLockW
(
±hªad_rwlock_t
 *
lock
, 
DWORD
 
timeout
)

270 if(
timeout
 =
INFINITE
)

271  
	`±hªad_rwlock_wæock
(
lock
)==0;

274 !
	`±hªad_rwlock_åywæock
(
lock
Ë&& 
timeout
 > 0)

276 
	`u¶ìp
(10000);

277 if(
timeout
 > 10)Åimeout -= 10;

278  
FALSE
;

280  
TRUE
;

282 
	}
}

287 #ifde‡
WIN32


288 
	$PA_SockëSëNBlk
(
PA_SOCKET
 
s
, 
BOOL
 
b
)

290  
	`io˘lsockë
(
s
, 
FIONBIO
, (
u_l⁄g
*)&
b
);

291 
	}
}

293 #ñi‡
deföed
(
__LINUX__
)

294 
	$PA_SockëSëNBlk
(
PA_SOCKET
 
s
, 
BOOL
 
b
)

296 
›t
 = 
	`f˙é
(
s
, 
F_GETFL
, &opt, 0);

297 if(
b
Ë
›t
 |
O_NONBLOCK
;

298 
›t
 &~
O_NONBLOCK
;

299  
	`f˙é
(
s
, 
F_SETFL
, 
›t
);

300 
	}
}

303 
	$PA_SockëSëLögî
(
PA_SOCKET
 
s
, 
⁄off
, 
lögî
)

305 
lögî
 
›t
 = { 
⁄off
,Üinger };

306  
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_LINGER
,

307 #ifde‡
WIN32


308 (c⁄° *)&
›t
,

310 &
›t
,

312 (
›t
));

313 
	}
}

315 #ifde‡
_DEBUG


316 
	$dbg_bö
(c⁄° *
tôÀ
, c⁄° *
p
, 
size
)

318 
i
;

319 *
byts
 = (*)
p
;

320 
	`¥ötf
(
tôÀ
);

321 
i
=0; i<
size
; i++)

323 
	`¥ötf
("%02X ", 
byts
[
i
]);

324 if(
i
>0 && (i&31Ë=31Ë
	`¥ötf
("\n");

326 
	`¥ötf
("\n");

327 
	}
}

329 
	#dbg_bö
(
x
, 
y
, 
z
)

	)

	@platform_adpt.h

1 #i‚de‡
__∂©f‹m_ad±_h__


2 
	#__∂©f‹m_ad±_h__


	)

4 
	~"ba£ty≥.h
"

5 
	~<°dio.h
>

6 
	~<°dlib.h
>

7 
	~<°rög.h
>

9 
	#IN


	)

10 
	#INOUT


	)

12 #ifde‡
WIN32


13 
	#__BEGIN_ALIGNMENT
(
x
)
__
 
__¥agma
 
	`∑ck
(
push
, x)

	)

14 
	#__END_ALIGNMENT
(
x
)
__
 
__¥agma
 
	`∑ck
(
p›
)

	)

15 
	#__BEGIN_PACKED__
 
__¥agma
 
	`∑ck
(
push
, 1)

	)

16 
	#__END_PACKED__
 
__¥agma
 
p›


	)

17 
	#__PACKED__


	)

18 #ñi‡
deföed
(
__LINUX__
)

19 
	#__BEGIN_ALIGNMENT__
(
x
)

	)

20 
	#__END_ALIGNMENT__
(
x
Ë
	`__©åibuã__
((
	`__Æig√d__
(x)))

	)

21 
	#__BEGIN_PACKED__


	)

22 
	#__END_PACKED__
 
	`__©åibuã__
((
__∑cked__
))

	)

23 
	#__PACKED__
 
	`__©åibuã__
((
__∑cked__
))

	)

28 #ifde‡
WIN32


29 
	~<wösock2.h
>

30 
	~<ws2t˝ù.h
>

32 #i‡
deföed
(
__˝lu•lus
Ë&& deföed(
USE_MFC
)

33 
	~<afx.h
>

35 
	#WIN32_LEAN_AND_MEAN


	)

36 
	~<wödows.h
>

40 
	#__STDCALL
 
__°dˇŒ


	)

41 
	#INLINE
 
__ölöe


	)

42 
	#__LIKELY
(
x
Ë
	)
x

43 
	#__UNLIKELY
(
x
Ë
	)
x

45 #ifde‡
__˝lu•lus


52 
PA_NëLibInô
();

53 
	#PA_NëLibUnöô
(Ë
	`WSACÀ™up
()

	)

55 
	#PA_IOVEC
 
WSABUF


	)

56 
	#PA_IoVecGëPå
(
pvec
Ë(’vec)->
buf
)

	)

57 
	#PA_IoVecGëLí
(
pvec
Ë(’vec)->
Àn
)

	)

58 
	#PA_IoVecSëPå
(
pvec
, 
±r
Ë’vec)->
buf
 = (*)’å)

	)

59 
	#PA_IoVecSëLí
(
pvec
, 
_Àn
Ë’vec)->
Àn
 = 
	)
_len

61 
	#PA_SockëClo£
 
˛o£sockë


	)

62 
	#Clo£Sockë
 
˛o£sockë


	)

63 
	#PA_Síd
(
s
, 
p
, 
Àn
, 
f
Ë
	`£nd
(s, (c⁄° *Ì,Üí, f)

	)

64 
	#PA_SídTo
(
s
, 
p
, 
Àn
, 
f
, 
∑ddr
, 
Æí
Ë
	`£ndto
(s, (c⁄° *Ì,Üí, f,Öaddr,áÀn)

	)

65 
	#PA_Recv
(
s
, 
p
, 
Àn
, 
f
Ë
	`ªcv
(s, (*Ì,Üí, f)

	)

66 
	#PA_RecvFrom
(
s
, 
p
, 
Àn
, 
f
, 
∑ddr
, 
∑Àn
Ë
	`ªcv‰om
(s, (*Ì,Üí, f,Öaddr,ÖÆí)

	)

67 
	#PA_GëSockName
(
s
, 
∑ddr
, 
∑ddr_Àn
Ë
	`gësock«me
(s,Öaddr, (*Ìaddr_Àn)

	)

68 
	#PA_GëPìrName
(
s
, 
∑ddr
, 
∑ddr_Àn
Ë
	`gë≥î«me
(s,Öaddr, (*Ìaddr_Àn)

	)

69 
	#PA_Ac˚±
(
s
, 
∑ddr
, 
∑ddr_Àn
Ë
	`ac˚±
(s,Öaddr,Öaddr_Àn)

	)

70 
	#PA_GëSockO±
(
s
, 
Àvñ
, 
›äame
, 
›tvÆ
, 
›éí
Ë
	`gësock›t
(s,Üevñ, o±«me, (*)›tvÆ, (*)›éí)

	)

71 
	#PA_SëSockO±
(
s
, 
Àvñ
, 
›äame
, 
›tvÆ
, 
›éí
Ë
	`£tsock›t
(s,Üevñ, o±«me, (c⁄° *)›tvÆ, o±Àn)

	)

73 
	#PA_SOCKET
 
SOCKET


	)

74 
	#PA_SockëIsVÆid
(
s
Ë(s!=
INVALID_SOCKET
)

	)

75 
	#PA_SockëGëEº‹
(Ë
	`WSAGëLa°Eº‹
()

	)

76 
	#PA_SOCKET_ERROR
 
SOCKET_ERROR


77 

	)

79 
	#EWOULDBLOCK
 
WSAEWOULDBLOCK


	)

80 
	#EINPROGRESS
 
WSAEINPROGRESS


	)

81 
	#EALREADY
 
WSAEALREADY


	)

82 
	#ENOTSOCK
 
WSAENOTSOCK


	)

83 
	#EDESTADDRREQ
 
WSAEDESTADDRREQ


	)

84 
	#EMSGSIZE
 
WSAEMSGSIZE


	)

85 
	#EPROTOTYPE
 
WSAEPROTOTYPE


	)

86 
	#ENOPROTOOPT
 
WSAENOPROTOOPT


	)

87 
	#EPROTONOSUPPORT
 
WSAEPROTONOSUPPORT


	)

88 
	#ESOCKTNOSUPPORT
 
WSAESOCKTNOSUPPORT


	)

89 
	#EOPNOTSUPP
 
WSAEOPNOTSUPP


	)

90 
	#EPFNOSUPPORT
 
WSAEPFNOSUPPORT


	)

91 
	#EAFNOSUPPORT
 
WSAEAFNOSUPPORT


	)

92 
	#EADDRINUSE
 
WSAEADDRINUSE


	)

93 
	#EADDRNOTAVAIL
 
WSAEADDRNOTAVAIL


	)

94 
	#ENETDOWN
 
WSAENETDOWN


	)

95 
	#ENETUNREACH
 
WSAENETUNREACH


	)

96 
	#ENETRESET
 
WSAENETRESET


	)

97 
	#ECONNABORTED
 
WSAECONNABORTED


	)

98 
	#ECONNRESET
 
WSAECONNRESET


	)

99 
	#ENOBUFS
 
WSAENOBUFS


	)

100 
	#EISCONN
 
WSAEISCONN


	)

101 
	#ENOTCONN
 
WSAENOTCONN


	)

102 
	#ESHUTDOWN
 
WSAESHUTDOWN


	)

103 
	#ETOOMANYREFS
 
WSAETOOMANYREFS


	)

104 
	#ETIMEDOUT
 
WSAETIMEDOUT


	)

105 
	#ECONNREFUSED
 
WSAECONNREFUSED


	)

106 
	#ELOOP
 
WSAELOOP


	)

107 
	#EHOSTDOWN
 
WSAEHOSTDOWN


	)

108 
	#EHOSTUNREACH
 
WSAEHOSTUNREACH


	)

109 
	#EPROCLIM
 
WSAEPROCLIM


	)

110 
	#EUSERS
 
WSAEUSERS


	)

111 
	#EDQUOT
 
WSAEDQUOT


	)

112 
	#ESTALE
 
WSAESTALE


	)

113 
	#EREMOTE
 
WSAEREMOTE


	)

120 
	#PA_INVALID_HANDLE
 
INVALID_HANDLE_VALUE


	)

121 
	#PA_IsVÆidH™dÀ
(
h™dÀ
Ë(h™dÀ !
INVALID_HANDLE_VALUE
)

	)

126 
	#PA_MUTEX
 
HANDLE


	)

127 
	#PA_EVENT
 
HANDLE


	)

128 
	#PA_COND
 
HANDLE


	)

129 
	#PA_SEM
 
HANDLE


130 
	#PA_PIPE
 
HANDLE


	)

131 
	#PA_SPIN
 
CRITICAL_SECTION


	)

133 
	#PA_DEFINEMUTEX
(
x
Ë
PA_MUTEX
 x = 
	`Cª©eMuãx
(
NULL
, 
FALSE
, NULL)

	)

134 
	#PA_MuãxInô
(
x
Ëx = 
	`Cª©eMuãx
(
NULL
, 
FALSE
, NULL)

	)

135 
	#PA_MuãxUnöô
(
x
Ë
	`Clo£H™dÀ
(x)

	)

136 
	#PA_MuãxLock
(
x
Ë
	`WaôF‹SögÀObje˘
(x, 
INFINITE
)

	)

137 
	#PA_MuãxU∆ock
(
x
Ë
	`Rñó£Muãx
(x)

	)

138 
	#PA_MuãxTryLock
(
x
Ë(
	`WaôF‹SögÀObje˘
(x, 0Ë=
WAIT_OBJECT_0
)

	)

140 
	#PA_SpöInô
(
x
Ë
	`InôülizeCrôiˇlSe˘i⁄
(&x)

	)

141 
	#PA_SpöUnöô
(
x
Ë
	`DñëeCrôiˇlSe˘i⁄
(&x)

	)

142 
	#PA_SpöLock
(
x
Ë
	`E¡îCrôiˇlSe˘i⁄
(&x)

	)

143 
	#PA_SpöTryLock
(
x
Ë
	`TryE¡îCrôiˇlSe˘i⁄
(&x)

	)

144 
	#PA_SpöU∆ock
(
x
Ë
	`LóveCrôiˇlSe˘i⁄
(&x)

	)

146 
	#PA_EvítInô
(
x
Ëx = 
	`Cª©eEvít
(
NULL
, 
FALSE
, FALSE, NULL)

	)

147 
	#PA_EvítUnöô
(
x
Ë
	`Clo£H™dÀ
(x)

	)

148 
	#PA_EvítSë
(
x
Ë
	`SëEvít
(x)

	)

150 
	#PA_EvítWaô
(
x
Ë
	`WaôF‹SögÀObje˘
(x, 
INFINITE
)

	)

151 
	#PA_EvítWaôTimed
(
e
, 
ms
Ë(
	`WaôF‹SögÀObje˘
”, ms)==
WAIT_OBJECT_0
)

	)

153 
	#PA_SemInô
(
x
, 
max_vÆue
Ëx = 
	`Cª©eSem≠h‹e
(
NULL
, 0, max_vÆue, NULL)

	)

154 
	#PA_SemUnöô
(
x
Ë
	`Clo£H™dÀ
(x)

	)

155 
	#PA_SemWaô
(
x
Ë
	`WaôF‹SögÀObje˘
(x, 
INFINITE
)

	)

156 
	#PA_SemPo°
(
x
Ë
	`Rñó£Sem≠h‹e
(x, 1, 
NULL
)

	)

161 
	#PA_HTHREAD
 
HANDLE


	)

162 
	#PA_HTHREAD_NULL
 
NULL


	)

163 
	#PA_THREAD_RETTYPE
 
DWORD


	)

164 
PA_THREAD_RETTYPE
 (
	t__STDCALL
 
	tPA_ThªadRoutöe
)(*);

165 
	#PA_ThªadGëCuºítH™dÀ
(Ë
	`GëCuºítThªad
()

	)

166 
	#PA_ThªadClo£H™dÀ
(
hThªad
Ë
	`Clo£H™dÀ
(hThªad)

	)

167 *
PA_ThªadWaôU¡ûTîmö©e
(
PA_HTHREAD
 
hThªad
);

169 
	#PA_SÀï
(
ms
Ë
	`SÀï
(ms)

	)

174 
	sRódWrôeLock


176 
m_cuºítLevñ
;

177 
m_ªadîCou¡
, 
m_wrôeCou¡
;

178 
DWORD
 
m_wrôîId
;

179 
HANDLE
 
m_u∆ockEvít
;

180 
HANDLE
 
m_ac˚ssMuãx
;

181 
CRITICAL_SECTION
 
m_csSèãCh™ge
;

182 } 
	tRWLOCK
, *
	tLPRWLOCK
;

184 
RWLOCK
 *
RWLockCª©e
();

185 
BOOL
 
RWLockDe°roy
(
RWLOCK
 *
pLock
);

186 
BOOL
 
RWLockLockR
(
RWLOCK
 *
pLock
, 
DWORD
 
timeout
);

187 
BOOL
 
RWLockLockW
(
RWLOCK
 *
pLock
, 
DWORD
 
timeout
);

188 
RWLockU∆ock
(
RWLOCK
 *
pLock
);

190 
	#PA_RWLOCK
 
LPRWLOCK


	)

191 
	#PA_RWLockInô
(
x
Ëx = 
	`RWLockCª©e
()

	)

192 
	#PA_RWLockUnöô
(
x
Ë
	`RWLockDe°roy
(x)

	)

193 
	#PA_RWLockLockR
(
x
Ë
	`RWLockLockR
(x, 
INFINITE
)

	)

194 
	#PA_RWLockLockW
(
x
Ë
	`RWLockLockW
(x, 
INFINITE
)

	)

195 
	#PA_RWLockFaûed
(
›
Ë(› =
FALSE
)

	)

196 
	#PA_RWLockLockRTimed
(
x
, 
timeout
Ë
	`RWLockLockR
(x,Åimeout)

	)

197 
	#PA_RWLockLockWTimed
(
x
, 
timeout
Ë
	`RWLockLockW
(x,Åimeout)

	)

198 
	#PA_RWLockU∆ock
(
x
Ë
	`RWLockU∆ock
(x)

	)

204 
	#PA_SåCa£Cmp
 
°ricmp


	)

205 
	#PA_SåNCa£Cmp
 
°∫icmp


	)

206 
	#PA_SåNCmp
 
°∫cmp


	)

211 
	#PA_HFILE
 
HANDLE


	)

212 
PA_Wrôe
(
PA_HFILE
 
hFûe
, c⁄° *
pBuff
, 
size
);

213 
PA_Ród
(
PA_HFILE
 
hFûe
, *
pBuff
, 
size
);

214 
	#PA_FûeClo£
(
hf
Ë
	`Clo£H™dÀ
(hf)

	)

215 
	#PA_FûeIsVÆid
(
h
Ë(h!=
INVALID_HANDLE_VALUE
)

	)

216 
	#PA_DñëeFûe
(
f
Ë
	`DñëeFûe
(f)

	)

221 
	#PA_GëTickCou¡
(Ë
	`GëTickCou¡
()

	)

223 #ifde‡
__˝lu•lus


227 #ñi‡
deföed
(
__LINUX__
)

232 
	~<uni°d.h
>

233 
	~<sys/sockë.h
>

234 
	~<sys/ty≥s.h
>

235 
	~<√töë/ö.h
>

236 
	~<√töë/t˝.h
>

237 
	~<¨∑/öë.h
>

238 
	~<î∫o.h
>

239 
	~<f˙é.h
>

240 
	~<±hªad.h
>

241 
	~<√tdb.h
>

242 
	~<î∫o.h
>

243 
	~<sys/£À˘.h
>

244 
	~<sys/time.h
>

245 
	~<uni°d.h
>

246 
	~<sys/ty≥s.h
>

247 
	~<sys/uio.h
>

248 
	~<£m≠h‹e.h
>

250 
	#__STDCALL


	)

251 
	#INLINE
 
ölöe


	)

252 
	#__LIKELY
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 1)

	)

253 
	#__UNLIKELY
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

255 #ifde‡
__˝lu•lus


262 
	#PA_NëLibInô
()

	)

263 
	#PA_NëLibUnöô
()

	)

265 
	#PA_IOVEC
 
iovec


	)

266 
	#PA_IoVecGëPå
(
pvec
Ë(’vec)->
iov_ba£
)

	)

267 
	#PA_IoVecGëLí
(
pvec
Ë(’vec)->
iov_Àn
)

	)

268 
	#PA_IoVecSëPå
(
pvec
, 
±r
Ë’vec)->
iov_ba£
 = (*)’å)

	)

269 
	#PA_IoVecSëLí
(
pvec
, 
Àn
Ë’vec)->
iov_Àn
 = 
	)
len

271 
	#PA_SockëClo£
 
˛o£


	)

272 
	#Clo£Sockë
 
˛o£


	)

273 
	#PA_Síd
 
£nd


	)

274 
	#PA_SídTo
 
£ndto


	)

275 
	#PA_Recv
 
ªcv


	)

276 
	#PA_RecvFrom
(
s
, 
buf
, 
size
, 
Êags
, 
∑ddr
, 
∑ddr_Àn
Ë
	`ªcv‰om
(s, buf, size, fœgs,Öaddr, (
sockÀn_t
*Ìaddr_Àn)

	)

277 
	#PA_GëSockName
(
s
, 
∑ddr
, 
∑ddr_Àn
Ë
	`gësock«me
(s,Öaddr, (
sockÀn_t
*Ìaddr_Àn)

	)

278 
	#PA_GëPìrName
(
s
, 
∑ddr
, 
∑ddr_Àn
Ë
	`gë≥î«me
(s,Öaddr, (
sockÀn_t
*Ìaddr_Àn)

	)

279 
	#PA_Ac˚±
(
s
, 
∑ddr
, 
∑ddr_Àn
Ë
	`ac˚±
(s,Öaddr, (
sockÀn_t
*Ìaddr_Àn)

	)

280 
	#PA_GëSockO±
(
s
, 
Àvñ
, 
›äame
, 
›tvÆ
, 
›éí
Ë
	`gësock›t
(s,Üevñ, o±«me, o±vÆ, (
sockÀn_t
*)›éí)

	)

281 
	#PA_SëSockO±
 
£tsock›t


	)

283 
	#PA_SOCKET
 

	)

284 
	#INVALID_SOCKET
 -1

	)

285 
	#PA_SockëIsVÆid
(
s
Ë(s>=0)

	)

286 
	#PA_SockëGëEº‹
(Ë
î∫o


	)

287 
	#PA_SOCKET_ERROR
 -1

288 

	)

292 
	#PA_IsVÆidH™dÀ
(
fd
Ë(fd>=0)

	)

293 
	#PA_INVALID_HANDLE
 -1

	)

298 
	#PA_MUTEX
 
±hªad_muãx_t


	)

299 
	#PA_PIPE
 

	)

301 
	#PA_EVENT
 
£m_t
*

	)

302 
	#PA_SEM
 
£m_t


	)

304 
	#PA_DEFINEMUTEX
(
x
Ë
±hªad_muãx_t
 x = 
PTHREAD_MUTEX_INITIALIZER


	)

305 
	#PA_MuãxInô
(
x
Ë
	`±hªad_muãx_öô
(&x, 
NULL
)

	)

306 
	#PA_MuãxUnöô
(
x
Ë
	`±hªad_muãx_de°roy
(&x)

	)

307 
	#PA_MuãxLock
(
x
Ë
	`±hªad_muãx_lock
(&x)

	)

308 
	#PA_MuãxU∆ock
(
x
Ë
	`±hªad_muãx_u∆ock
(&x)

	)

309 
	#PA_MuãxTryLock
(
x
Ë(
	`±hªad_muãx_åylock
(&xË=0)

	)

311 #ifde‡
HAVE_SPIN_T


312 
	#PA_SPIN
 
±hªad_•ölock_t


	)

313 
	#PA_SpöInô
(
x
Ë
	`±hªad_•ö_öô
(&x, 
PTHREAD_PROCESS_PRIVATE
)

	)

314 
	#PA_SpöUnöô
(
x
Ë
	`±hªad_•ö_de°roy
(&x)

	)

315 
	#PA_SpöLock
(
x
Ë
	`±hªad_•ö_lock
(&x)

	)

316 
	#PA_SpöTryLock
(
x
Ë
	`±hªad_•ö_åylock
(&x)

	)

317 
	#PA_SpöU∆ock
(
x
Ë
	`±hªad_•ö_u∆ock
(&x)

	)

319 
	#PA_SPIN
 
±hªad_muãx_t


	)

320 
	#PA_SpöInô
(
x
Ë
	`±hªad_muãx_öô
(&x, 
NULL
)

	)

321 
	#PA_SpöUnöô
(
x
Ë
	`±hªad_muãx_de°roy
(&x)

	)

322 
	#PA_SpöLock
(
x
Ë
	`±hªad_muãx_lock
(&x)

	)

323 
	#PA_SpöTryLock
(
x
Ë
	`±hªad_muãx_åylock
(&x)

	)

324 
	#PA_SpöU∆ock
(
x
Ë
	`±hªad_muãx_u∆ock
(&x)

	)

327 
	#PA_EvítInô
(
x
Ëdÿ{ x=(
£m_t
*)
	`mÆloc
((£m_t)); 
	`£m_öô
(x, 0, 0); } 0)

	)

328 
	#PA_EvítUnöô
(
x
Ëdÿ{ 
	`£m_de°roy
(x); 
	`‰ì
(x); } 0)

	)

329 
	#PA_EvítSë
(
x
Ë
	`£m_po°
(x)

	)

330 
	#PA_EvítWaô
(
x
Ë
	`£m_waô
(x)

	)

331 
BOOL
 
PA_EvítWaôTimed
(
PA_EVENT
 
e
, 
DWORD
 
ms
);

333 
	#PA_SemInô
(
x
, 
max_vÆue
Ëdÿ{ x = (
£m_t
*)
	`mÆloc
((£m_t)); 
	`£m_öô
(x, 0, max_vÆue); } 0)

	)

334 
	#PA_SemUnöô
(
x
Ë
	`Clo£H™dÀ
(xË{ 
	`£m_de°roy
(x); 
	`‰ì
(x); }

	)

335 
	#PA_SemWaô
(
x
Ë
	`£m_waô
(x)

	)

336 
	#PA_SemPo°
(
x
Ë
	`£m_po°
(x)

	)

341 
	#PA_HTHREAD
 
±hªad_t


	)

342 
	#PA_HTHREAD_NULL
 0L

	)

343 
	#PA_THREAD_RETTYPE
 *

	)

344 
PA_THREAD_RETTYPE
 (
	t__STDCALL
 
	tPA_ThªadRoutöe
)(*);

345 
	#PA_ThªadGëCuºítH™dÀ
(Ë
	`±hªad_£lf
()

	)

346 
	#PA_ThªadClo£H™dÀ
(
hThªad
Ë
	`±hªad_dëach
(hThªad)

	)

347 * 
PA_ThªadWaôU¡ûTîmö©e
(
PA_HTHREAD
 
hThªad
);

349 
PA_SÀï
(
UINT
 
ms
);

354 
	#INFINITE
 0xFFFFFFFF

	)

356 
	#PA_RWLOCK
 
±hªad_rwlock_t


	)

357 
	#PA_RWLockInô
(
x
Ë
	`±hªad_rwlock_öô
(&x, 
NULL
)

	)

358 
	#PA_RWLockUnöô
(
x
Ë
	`±hªad_rwlock_de°roy
(&x)

	)

359 
BOOL
 
_RWLockLockR
(
PA_RWLOCK
 *
x
, 
DWORD
 
timeout
);

360 
BOOL
 
_RWLockLockW
(
PA_RWLOCK
 *
x
, 
DWORD
 
timeout
);

361 
	#PA_RWLockLockR
(
x
Ë
	`±hªad_rwlock_rdlock
(&x)

	)

362 
	#PA_RWLockLockW
(
x
Ë
	`±hªad_rwlock_wæock
(&x)

	)

363 
	#PA_RWLockFaûed
(
›
Ë(› !0)

	)

364 
	#PA_RWLockLockRTimed
(
x
, 
timeout
Ë
	`_RWLockLockR
(&x,Åimeout)

	)

365 
	#PA_RWLockLockWTimed
(
x
, 
timeout
Ë
	`_RWLockLockR
(&x,Åimeout)

	)

366 
	#PA_RWLockU∆ock
(
x
Ë
	`±hªad_rwlock_u∆ock
(&x)

	)

372 
	#PA_SåCa£Cmp
 
°rˇ£cmp


	)

373 
	#PA_SåNCa£Cmp
 
°∫ˇ£cmp


	)

374 
	#PA_SåNCmp
 
°∫cmp


	)

379 
	#PA_HFILE
 

	)

380 
	#PA_Wrôe
 
wrôe


	)

381 
	#PA_Ród
 
ªad


	)

382 
	#PA_FûeIsVÆid
(
h
Ë(h>=0)

	)

383 
	#PA_FûeClo£
(
f
Ë
	`˛o£
(f)

	)

384 
BOOL
 
PA_DñëeFûe
(c⁄° *
‚
);

389 
DWORD
 
PA_GëTickCou¡
();

391 #ifde‡
__˝lu•lus


402 #ifde‡
__˝lu•lus


408 
PA_HTHREAD
 
PA_ThªadCª©e
(
PA_ThªadRoutöe
* 
routöe
, * 
d©a
);

409 
PA_SockëSëNBlk
(
PA_SOCKET
 
s
, 
BOOL
 
b
);

410 
PA_SockëSëLögî
(
PA_SOCKET
 
s
, 
⁄off
, 
lögî
);

415 
BOOL
 
PA_PùeCª©e
(
PA_PIPE
 *
pHPùeRd
, PA_PIPE *
pHPùeWπ
);

416 
BOOL
 
PA_PùeClo£
(
PA_PIPE
 
hPùe
);

421 #ifde‡
_DEBUG


422 #i‡
deföed
(
WIN32
Ë&& deföed(
__˝lu•lus
Ë&& deföed(
_USE_MFC
Ë&& !deföed(
_CONSOLE
)

423 
	#dbg_msg
 
TRACE


	)

424 
	#PRINTF
 
TRACE


	)

426 
	#dbg_msg
 
¥ötf


	)

427 
	#PRINTF
 
¥ötf


	)

429 
dbg_bö
(c⁄° *
tôÀ
, c⁄° *
p
, 
size
);

431 #ifde‡
WIN32


432 
	#dbg_msg
(
fmt
, 
__VA_ARGS__
)

	)

434 
	#dbg_msg
(
fmt
, 
¨gs
...)

	)

436 
	#dbg_bö
(
x
,
y
,
z
)

	)

439 #ifde‡
__ANDROID__


440 
	~<™droid/log.h
>

442 
™droid_log
(
Àvñ
, c⁄° *
èg
, c⁄° *
sfmt
, ...);

443 
	#LOG
(
sfmt
, 
¨gs
...Ë
	`™droid_log
(
ANDROID_LOG_INFO
, "öfo", sfmt, ##¨gs)

	)

444 
	#LOGW
(
sfmt
, 
¨gs
...Ë
	`™droid_log
(
ANDROID_LOG_WARN
, "w¨n", sfmt, ##¨gs)

	)

445 
	#LOGE
(
sfmt
, 
¨gs
...Ë
	`™droid_log
(
ANDROID_LOG_ERROR
, "îr‹", sfmt, ##¨gs)

	)

447 #unde‡
dbg_msg


448 
	#dbg_msg
 
LOG


	)

450 #ñi‡
deföed
(
__LINUX__
)

452 
	#LOG
(
sfmt
, 
¨gs
...Ëdÿ{ 
	`dbg_msg
(sfmt, ##¨gs); dbg_msg("\n"); } 0)

	)

453 
	#LOGW
(
sfmt
, 
¨gs
...Ëdÿ{ 
	`dbg_msg
(sfmt, ##¨gs); dbg_msg("\n"); } 0)

	)

454 
	#LOGE
(
sfmt
, 
¨gs
...Ëdÿ{ 
	`dbg_msg
(sfmt, ##¨gs); dbg_msg("\n"); } 0)

	)

456 #ñi‡
deföed
(
WIN32
)

458 
	#LOG
(
sfmt
, ...Ëdÿ{ 
	`dbg_msg
(sfmt, 
__VA_ARGS__
); dbg_msg("\n"); } 0)

	)

459 
	#LOGW
(
sfmt
, ...Ëdÿ{ 
	`dbg_msg
(sfmt, 
__VA_ARGS__
); dbg_msg("\n"); } 0)

	)

460 
	#LOGE
(
sfmt
, ...Ëdÿ{ 
	`dbg_msg
(sfmt, 
__VA_ARGS__
); dbg_msg("\n"); } 0)

	)

464 #ifde‡
__˝lu•lus


	@rudp.c

19 
	~<°dlib.h
>

20 
	~<°dio.h
>

21 
	~"rudp_imp.h
"

22 
	~"rudp.h
"

23 
	~"¸c32.h
"

25 #i‚de‡
mö


26 
	#mö
(
x
,
y
Ë((x)<(y)?(x):(y))

	)

28 #i‚de‡
max


29 
	#max
(
x
,
y
Ë((x)>(y)?(x):(y))

	)

32 #i‚de‡
off£tof


33 
	#off£tof
(
s
, 
m
Ë(()(&((s*)0)->m))

	)

36 #ifde‡
WIN32


37 
	#SETEVENT
(
evít
Ë
	`SëEvít
”vít)

	)

39 
	#SETEVENT
(
evít
Ë
	`±hªad_c⁄d_sig«l
(&evít)

	)

41 
	#SAFE_FREE
(
p
Ëif’Ë{ 
	`‰ì
’);Ö = 
NULL
; }

	)

43 
PA_MUTEX
 
	gmuãx_sock_li°
;

44 
LIST_HEAD
(
sock_li°
);

46 
PA_HTHREAD
 
	ghthd
;

47 vﬁ©ûê
	grun
 = 1;

49 
PA_MUTEX
 
	gmuãx_pkt_poﬁ
;

50 
	gn_‰ì_pkt
 = 0;

51 
rudp_pkt
 *
	g‰ì_pkt
 = 
NULL
;

53 
	gsockw_r
 = -1, 
	gsockw_s
;

54 
	souçut_nŸify
 {

55 
rudp_sockë
 *
	ms
;

56 
	mchno
;

59 
	grudp_now
 = 0;

63 
	#RO_NORMAL
 0

	)

64 
	#RO_FORCE
 1

	)

65 
	#RO_REXMT
 2

	)

66 
	#RO_ONLYONE
 3

	)

68 
	#INITIAL_SEQ_NO
 0

	)

70 
	#FASTRETRANS
 0

	)

71 
	#FASTRETRANS2
 1

72 
	#CONGESTED
 2

	)

75 
	#ACKT_DELAYED
 1

	)

76 
	#ACKT_OPENWND
 2

	)

78 #ifde‡
_DEBUG_RUDP


79 * 
	$IP2STR
(
ù
, 
ùs
[16])

81 
Àn
 = 
	`•rötf
(
ùs
, "%d.", 
ù
&0xFF);

82 
Àn
 +
	`•rötf
(
ùs
+Àn, "%d.", (
ù
>>8)&0xFF);

83 
Àn
 +
	`•rötf
(
ùs
+Àn, "%d.", (
ù
>>16)&0xFF);

84 
Àn
 +
	`•rötf
(
ùs
+Àn, "%d", (
ù
>>24)&0xFF);

85  
ùs
;

86 
	}
}

88 
	$_¥ötTime
()

90 
sf
[16];

91 #ifde‡
WIN32


92 
SYSTEMTIME
 
t
;

93 
	`GëLoˇlTime
(&
t
);

94 
	`•rötf
(
sf
, "%.06f", 
t
.
wMûli£c⁄ds
/1000.0);

95 
	`PRINTF
("%02d:%02d:%02d.%† ", 
t
.
wHour
,Å.
wMöuã
,Å.
wSec⁄d
, 
sf
+2);

97 
timevÆ
 
tv
;

98 
tm
 
_tm
;

99 
	`gëtimeofday
(&
tv
, 
NULL
);

100 
	`loˇ…ime_r
(&
tv
.
tv_£c
, &
_tm
);

101 
	`•rötf
(
sf
, "%.06f", 
tv
.
tv_u£c
/1000000.0);

102 
	`PRINTF
("%02d:%02d:%02d.%† ", 
_tm
.
tm_hour
, _tm.
tm_mö
, _tm.
tm_£c
, 
sf
+2);

104 
	}
}

105 
	#PHF_FROM
 0x10000000

	)

106 
	#PHF_DATA
 0x20000000

	)

107 
	$__¥ötHdr
(c⁄° 
rudp_pcb
 *
pcb
, c⁄° 
rudp_hdr
 *
phdr
, c⁄° 
sockaddr_ö
 *
∑
, 
phf
, 
d©a_Àn
)

109 
ù
[16];

110 
	`_¥ötTime
();

111 if(
phf
 & 
PHF_FROM
)

113 
	`PRINTF
("%s.%d > ", 
	`IP2STR
(
∑
->
sö_addr
.
s_addr
, 
ù
), ()
	`¡ohs
’a->
sö_p‹t
));

114 if(
pcb
Ë
	`PRINTF
("%s.%d ", 
	`IP2STR
’cb->
loˇl
.
sö_addr
.
s_addr
, 
ù
), ()
	`¡ohs
’cb->loˇl.
sö_p‹t
));

118 if(
pcb
Ë
	`PRINTF
("%s.%d > ", 
	`IP2STR
’cb->
loˇl
.
sö_addr
.
s_addr
, 
ù
), ()
	`¡ohs
’cb->loˇl.
sö_p‹t
));

119 
	`PRINTF
("%s.%d ", 
	`IP2STR
(
∑
->
sö_addr
.
s_addr
, 
ù
), ()
	`¡ohs
’a->
sö_p‹t
));

121 
	`PRINTF
("c:%d ", 
phdr
->
Êags
.
chno
);

123 if(
d©a_Àn
)

125 
	`PRINTF
("P s:%u(%dË", 
	`¡ohl
(
phdr
->
£qno
), 
d©a_Àn
);

127 
	`¥ötf
(". ");

128 if(
phdr
->
Êags
.
syn
Ë
	`PRINTF
("syn ");

129 if(
phdr
->
Êags
.
ack
Ë
	`PRINTF
("ack %u(%dË", 
	`¡ohl
’hdr->
ackno
),Öhdr->Êags.
n_loss
);

130 if(
phdr
->
Êags
.
r°
Ë
	`PRINTF
("rst ");

131 if(
phdr
->
Êags
.
fö
Ë
	`PRINTF
("fin ");

132 
	`PRINTF
("wö %d ", ()
	`WINDOW_NTOH
(
phdr
->
Êags
.
wödow
));

134 if(
pcb
)

136 
	`PRINTF
("[rwnd %d cwnd %d s°h %d", 
pcb
->
ch™√l
[
phdr
->
Êags
.
chno
].
sbuf
.
rwnd
,Öcb->
cwnd
,Öcb->
s°hªsh
);

137 if(
phdr
->
Êags
.
ack
 && (
phf
&
PHF_FROM
))

139 
	`PRINTF
("Ñtÿ%d", 
pcb
->
πo
);

140 
	`PRINTF
("Ñtw %d", 
pcb
->
πw_size
);

141 if(
phdr
->
Êags
.
n_loss
Ë
	`PRINTF
("Üost %d",Öhdr->flags.n_loss);

143 
	`PRINTF
(" u« %d", 
pcb
->
ch™√l
[
phdr
->
Êags
.
chno
].
sbuf
.
n_u«cked
);

144 
	`PRINTF
("]");

146 
	`PRINTF
("\n");

147 #ifde‡
WIN32


148 
	`fÊush
(
°dout
);

150 
	}
}

151 
	$_¥ötHdr
(c⁄° 
rudp_pcb
 *
pcb
, c⁄° 
rudp_hdr
 *
phdr
, c⁄° 
sockaddr_ö
 *
∑
)

153 
	`__¥ötHdr
(
pcb
, 
phdr
, 
∑
, 0, 0);

154 
	}
}

155 
	$_¥ötPkt
(c⁄° 
rudp_pcb
 *
pcb
, c⁄° 
rudp_pkt
 *
pkt
, 
phf
, c⁄° 
sockaddr_ö
 *
∑
)

157 if(
pkt
->
Àn
Ë{ 
phf
 |
PHF_DATA
; }

158 
	`__¥ötHdr
(
pcb
, &
pkt
->
hdr
, 
∑
, 
phf
,Ökt->
Àn
);

159 
	}
}

161 
	#_¥ötHdr
(
a
,
b
,
c
)

	)

162 
	#_¥ötPkt
(
a
,
b
,
c
,
d
)

	)

163 
	#_¥ötTime
()

	)

166 
	#DELAY_ACK_MS
 100

	)

167 
	#RTT_UINT
 200

168 
	#RTT_MIN
 (1000/
RTT_UINT
)

169 

	)

170 
	#MAX_REXMT_ATTEMPT
 7

	)

171 
	grudp_backoff
[
MAX_REXMT_ATTEMPT
+1] = { 1, 2, 4, 8, 16, 32, 64, 64 };

172 
	#MAX_RECONN_ATTEMPT
 5

	)

173 
	gc⁄n_backoff
[
MAX_RECONN_ATTEMPT
+1] = { 
RTT_MIN
, 1*RTT_MIN, 2*RTT_MIN, 2*RTT_MIN, 2*RTT_MIN, 2*RTT_MIN };

175 
rudp_pkt
 *
_MBufGëPackë
();

176 
_MBufPutPackë
(
rudp_pkt
 *
pkt
);

177 
_Pro˚ssPackë
(
rudp_sockë
 *
s
, 
rudp_pkt
 *
pkt
, c⁄° 
sockaddr
 *
‰om
, 
‰om_Àn
);

178 
_Di•©chPackë
(
rudp_sockë
 *
s
, 
rudp_pkt
 *
pkt
, c⁄° 
sockaddr
 *
‰om
, 
‰om_Àn
);

179 
INLINE
 
_£ndPackë
(
rudp_sockë
 *
s
, 
rudp_ch™√l
 *
pch
, 
rudp_pkt
 *
pkt
);

180 
_£ndRe£t
(
rudp_sockë
 *
s
, c⁄° 
sockaddr
 *
to
);

181 
_£ndHódî
(
rudp_sockë
 *
s
, 
rudp_hdr
 *
phdr
);

182 
_£ndSyn
(
rudp_sockë
 *
s
);

183 
_£ndSynAck
(
rudp_sockë
 *
s
);

184 
_£ndAck
(
rudp_sockë
 *
s
, 
chno
);

185 
_£ndFö
(
rudp_sockë
 *
s
);

187 (*
	tTimîH™dÀr
)(
	trudp_sockë
 *
	ts
);

188 
	`_timîProc
(
TimîH™dÀr
 
h™dÀr
);

189 
	`_h™dÀTimî500ms
(
rudp_sockë
 *
s
);

190 
	`_h™dÀTimî200ms
(
rudp_sockë
 *
s
);

192 
rudp_pkt
 *
	$_MBufGëPackë
()

194 
rudp_pkt
 *
p
;

196 
	`PA_MuãxLock
(
muãx_pkt_poﬁ
);

197 if(
‰ì_pkt
)

199 
p
 = 
‰ì_pkt
;

200 
‰ì_pkt
 = fªe_pkt->
√xt
;

201 
n_‰ì_pkt
 --;

205 
p
 = (
rudp_pkt
*)
	`mÆloc
((rudp_pkt));

206 if(!
p
Ë 
NULL
;

208 
p
->
√xt
 = 
NULL
;

209 
p
->
hdr
.
u32_Êags
 = 0;

210 
p
->
hdr
.
Êags
.
rudp
 = 
RUDP_HEADER_TAG
;

211 
p
->
Àn
 = 0;

212 
p
->
å™s
 = 0;

213 
p
->
pd©a
 =Ö->
d©a
;

214 
	`PA_MuãxU∆ock
(
muãx_pkt_poﬁ
);

216  
p
;

217 
	}
}

218 
	$_MBufPutPackë
(
rudp_pkt
 *
pkt
)

220 
	`PA_MuãxLock
(
muãx_pkt_poﬁ
);

221 if(
n_‰ì_pkt
 > 256)

223 
	`‰ì
(
pkt
);

227 
pkt
->
√xt
 = 
‰ì_pkt
;

228 
‰ì_pkt
 = 
pkt
;

229 
n_‰ì_pkt
++;

231 
	`PA_MuãxU∆ock
(
muãx_pkt_poﬁ
);

232 
	}
}

234 
rudp_sockë
 *
	$_AŒocRudpSockë
()

236 
rudp_sockë
 *
sock
 = (rudp_sockë*)
	`mÆloc
((rudp_socket));

237 
sock
->
èg
 = 
RUDP_SOCKET_TAG
;

239 
sock
->
c⁄√˘ed
 = 0;

240 
sock
->
°©e
 = 
RS_CLOSED
;

241 
sock
->
pcb
 = 
NULL
;

242 
sock
->
Êags
 = 0;

243 
sock
->
îr
 = 0;

244 
sock
->
rcvbuf_sz
 = 
DEFAULT_RCVBUF_SIZE
;

246 
	`PA_MuãxInô
(
sock
->
muãx_r
);

247 
	`PA_MuãxInô
(
sock
->
muãx_w
);

248 #ifde‡
WIN32


249 
sock
->
evít_r
 = 
	`Cª©eEvít
(
NULL
, 
FALSE
, FALSE, NULL);

250 
sock
->
evít_w
 = 
	`Cª©eEvít
(
NULL
, 
FALSE
, FALSE, NULL);

252 
	`±hªad_c⁄d_öô
(&
sock
->
evít_r
, 
NULL
);

253 
	`±hªad_c⁄d_öô
(&
sock
->
evít_w
, 
NULL
);

256 
	`INIT_LIST_HEAD
(&
sock
->
ö°_li°
);

257 
	`INIT_LIST_HEAD
(&
sock
->
li°í_queue
);

258 
	`INIT_LIST_HEAD
(&
sock
->
ac˚±ed_li°
);

259  
sock
;

260 
	}
}

262 
rudp_pcb
 *
	$_AŒocRudpPcb
(
uöt32
 
rcvbuf_size
, uöt32 
öôül_£qno
, uöt32 
≥î_öôül_£qno
, 
øwnd
)

264 
rudp_pcb
 *
pcb
;

265 
i
;

266 
pcb
 = (
rudp_pcb
*)
	`ˇŒoc
((rudp_pcb), 1);

267 
i
=0; i<
MAX_PHY_CHANNELS
; i++)

269 
¢dbuf
 *
psbuf
;

270 
rcvbuf
 *
¥buf
;

272 
psbuf
 = &
pcb
->
ch™√l
[
i
].
sbuf
;

273 
psbuf
->
£qno
 = 
öôül_£qno
;

274 
psbuf
->
max_pkts
 = 
DEFAULT_SNDBUF_SIZE
;

275 
psbuf
->
rwnd
 =Ösbuf->
øwnd
 =Ñawnd;

277 
¥buf
 = &
pcb
->
ch™√l
[
i
].
rbuf
;

278 
¥buf
->
ex≥˘ed_£qno
 =Örbuf->
fú°_£q
 = 
≥î_öôül_£qno
;

279 
¥buf
->
q_size
 = 
rcvbuf_size
;;

280 
¥buf
->
pkt_q
 = (
rudp_pkt
**)
	`ˇŒoc
((*), 
rcvbuf_size
);

281 
¥buf
->
wö
 =Örbuf->
q_size
 - 1;

283 
pcb
->
cwnd
 = 2;

284 
pcb
->
πw_size
 = 
øwnd
/2;

285 
pcb
->
rwö_size
 = 
øwnd
;

286 
pcb
->
s°hªsh
 = 
øwnd
;

288 
pcb
->
§â
 = 0;

289 
pcb
->
sdev
 = 3;

290 
pcb
->
πo
 = 6;

292  
pcb
;

293 
	}
}

295 
	$_ãrmö©eSockëI¡î«Œy
(
rudp_sockë
 *
s
, 
îr
)

297 if(
s
->
°©e
 =
RS_DEAD
) ;

299 
	`PA_MuãxLock
(
s
->
muãx_r
);

300 
	`PA_MuãxLock
(
s
->
muãx_w
);

302 
s
->
°©e
 = 
RS_DEAD
;

303 
s
->
îr
 =Érr;

305 if(
s
->
pcb
)

307 
i
;

308 
i
=0; i<
MAX_PHY_CHANNELS
; i++)

310 
rudp_pkt
 *
c
;

311 
rcvbuf
 *
¥b
;

313 
c
 = 
s
->
pcb
->
ch™√l
[
i
].
sbuf
.
fú°
;

314 
c
)

316 
rudp_pkt
 *
p
 = 
c
;

317 
c
 = c->
√xt
;

318 
	`_MBufPutPackë
(
p
);

321 
¥b
 = &
s
->
pcb
->
ch™√l
[
i
].
rbuf
;

322 ; 
¥b
->
hód
 !¥b->
èû
;Örb->hód = (¥b->hód+1)%¥b->
q_size
)

323 if(
¥b
->
pkt_q
[¥b->
hód
])

324 
	`_MBufPutPackë
(
¥b
->
pkt_q
[¥b->
hód
]);

325 
	`‰ì
(
¥b
->
pkt_q
);

327 
	`‰ì
(
s
->
pcb
);

328 
s
->
pcb
 = 
NULL
;

331 
	`SETEVENT
(
s
->
evít_r
);

332 
	`SETEVENT
(
s
->
evít_w
);

334 
	`PA_MuãxU∆ock
(
s
->
muãx_w
);

335 
	`PA_MuãxU∆ock
(
s
->
muãx_r
);

339 if(
	`li°_em±y
(&
s
->
ö°_li°
Ë&& !li°_em±y(&s->
li°í_queue
))

341 
	`li°_dñ
(&
s
->
li°í_queue
);

342 
	`‰ì
(
s
);

346 
	}
}

350 
	$_CÀ™upSockë
(
rudp_sockë
 *
s
, 
îr
)

352 if(
s
->
°©e
 =
RS_DEAD
) ;

354 
	`_ãrmö©eSockëI¡î«Œy
(
s
, 
îr
);

356 
	`PA_MuãxUnöô
(
s
->
muãx_r
);

357 
	`PA_MuãxUnöô
(
s
->
muãx_w
);

358 #ifde‡
WIN32


359 
	`Clo£H™dÀ
(
s
->
evít_r
);

360 
	`Clo£H™dÀ
(
s
->
evít_w
);

362 
	`±hªad_c⁄d_de°roy
(&
s
->
evít_r
);

363 
	`±hªad_c⁄d_de°roy
(&
s
->
evít_w
);

366 if(!
	`li°_em±y
(&
s
->
li°í_queue
))

368 
li°_hód
 *
µ
, *
qq
;

369 
	`li°_f‹_óch_ß„
(
µ
, 
qq
, &
s
->
li°í_queue
)

371 
rudp_sockë
 *
¶
 = 
	`li°_íåy
(
µ
, rudp_sockë, 
li°í_queue
);

372 
	`_CÀ™upSockë
(
¶
, 0);

373 
	`li°_dñ
(
µ
);

374 
	`‰ì
(
¶
);

378 
s
->
°©e
 = 
RS_DEAD
;

380 
	}
}

382 
	$_CÀ™AndFªeSockë
(
rudp_sockë
 *
s
)

384 if(
	`li°_em±y
(&
s
->
ö°_li°
))

386 
	`li°_dñ
(&
s
->
ac˚±ed_li°
);

390 
	`li°_dñ
(&
s
->
ö°_li°
);

391 if(
	`li°_em±y
(&
s
->
ac˚±ed_li°
))

392 
	`PA_SockëClo£
(
s
->
udp_sock
);

395 
rudp_sockë
 *
Ø
 = 
	`li°_íåy
(
s
->
ac˚±ed_li°
.
√xt
, rudp_socket,áccepted_list);

396 
	`INIT_LIST_HEAD
(&
Ø
->
ö°_li°
);

397 
	`li°_add_èû
(&
Ø
->
ö°_li°
, &
sock_li°
);

401 if(
s
->
°©e
 !
RS_DEAD
Ë
	`_CÀ™upSockë
(s, 0);

403 
	`‰ì
(
s
);

404 
	}
}

406 
	$_timîProc
(
TimîH™dÀr
 
h™dÀr
)

408 
li°_hód
 *
p
, *
q
, *
µ
, *
qq
;

410 
	`li°_f‹_óch_ß„
(
p
, 
q
, &
sock_li°
)

412 
rudp_sockë
 *
s
, *
ss
;

413 
s
 = 
	`li°_íåy
(
p
, 
rudp_sockë
, 
ö°_li°
);

415 if(
s
->
°©e
 =
RS_DEAD
) ;

417 
	`li°_f‹_óch_ß„
(
µ
, 
qq
, &
s
->
ac˚±ed_li°
)

419 
ss
 = 
	`li°_íåy
(
µ
, 
rudp_sockë
, 
ac˚±ed_li°
);

420 
	`h™dÀr
(
ss
);

422 
	`li°_f‹_óch_ß„
(
µ
, 
qq
, &
s
->
li°í_queue
)

424 
ss
 = 
	`li°_íåy
(
µ
, 
rudp_sockë
, 
li°í_queue
);

425 
	`h™dÀr
(
ss
);

428 
	`h™dÀr
(
s
);

431 
	}
}

433 
	$_c⁄ge°i⁄Avoid™˚
(
rudp_sockë
 *
s
)

435 if(
s
->
pcb
->
cwnd
 < s->pcb->
s°hªsh
)

437 
s
->
pcb
->
cwnd
++;

439 
s
->
pcb
->
ˇ_˙t
++;

440 if(
s
->
pcb
->
ˇ_˙t
 >s->pcb->
rwö_size
)

442 if(
s
->
pcb
->
πw_size
 < s->pcb->
rwö_size
)

443 
s
->
pcb
->
πw_size
++;

447 
s
->
pcb
->
ˇ_˙t
++;

448 if(
s
->
pcb
->
ˇ_˙t
 >s->pcb->
cwnd
)

450 
s
->
pcb
->
ˇ_˙t
 = 0;

451 if(
s
->
pcb
->
cwnd
 < s->pcb->
rwö_size
)

453 
s
->
pcb
->
cwnd
++;

456 if(
s
->
pcb
->
πw_size
 < s->pcb->
rwö_size
)

457 
s
->
pcb
->
πw_size
++;

460 
	}
}

462 
	$_c⁄ge°i⁄Dëe˘ed
(
rudp_sockë
 *
s
, 
chno
, 
wh©
)

465 
rudp_pcb
 *
pcb
;

469 
pcb
 = 
s
->pcb;

470 
pcb
->
s°hªsh
 = 
	`mö
’cb->
ch™√l
[
chno
].
sbuf
.
øwnd
,Öcb->
cwnd
)/2;

471 if(
pcb
->
s°hªsh
 < 2)Öcb->ssthresh = 2;

473 if(
wh©
 =
CONGESTED
Ë
pcb
->
cwnd
 = 1;

474 
pcb
->
cwnd
 =Öcb->
s°hªsh
 + 3;

476 
wh©
)

478 
CONGESTED
:

479 
FASTRETRANS2
:

480 
pcb
->
πw_size
 >>= 1;

481 if(
pcb
->
πw_size
 < 8)Öcb->rtw_size = 8;

484 
FASTRETRANS
:

485 
pcb
->
πw_size
 -=Öcb->rtw_size >> 2;

486 if(
pcb
->
πw_size
 < 8)Öcb->rtw_size = 8;

490 
	`_¥ötTime
();

491 
	`dbg_msg
("%s: cwnd=%d, s°hªsh=%d\n", 
wh©
==
CONGESTED
?"c⁄ge°ed":"du∂iˇãd ACKs", 
pcb
->
cwnd
,Öcb->
s°hªsh
);

492 
	}
}

494 
INLINE
 
	$_ˇlcCurWnd
(
rudp_sockë
 *
s
, 
¢dbuf
 *
psbuf
)

498  
	`mö
(
s
->
pcb
->
cwnd
, 
psbuf
->
rwnd
);

502 
	}
}

504 
	$sig«lOuçut
(
rudp_sockë
 *
s
, 
chno
)

506 
ouçut_nŸify
 
nŸify
 = { 
s
, 
chno
 };

507 
	`PA_Síd
(
sockw_s
, &
nŸify
, (notify), 0);

508 
	}
}

515 
	$_RudpOuçut
(
rudp_sockë
 *
s
, 
chno
, 
›t
)

517 
¢dbuf
 *
psbuf
;

518 
rcvbuf
 *
¥buf
;

519 
rudp_ch™√l
 *
pch
;

521 if(
s
->
èg
 !
RUDP_SOCKET_TAG
)  -1;

522 if(
s
->
°©e
 <
RS_CLOSED
)  -1;

524 
pch
 = &
s
->
pcb
->
ch™√l
[
chno
];

525 
psbuf
 = &
pch
->
sbuf
;

526 
¥buf
 = &
pch
->
rbuf
;

529 if(
›t
 =
RO_REXMT
)

531 if(
¥buf
->
should_ack
 =
ACKT_DELAYED
)

533 
¥buf
->
should_ack
 = 0;

534 
psbuf
->
fú°
->
hdr
.
Êags
.
ack
 = 1;

535 
psbuf
->
fú°
->
hdr
.
ackno
 = 
	`¡ohl
(
¥buf
->
ex≥˘ed_£qno
);

536 
psbuf
->
fú°
->
hdr
.
Êags
.
n_loss
 = 
¥buf
->
n_lo°
;

538 
	`_£ndPackë
(
s
, 
pch
, 
psbuf
->
fú°
);

539 
psbuf
->
fú°
->
hdr
.
Êags
.
ack
 = 0;

543 if(((
¥buf
->
should_ack
 =
ACKT_DELAYED
Ë&& !
psbuf
->
fú°
Ë||Örbuf->should_ack =
ACKT_OPENWND
)

545 
	`_£ndAck
(
s
, 
chno
);

546 
¥buf
->
should_ack
 = 0;

551 if(
›t
 =0 && 
pch
->
sbuf
.
øwnd
 == 0)

553 if(
pch
->
timî
[
RCT_REXMT
] == 0)

554 
pch
->
timî
[
RCT_PERSIST
] = 
s
->
pcb
->
πo
 * 
rudp_backoff
[pch->
sbuf
.
fú°
?pch->sbuf.fú°->
å™s
:0];

559 
rudp_pkt
 *
p
;

561 
p
 = 
psbuf
->
nŸ_£¡
;

562 
pch
->
timî
[
RCT_PERSIST
] = 0;

563 if(
p
 && (
›t
 =
RO_FORCE
 || 
	`_ˇlcCurWnd
(
s
, 
psbuf
Ë>Ösbuf->
n_u«cked
 ))

566 if(
¥buf
->
should_ack
 =
ACKT_DELAYED
)

568 
p
->
hdr
.
Êags
.
ack
 = 1;

569 
p
->
hdr
.
ackno
 = 
	`¡ohl
(
¥buf
->
ex≥˘ed_£qno
);

570 
p
->
hdr
.
Êags
.
n_loss
 = 
¥buf
->
n_lo°
;

571 
¥buf
->
should_ack
 = 0;

573 
psbuf
->
n_u«cked
++;

574 
	`_£ndPackë
(
s
, 
pch
, 
p
);

575 
p
->
hdr
.
Êags
.
ack
 = 0;

576 
p
 =Ö->
√xt
;

578 if(
p
 &&Ö->
£qno
 < 
psbuf
->
nŸ_£¡
->seqno)

580 
	`dbg_msg
("#####################################################\n");

582 
psbuf
->
nŸ_£¡
 = 
p
;

585 
psbuf
->
rwnd
--;

587 if(
›t
 =
RO_ONLYONE
)  1;

589 if(
	`_ˇlcCurWnd
(
s
, 
psbuf
Ë&& 
p
)

599 
	}
}

601 
	$_h™dÀTimî500ms
(
rudp_sockë
 *
s
)

603 
i
, 
j
;

604 
rudp_pcb
 *
pcb
;

606 if(
s
->
°©e
 =
RS_LISTEN
 || s->°©ê=
RS_DEAD
) ;

607 
pcb
 = 
s
->pcb;

608 if(
pcb
)

610 
sbuf_is_em±y
 = 1;

613 
	`PA_MuãxLock
(
s
->
muãx_w
);

614 
i
=0; i<
MAX_PHY_CHANNELS
; i++)

616 if(
pcb
->
ch™√l
[
i
].
sbuf
.
fú°
Ë
sbuf_is_em±y
 = 0;

617 
j
=0; j<
RCT_CNT
; j++)

619 
rudp_ch™√l
 *
pch
 = &
pcb
->
ch™√l
[
i
];

620 if(
pch
->
timî
[
j
] == 0) ;

621 
pch
->
timî
[
j
] --;

622 if(
pch
->
timî
[
j
] == 0)

624 
j
)

626 
RCT_PERSIST
:

627 
	`dbg_msg
("PersistÅimeout.\n");

628 
	`_RudpOuçut
(
s
, 
i
, 
RO_FORCE
);

630 
RCT_REXMT
:

631 if(
pch
->
sbuf
.
fú°
)

633 if(
pch
->
sbuf
.
fú°
->
å™s
 >
MAX_REXMT_ATTEMPT
)

635 
	`PA_MuãxU∆ock
(
s
->
muãx_w
);

636 
	`_CÀ™upSockë
(
s
, 
ERUDP_TIMEOUTED
);

637 
s
->
°©e
 = 
RS_DEAD
;

638 
s
->
îr
 = 
ERUDP_TIMEOUTED
;

641 if(
pch
->
sbuf
.
fú°
->
å™s
)

643 
	`_c⁄ge°i⁄Dëe˘ed
(
s
, 
i
, 
CONGESTED
);

644 
	`_c⁄ge°i⁄Avoid™˚
(
s
);

645 
	`_RudpOuçut
(
s
, 
i
, 
RO_REXMT
);

646 
pch
->
c⁄ge°ed
 = 1;

647 
pch
->
sbuf
.
pkt_πtm_°¨t
 =Öch->sbuf.
nŸ_£¡
;

655 if(
sbuf_is_em±y
 && 
s
->
°©e
 =
RS_FIN_QUEUED
)

657 
	`_£ndFö
(
s
);

658 
s
->
°©e
 = 
RS_FIN_WAIT_1
;

659 
s
->
timî
[
RT_KEEP
] = 
RTT_MIN
 * 
RTV_KEEP_CLOSE
;

661 
	`PA_MuãxU∆ock
(
s
->
muãx_w
);

664 
i
=0; i<
RT_CNT
; i++)

666 if(
s
->
timî
[
i
] == 0) ;

668 
s
->
timî
[
i
]--;

669 if(
s
->
timî
[
i
] == 0)

671 
i
)

673 
RT_KEEP
:

674 if(
s
->
°©e
 =
RS_SYN_RCVD
 || s->°©ê=
RS_SYN_SENT
)

676 if(
s
->
pcb
->
ªå_˙t
 >
MAX_RECONN_ATTEMPT
)

678 if(
	`li°_em±y
(&
s
->
ö°_li°
))

680 
	`li°_dñ
(&
s
->
li°í_queue
);

681 
	`INIT_LIST_HEAD
(&
s
->
li°í_queue
);

682 
	`_CÀ™upSockë
(
s
, 
ERUDP_TIMEOUTED
);

683 
	`‰ì
(
s
);

688 
s
->
îr
 = 
ERUDP_TIMEOUTED
;

689 
s
->
°©e
 = 
RS_CLOSED
;

690 
	`SETEVENT
(
s
->
evít_w
);

696 
s
->
timî
[
RT_KEEP
] = 
c⁄n_backoff
[++s->
pcb
->
ªå_˙t
];

697 if(
s
->
°©e
 =
RS_SYN_SENT
)

698 
	`_£ndSyn
(
s
);

700 
	`_£ndSynAck
(
s
);

703 if(
s
->
°©e
 >
RS_FIN_QUEUED
)

705 
	`dbg_msg
("˛ó¿™d fªê%p\n", 
s
);

706 
	`_CÀ™AndFªeSockë
(
s
);

709 
RT_2MSL
:

714 
	}
}

716 
	$_h™dÀTimî200ms
(
rudp_sockë
 *
s
)

718 if(
s
->
pcb
)

720 
i
;

721 
i
=0; i<
MAX_PHY_CHANNELS
; i++)

723 
rcvbuf
 *
¥b
 = &
s
->
pcb
->
ch™√l
[
i
].
rbuf
;

724 if(
¥b
->
should_ack
)

727 
	`PA_MuãxLock
(
s
->
muãx_w
);

728 
	`_RudpOuçut
(
s
, 
i
, 0);

730 
	`PA_MuãxU∆ock
(
s
->
muãx_w
);

734 
	}
}

735 
	$_£ndHódî
(
rudp_sockë
 *
s
, 
rudp_hdr
 *
phdr
)

737 
	`_¥ötHdr
(
s
->
pcb
, 
phdr
, &s->pcb->
≥î
);

738 
phdr
->
¸c32
 = 
	`ˇlc_¸c32
(0, (*Ìhdr, 
	`off£tof
(
rudp_hdr
, crc32));

739 
	`PA_SídTo
(
s
->
udp_sock
, 
phdr
, (
rudp_hdr
), 0,

740 
s
->
c⁄√˘ed
?
NULL
:(
sockaddr
*)&s->
pcb
->
≥î
,

741 (
sockaddr
));

742 
	}
}

744 
	$_£ndPackë
(
rudp_sockë
 *
s
, 
rudp_ch™√l
 *
pch
, 
rudp_pkt
 *
pkt
)

746 if(
pch
->
timî
[
RCT_REXMT
] == 0)

747 
pch
->
timî
[
RCT_REXMT
] = 
s
->
pcb
->
πo
 * 
rudp_backoff
[
pkt
->
å™s
];

748 
pkt
->
ts
 = 
rudp_now
;

750 
pkt
->
hdr
.
Êags
.
wödow
 = 
	`WINDOW_HTON
(
pch
->
rbuf
.
wö
);

751 if(
pkt
->
å™s
 ++ == 0)

752 
pkt
->
hdr
.
¸c32
 = 
	`ˇlc_¸c32
(0, (*)&pkt->hdr, 
	`off£tof
(
rudp_hdr
, crc32));

754 
	`_¥ötPkt
(
s
->
pcb
, 
pkt
, 
PHF_DATA
|
pch
->
sbuf
.
rwnd
, &s->pcb->
≥î
);

755 
	`PA_SídTo
(
s
->
udp_sock
, &
pkt
->
hdr
, (
rudp_hdr
Ë+Ökt->
Àn
, 0,

756 
s
->
c⁄√˘ed
?
NULL
:(
sockaddr
*)&s->
pcb
->
≥î
,

757 (
sockaddr
));

758 
	}
}

759 
	$_£ndSyn
(
rudp_sockë
 *
s
)

761 
rudp_hdr
 
hdr
;

762 
hdr
.
u32_Êags
 = 0;

763 
hdr
.
Êags
.
rudp
 = 
RUDP_HEADER_TAG
;

764 
hdr
.
Êags
.
syn
 = 1;

765 
hdr
.
£qno
 = 
	`ht⁄l
(
s
->
pcb
->
ch™√l
[0].
sbuf
.seqno);

766 
hdr
.
ackno
 = 0;

767 
hdr
.
Êags
.
wödow
 = 
	`WINDOW_HTON
(
s
->
pcb
->
ch™√l
[0].
rbuf
.
wö
);

768 
	`_£ndHódî
(
s
, &
hdr
);

769 
	}
}

770 
	$_£ndSynAck
(
rudp_sockë
 *
s
)

772 
rudp_hdr
 
hdr
;

773 
hdr
.
u32_Êags
 = 0;

774 
hdr
.
Êags
.
rudp
 = 
RUDP_HEADER_TAG
;

775 
hdr
.
Êags
.
syn
 = 1;

776 
hdr
.
£qno
 = 
	`ht⁄l
(
s
->
pcb
->
ch™√l
[0].
sbuf
.seqno);

777 
hdr
.
Êags
.
ack
 = 1;

778 
hdr
.
ackno
 = 
	`ht⁄l
(
s
->
pcb
->
ch™√l
[0].
rbuf
.
ex≥˘ed_£qno
);

779 
hdr
.
Êags
.
wödow
 = 
	`WINDOW_HTON
(
s
->
pcb
->
ch™√l
[0].
rbuf
.
wö
);

780 
	`_£ndHódî
(
s
, &
hdr
);

781 
	}
}

783 
	$_£ndEm±yAck
(
rudp_sockë
 *
s
, 
chno
)

785 
rudp_hdr
 
hdr
;

786 
hdr
.
u32_Êags
 = 0;

787 
hdr
.
Êags
.
rudp
 = 
RUDP_HEADER_TAG
;

788 
hdr
.
£qno
 = 0;

789 
hdr
.
Êags
.
chno
 = chno;

790 
hdr
.
Êags
.
ack
 = 1;

791 
hdr
.
ackno
 = 0;

792 
hdr
.
Êags
.
wödow
 = 0;

793 
	`_£ndHódî
(
s
, &
hdr
);

794 
	}
}

797 
	$_£ndAck
(
rudp_sockë
 *
s
, 
chno
)

799 
rudp_hdr
 
hdr
;

800 
rcvbuf
 *
¥
 = &
s
->
pcb
->
ch™√l
[
chno
].
rbuf
;

802 
hdr
.
u32_Êags
 = 0;

803 
hdr
.
Êags
.
rudp
 = 
RUDP_HEADER_TAG
;

804 
hdr
.
Êags
.
ack
 = 1;

805 
hdr
.
Êags
.
chno
 = chno;

806 
hdr
.
£qno
 = 
	`ht⁄l
(
s
->
pcb
->
ch™√l
[
chno
].
sbuf
.seqno);

807 
hdr
.
ackno
 = 
	`ht⁄l
(
¥
->
ex≥˘ed_£qno
);

808 
hdr
.
Êags
.
n_loss
 = 
¥
->
n_lo°
;

809 
hdr
.
Êags
.
wödow
 = 
	`WINDOW_HTON
(
¥
->
wö
);

810 
	`_£ndHódî
(
s
, &
hdr
);

812 
¥
->
acked_£qno
 =Ör->
ex≥˘ed_£qno
;

813 
¥
->
should_ack
 = 0;

814 
	}
}

815 
	$_£ndFö
(
rudp_sockë
 *
s
)

817 
rudp_hdr
 
hdr
;

818 
hdr
.
u32_Êags
 = 0;

819 
hdr
.
Êags
.
rudp
 = 
RUDP_HEADER_TAG
;

820 
hdr
.
Êags
.
fö
 = 1;

821 
hdr
.
£qno
 = 0;

822 
hdr
.
ackno
 = 0;

823 
hdr
.
Êags
.
wödow
 = 0;

824 
	`_£ndHódî
(
s
, &
hdr
);

825 
	}
}

828 
	$_upd©eRTO
(
rudp_sockë
 *
s
, 
πt
)

830 
πo0
 = 
s
->
pcb
->
πo
;

833 
dπt
 = 
πt
 - 
s
->
pcb
->
§â
;

834 if(
dπt
 > 0)

836 
s
->
pcb
->
§â
 +
dπt
 >> 3;

837 if(
dπt
 > 
s
->
pcb
->
sdev
)

838 
s
->
pcb
->
sdev
 +(
dπt
 - s->pcb->sdev) >> 2;

840 
s
->
pcb
->
sdev
 -(s->pcb->sdev - 
dπt
) >> 2;

844 
dπt
 = -drtt;

845 
s
->
pcb
->
§â
 -
dπt
 >> 3;

846 if(
dπt
 > 
s
->
pcb
->
sdev
)

847 
s
->
pcb
->
sdev
 +(
dπt
 - s->pcb->sdev) >> 2;

849 
s
->
pcb
->
sdev
 -(s->pcb->sdev - 
dπt
) >> 2;

851 
s
->
pcb
->
πo
 = s->pcb->
§â
 + (s->pcb->
sdev
 > 0) ?(s->pcb->sdev << 2):(-s->pcb->sdev << 2);

852 if(
s
->
pcb
->
πo
 < 2) s->pcb->rto = 2;

853 
	`dbg_msg
("πà%d,Ñtÿ%d\n", 
πt
, 
s
->
pcb
->
πo
);

855 if(
πt
 < 
RTT_MIN
)Ñtt = RTT_MIN;

857 
s
->
pcb
->
πo
 = 
πt
;

859 if(
s
->
pcb
->
πo
 - 
πo0
 > 0)

861 
s
->
pcb
->
cwnd
 -= s->pcb->cwnd >> 2;

864 
	}
}

866 
INLINE
 
BOOL
 
	$_isPackëVÆid
(
rudp_pkt
 *
pkt
)

868  
	`ˇlc_¸c32
(0, (*)&
pkt
->
hdr
, 
	`off£tof
(
rudp_hdr
, 
¸c32
)) ==Ökt->hdr.crc32;

869 
	}
}

871 
	$_Di•©chPackë
(
rudp_sockë
 *
s
, 
rudp_pkt
 *
pkt
, c⁄° 
sockaddr
 *
‰om
, 
‰om_Àn
)

873 
li°_hód
 *
µ
, *
qq
;

874 
rudp_sockë
 *
ß
;

875 
sockaddr_ö
 *
•
, *
sf
;

877 
sf
 = (
sockaddr_ö
*)
‰om
;

881 if(
s
->
°©e
 =
RS_LISTEN
)

883 
	`li°_f‹_óch_ß„
(
µ
, 
qq
, &
s
->
li°í_queue
)

885 
ß
 = 
	`li°_íåy
(
µ
, 
rudp_sockë
, 
li°í_queue
);

886 if(!
ß
->
pcb
) ;

887 
•
 = (
sockaddr_ö
*)&
ß
->
pcb
->
≥î
;

888 if(
•
->
sö_addr
.
s_addr
 =
sf
->sö_addr.s_add∏&& sp->
sö_p‹t
 == sf->sin_port)

890 
check_agaö
;

891 if(
pkt
->
hdr
.
Êags
.
r°
)

893 
	`li°_dñ
(&
ß
->
li°í_queue
);

894 
	`INIT_LIST_HEAD
(&
ß
->
li°í_queue
);

895 
	`_CÀ™upSockë
(
ß
, 
ERUDP_RESETED
);

896 
	`‰ì
(
ß
);

900 
check_agaö
 = 0;

901 if(
pkt
->
hdr
.
Êags
.
ack
 && 
ß
->
°©e
 =
RS_SYN_RCVD
)

902 
check_agaö
 = 1;

903 if(
	`_Pro˚ssPackë
(
ß
, 
pkt
, 
‰om
, 
‰om_Àn
) < 0)

904 
	`_MBufPutPackë
(
pkt
);

905 if(
check_agaö
 && 
ß
->
°©e
 =
RS_ESTABLISHED
)

906 
	`SETEVENT
(
s
->
evít_r
);

912 
	`li°_f‹_óch
(
µ
, &
s
->
ac˚±ed_li°
)

914 
ß
 = 
	`li°_íåy
(
µ
, 
rudp_sockë
, 
ac˚±ed_li°
);

915 if(
ß
->
°©e
 >
RS_ESTABLISHED
)

917 
•
 = (
sockaddr_ö
*)&
ß
->
pcb
->
≥î
;

918 if(
•
->
sö_addr
.
s_addr
 =
sf
->sö_addr.s_add∏&& sp->
sö_p‹t
 == sf->sin_port)

920 if(
	`_Pro˚ssPackë
(
ß
, 
pkt
, 
‰om
, 
‰om_Àn
) < 0)

921 
	`_MBufPutPackë
(
pkt
);

928 if(
s
->
°©e
 =
RS_LISTEN
 ||

929 –
s
->
pcb
 && (s->
c⁄√˘ed


930 || (((
•
 = (
sockaddr_ö
*)&
s
->
pcb
->
≥î
), sp->
sö_addr
.
s_addr
 =
sf
->sin_addr.s_addr)

931 && (
•
->
sö_p‹t
 =
sf
->sin_port) ) )

935 if(
	`_Pro˚ssPackë
(
s
, 
pkt
, 
‰om
, 
‰om_Àn
) < 0)

936 
	`_MBufPutPackë
(
pkt
);

941 if(!(
pkt
->
hdr
.
Êags
.
r°
 && 
s
->
°©e
 <= 0))

942 
	`_£ndRe£t
(
s
, 
‰om
);

943 
	`_MBufPutPackë
(
pkt
);

945 
	}
}

947 
	$_PPSèã_E°ablished
(
rudp_sockë
 *
s
, 
rudp_pkt
 *
pkt
, c⁄° 
sockaddr
 *
‰om
, 
‰om_Àn
)

949 
rudp_ch™√l
 *
pch
;

950 
¢dbuf
 *
psbuf
;

951 
rcvbuf
 *
¥buf
;

952 
ﬁd_øwnd
;

953 
chno
;

955 if(
pkt
->
hdr
.
Êags
.
syn
)

957 if(
pkt
->
hdr
.
Êags
.
ack
)

958 
	`_£ndAck
(
s
, 0);

960 
	`_£ndRe£t
(
s
, 
‰om
);

963 if(
pkt
->
hdr
.
Êags
.
fö
)

965 
i
, 
ii
;

966 
	`PA_MuãxLock
(
s
->
muãx_w
);

967 
s
->
°©e
 = 
RS_CLOSE_WAIT
;

968 
	`_£ndAck
(
s
, 0);

969 
s
->
timî
[
RT_KEEP
] = 
RTT_MIN
 * 
RTV_KEEP_CLOSE
;

974 
i
=0; i<
MAX_PHY_CHANNELS
; i++)

976 
¢dbuf
 *
psb
 = &
s
->
pcb
->
ch™√l
[
i
].
sbuf
;

977 
rudp_pkt
 *
c
 = 
psb
->
fú°
;

978 
c
)

980 
rudp_pkt
 *
p
 = 
c
;

981 
c
 = c->
√xt
;

982 
	`_MBufPutPackë
(
p
);

984 
	`mem£t
(
psb
, 0, (
¢dbuf
));

985 
ii
=0; ii<
RCT_CNT
; ii++Ë
s
->
pcb
->
ch™√l
[
i
].
timî
[ii] = 0;

987 
i
=0; i<
RT_CNT
; i++Ë
s
->
timî
[i] = 0;

989 
	`PA_MuãxU∆ock
(
s
->
muãx_w
);

990 
_checkd©a
;

993 
chno
 = 
pkt
->
hdr
.
Êags
.chno;

994 
pch
 = &
s
->
pcb
->
ch™√l
[
chno
];

995 
psbuf
 = &
pch
->
sbuf
;

996 
ﬁd_øwnd
 = 
psbuf
->
øwnd
;

997 
psbuf
->
øwnd
 = 
	`WINDOW_NTOH
(
pkt
->
hdr
.
Êags
.
wödow
);

999 
psbuf
->
rwnd
 =Ösbuf->
øwnd
 -Ösbuf->
n_u«cked
;

1000 if(
psbuf
->
rwnd
 < 0)Ösbuf->rwnd = 0;

1003 if(
pkt
->
hdr
.
Êags
.
ack
 && 
psbuf
->
fú°
)

1005 
uöt32
 
ackno
 = 
	`¡ohl
(
pkt
->
hdr
.ackno);

1007 
	`PA_MuãxLock
(
s
->
muãx_w
);

1008 if(
	`SEQ_LE
(
ackno
, 
psbuf
->
fú°
->
£qno
) )

1010 if(
ﬁd_øwnd
 =0 && 
psbuf
->
øwnd
 > 0)

1012 
	`_RudpOuçut
(
s
, 
pkt
->
hdr
.
Êags
.
chno
, 
RO_FORCE
);

1013 
	`PA_MuãxU∆ock
(
s
->
muãx_w
);

1014 
_checkd©a
;

1017 
psbuf
->
dup_ack
++;

1018 if(
psbuf
->
dup_ack
 >= 3)

1020 
_Á°ªå
:

1021 if(
psbuf
->
dup_ack
 == 3)

1023 
psbuf
->
æo°
 = 
pkt
->
hdr
.
Êags
.
n_loss
;

1024 if(
psbuf
->
æo°
 == 0)Ösbuf->rlost = 1;

1025 
psbuf
->
ªxmt
 =Ösbuf->
fú°
;

1026 
	`_c⁄ge°i⁄Dëe˘ed
(
s
, 
chno
, 
psbuf
->
æo°
>1?
FASTRETRANS2
:
FASTRETRANS
);

1028 
pch
->
timî
[
RCT_REXMT
] = 
s
->
pcb
->
πo
 * 
rudp_backoff
[0] + 1;

1030 
psbuf
->
pkt_πtm_°¨t
 =Ösbuf->
nŸ_£¡
;

1031 
psbuf
->
Á°ªå_íd_£q
 =Ösbuf->
fú°
->
£qno
 +Ösbuf->
n_u«cked
 - 1;

1034 if(
psbuf
->
æo°
 &&Ösbuf->
ªxmt
)

1036 
rudp_pkt
 *
tmp
 = 
psbuf
->
fú°
;

1037 
psbuf
->
fú°
 =Ösbuf->
ªxmt
;

1038 
	`_RudpOuçut
(
s
, 
pkt
->
hdr
.
Êags
.
chno
, 
RO_REXMT
);

1039 
psbuf
->
ªxmt
 =Ösbuf->ªxmt->
√xt
;

1040 
psbuf
->
æo°
 --;

1041 
psbuf
->
fú°
 = 
tmp
;

1043 if(
psbuf
->
dup_ack
 > 3)

1045 
s
->
pcb
->
cwnd
 ++;

1047 
	`_RudpOuçut
(
s
, 
pkt
->
hdr
.
Êags
.
chno
, 
RO_ONLYONE
);

1050 if(
psbuf
->
dup_ack
 & 1Ë
	`_RudpOuçut
(
s
, 
pkt
->
hdr
.
Êags
.
chno
, 
RO_FORCE
);

1052 if(
s
->
pcb
->
cwnd
 > s->pcb->
s°hªsh
)

1053 
s
->
pcb
->
cwnd
 = s->pcb->
s°hªsh
;

1058 
	`_RudpOuçut
(
s
, 
pkt
->
hdr
.
Êags
.
chno
, 
RO_ONLYONE
);

1062 
rudp_pkt
 *
p
, *
p2
;

1063 
∑ssby
 = 0;

1065 
p
 = 
psbuf
->
fú°
;

1066 
p
 &&Ö->
£qno
 !
ackno
 && 
psbuf
->
n_u«cked
)

1068 if(
psbuf
->
pkt_πtm_°¨t
 =
p
)

1069 
psbuf
->
pkt_πtm_°¨t
 = 
NULL
;

1070 if(
p
->
å™s
 =1 && 
psbuf
->
pkt_πtm_°¨t
 =
NULL
)

1071 
	`_upd©eRTO
(
s
, 
rudp_now
 - 
p
->
ts
);

1073 if(
p
->
£qno
 =
psbuf
->
Á°ªå_íd_£q
 &&Ösbuf->
dup_ack
 >= 3)

1074 
∑ssby
 = 1;

1075 
p2
 = 
p
;

1076 
p
 =Ö->
√xt
;

1077 
	`_MBufPutPackë
(
p2
);

1078 
psbuf
->
n_u«cked
 --;

1079 
psbuf
->
n_pkt
 --;

1080 
psbuf
->
rwnd
 ++;

1083 
	`_c⁄ge°i⁄Avoid™˚
(
s
);

1085 
psbuf
->
fú°
 = 
p
;

1087 if–
p
 )

1088 
pch
->
timî
[
RCT_REXMT
] = 
s
->
pcb
->
πo
 * 
rudp_backoff
[
psbuf
->
fú°
->
å™s
];

1091 
psbuf
->
pkt_πtm_°¨t
 =Ösbuf->
nŸ_£¡
 =Ösbuf->
œ°
 = 
NULL
;

1092 
pch
->
timî
[
RCT_REXMT
] = 0;

1099 if(
psbuf
->
dup_ack
 < 3)

1101 if(
psbuf
->
fú°
 && 
pch
->
c⁄ge°ed
 && 
pkt
->
hdr
.
Êags
.
n_loss
)

1103 
psbuf
->
dup_ack
 = 3;

1104 
_Á°ªå
;

1106 
psbuf
->
dup_ack
 = 0;

1108 if(
psbuf
->
æo°
 =0 && 
∑ssby
)

1110 
psbuf
->
dup_ack
 = 0;

1111 
s
->
pcb
->
cwnd
 = s->pcb->
s°hªsh
;

1113 if(
psbuf
->
fú°
)

1115 
psbuf
->
dup_ack
 = 3;

1116 
_Á°ªå
;

1120 if(
pch
->
c⁄ge°ed
 && 
psbuf
->
æo°
 == 0 )

1121 
pch
->
c⁄ge°ed
 = 0;

1123 if(
ﬁd_øwnd
 =0 && 
psbuf
->
øwnd
 > 0)

1124 
	`_RudpOuçut
(
s
, 
pkt
->
hdr
.
Êags
.
chno
, 
RO_FORCE
);

1126 
	`_RudpOuçut
(
s
, 
pkt
->
hdr
.
Êags
.
chno
, 
pch
->
c⁄ge°ed
?
RO_REXMT
:0);

1128 
	`SETEVENT
(
s
->
evít_w
);

1130 
	`PA_MuãxU∆ock
(
s
->
muãx_w
);

1133 
_checkd©a
:

1134 if(
pkt
->
Àn
)

1136 
uöt32
 
pos
, 
£qno
;

1137 
dñè
;

1139 
	`PA_MuãxLock
(
s
->
muãx_r
);

1140 
£qno
 = 
	`¡ohl
(
pkt
->
hdr
.seqno);

1141 
¥buf
 = &
pch
->
rbuf
;

1143 
dñè
 = ()(
£qno
 - 
¥buf
->
fú°_£q
);

1144 if(
dñè
 < 0)

1146 
	`PA_MuãxU∆ock
(
s
->
muãx_r
);

1147 
	`dbg_msg
("∑ckë %d i†ign‹ed\n", 
pkt
->
£qno
);

1148 
_£ndack_™d_disˇrd_pkt
;

1150 if(
dñè
 < 
¥buf
->
q_size
-1)

1152 
pos
 = (
¥buf
->
hód
 + 
dñè
)%¥buf->
q_size
;

1153 if(
¥buf
->
pkt_q
[
pos
])

1155 
	`dbg_msg
("∑ckë %d i†du∂iˇãd.\n", 
pkt
->
£qno
);

1156 
_£ndack_™d_disˇrd_pkt
;

1159 
¥buf
->
pkt_q
[
pos
] = 
pkt
;

1162 if((
¥buf
->
èû
 +Örbuf->
q_size
 -Örbuf->
hód
)%prbuf->q_size <=

1163 (
pos
 + 
¥buf
->
q_size
 -Örbuf->
hód
)%prbuf->q_size)

1164 
¥buf
->
èû
 = (
pos
+1)%¥buf->
q_size
;

1165 
¥buf
->
wö
 = (¥buf->
q_size
 +Örbuf->
hód
 -Örbuf->
èû
 - 1)%prbuf->q_size;

1167 if(
¥buf
->
loss
 =
pos
)

1169 
¥buf
->
loss
 !¥buf->
èû
 &&Örbuf->
pkt_q
[prbuf->loss])

1171 
¥buf
->
loss
 = (¥buf->los†+ 1Ë%Örbuf->
q_size
;

1172 
¥buf
->
ex≥˘ed_£qno
++;

1174 
¥buf
->
should_ack
 = 
ACKT_DELAYED
;

1175 
	`SETEVENT
(
s
->
evít_r
);

1178 
pos
 =Öos;

1182 
loss
 = 
¥buf
->loss, 
n_lo°
=0;

1183 
loss
 !
¥buf
->
èû
 && !¥buf->
pkt_q
[loss] && 
n_lo°
 < 
MAX_LOSS_REPORT
)

1185 
loss
 = (los†+ 1Ë% 
¥buf
->
q_size
;

1186 
n_lo°
++;

1188 
¥buf
->
n_lo°
 =Ç_lost;

1189 if(
n_lo°
Ë
¥buf
->
should_ack
 = 0;

1192 if(!
¥buf
->
should_ack
 ||

1193 ((
¥buf
->
should_ack
 =
ACKT_DELAYED
Ë&& (’rbuf->
ex≥˘ed_£qno
 -Örbuf->
acked_£qno
) >= 3))

1196 
	`_£ndAck
(
s
, 
pkt
->
hdr
.
Êags
.
chno
);

1197 
¥buf
->
should_ack
 = 0;

1200 
	`PA_MuãxU∆ock
(
s
->
muãx_r
);

1204 
	`dbg_msg
("ex˚ed†ª˚ivî'†buf„r: %d\n", 
pkt
->
£qno
);

1205 
_£ndack_™d_disˇrd_pkt
:

1206 
	`PA_MuãxU∆ock
(
s
->
muãx_r
);

1207 
	`_£ndAck
(
s
, 
pkt
->
hdr
.
Êags
.
chno
);

1210 if(!
pkt
->
hdr
.
Êags
.
ack
)

1212 if(
s
->
°©e
 =
RS_CLOSE_WAIT
)

1214 
	`PA_MuãxLock
(
s
->
muãx_r
);

1215 
s
->
îr
 = 
ERUDP_PEER_CLOSED
;

1216 
	`SETEVENT
(
s
->
evít_r
);

1217 
	`PA_MuãxU∆ock
(
s
->
muãx_r
);

1221 
	`PA_MuãxLock
(
s
->
muãx_w
);

1222 
	`_RudpOuçut
(
s
, 
pkt
->
hdr
.
Êags
.
chno
, 0);

1223 
	`PA_MuãxU∆ock
(
s
->
muãx_w
);

1229 
	}
}

1234 
	$_Pro˚ssPackë
(
rudp_sockë
 *
s
, 
rudp_pkt
 *
pkt
, c⁄° 
sockaddr
 *
‰om
, 
‰om_Àn
)

1236 
rudp_ch™√l
 *
pch
;

1237 
¢dbuf
 *
psbuf
;

1239 if((
pkt
->
hdr
.
Êags
.
r°
Ë&& 
s
->
°©e
 !
RS_LISTEN
)

1241 if(
s
->
°©e
 =
RS_SYN_SENT
)

1248 
	`_ãrmö©eSockëI¡î«Œy
(
s
, 
ERUDP_RESETED
);

1253 
s
->
°©e
)

1255 
RS_CLOSED
:

1256 if(
s
->
îr
)  -1;

1257 if((
s
->
Êags
 & 
RF_ADHOC
Ë&& !s->
pcb
 && 
pkt
->
hdr
.Êags.
fö
)

1263 
RS_LISTEN
:

1264 if(
pkt
->
hdr
.
Êags
.
syn
 && !pkt->hdr.Êags.
ack
)

1266 
rudp_sockë
 *
ss
;

1267 
ß_Àn
;

1269 
ss
 = 
	`_AŒocRudpSockë
();

1270 
ss
->
rcvbuf_sz
 = 
s
->rcvbuf_sz;

1271 
ss
->
udp_sock
 = 
s
->udp_sock;

1272 
ss
->
pcb
 = 
	`_AŒocRudpPcb
(ss->
rcvbuf_sz
, 
INITIAL_SEQ_NO
, 
	`¡ohl
(
pkt
->
hdr
.
£qno
), 
	`WINDOW_NTOH
’kt->hdr.
Êags
.
wödow
));

1273 
	`mem˝y
(&
ss
->
pcb
->
≥î
, 
‰om
, 
‰om_Àn
);

1274 
ß_Àn
 = (
sockaddr_ö
);

1275 
	`PA_GëSockName
(
s
->
udp_sock
, (
sockaddr
*)&
ss
->
pcb
->
loˇl
, &
ß_Àn
);

1277 
ss
->
°©e
 = 
RS_SYN_RCVD
;

1278 
ss
->
timî
[
RT_KEEP
] = 
c⁄n_backoff
[0];

1279 
	`li°_add_èû
(&
ss
->
li°í_queue
, &
s
->listen_queue);

1281 
	`_£ndSynAck
(
ss
);

1287 
RS_SYN_SENT
:

1288 if(
pkt
->
hdr
.
Êags
.
syn
)

1290 
i
;

1291 
rudp_hdr
 
hdr
;

1293 
pch
 = &
s
->
pcb
->
ch™√l
[0];

1294 
psbuf
 = &
pch
->
sbuf
;

1296 
i
=0; i<
MAX_PHY_CHANNELS
; i++)

1298 
pch
[
i
].
rbuf
.
ex≥˘ed_£qno
 =Öch[i].rbuf.
fú°_£q
 = 
	`¡ohl
(
pkt
->
hdr
.
£qno
);

1299 
s
->
pcb
->
rwö_size
 = 
pch
[
i
].
sbuf
.
rwnd
 =Öch[i].sbuf.
øwnd
 = 
	`WINDOW_NTOH
(
pkt
->
hdr
.
Êags
.
wödow
);

1300 
s
->
pcb
->
πw_size
 = s->pcb->
rwö_size
/2;

1302 
s
->
pcb
->
s°hªsh
 = s->pcb->
rwö_size
;

1308 
	`mem£t
(&
hdr
, 0, (hdr));

1309 
hdr
.
u32_Êags
 = 0;

1310 
hdr
.
Êags
.
rudp
 = 
RUDP_HEADER_TAG
;

1311 
hdr
.
Êags
.
ack
 = 1;

1312 
hdr
.
ackno
 = 
pkt
->hdr.
£qno
;

1313 
hdr
.
Êags
.
wödow
 = 
	`WINDOW_HTON
(
s
->
pcb
->
ch™√l
[0].
rbuf
.
wö
);

1315 
	`PA_MuãxLock
(
s
->
muãx_w
);

1317 if(
pkt
->
hdr
.
Êags
.
ack
)

1319 
	`_£ndHódî
(
s
, &
hdr
);

1320 
s
->
°©e
 = 
RS_ESTABLISHED
;

1321 
	`SETEVENT
(
s
->
evít_w
);

1326 
hdr
.
Êags
.
syn
 = 1;

1327 
hdr
.
£qno
 = 
	`ht⁄l
(
psbuf
->seqno);

1328 
	`_£ndHódî
(
s
, &
hdr
);

1330 
s
->
°©e
 = 
RS_SYN_RCVD
;

1332 
	`PA_MuãxU∆ock
(
s
->
muãx_w
);

1337 
RS_SYN_RCVD
:

1338 if(
pkt
->
hdr
.
Êags
.
ack
)

1340 
pch
 = &
s
->
pcb
->
ch™√l
[0];

1341 
psbuf
 = &
pch
->
sbuf
;

1344 if(
	`li°_em±y
(&
s
->
li°í_queue
))

1346 
	`PA_MuãxLock
(
s
->
muãx_w
);

1347 
s
->
°©e
 = 
RS_ESTABLISHED
;

1348 
	`SETEVENT
(
s
->
evít_w
);

1349 
	`PA_MuãxU∆ock
(
s
->
muãx_w
);

1356 
s
->
°©e
 = 
RS_ESTABLISHED
;

1360 if(
pkt
->
hdr
.
Êags
.
syn
)

1362 
	`_£ndSynAck
(
s
);

1367 
RS_ESTABLISHED
:

1368  
	`_PPSèã_E°ablished
(
s
, 
pkt
, 
‰om
, 
‰om_Àn
);

1370 
RS_FIN_QUEUED
:

1371 
RS_FIN_WAIT_1
:

1372 if(
pkt
->
hdr
.
Êags
.
ack
)

1374 if(
pkt
->
hdr
.
Êags
.
fö
)

1376 
	`_£ndEm±yAck
(
s
, 0);

1377 
s
->
°©e
 = 
RS_TIME_WAIT
;

1380 
s
->
°©e
 = 
RS_FIN_WAIT_2
;

1382 if(
pkt
->
hdr
.
Êags
.
fö
)

1384 
	`_£ndEm±yAck
(
s
, 0);

1385 
s
->
°©e
 = 
RS_CLOSING
;

1387 
s
->
timî
[
RT_KEEP
] = 
RTT_MIN
 * 
RTV_KEEP_CLOSE
;

1390 
RS_FIN_WAIT_2
:

1391 if(
pkt
->
hdr
.
Êags
.
fö
)

1393 
	`_£ndAck
(
s
, 0);

1394 
s
->
°©e
 = 
RS_TIME_WAIT
;

1398 
RS_CLOSING
:

1399 
RS_TIME_WAIT
:

1400 
RS_CLOSE_WAIT
:

1403 
	`_£ndRe£t
(
s
, 
‰om
);

1405 
	}
}

1407 
	$_£ndRe£t
(
rudp_sockë
 *
s
, c⁄° 
sockaddr
 *
to
)

1409 
rudp_hdr
 
hdr
;

1411 
	`mem£t
(&
hdr
, 0, (hdr));

1412 
hdr
.
u32_Êags
 = 0;

1413 
hdr
.
Êags
.
rudp
 = 
RUDP_HEADER_TAG
;

1414 
hdr
.
Êags
.
r°
 = 1;

1415 
	`_¥ötHdr
(
s
->
pcb
, &
hdr
, (
sockaddr_ö
*)
to
);

1416 
	`PA_SídTo
(
s
->
udp_sock
, &
hdr
, (
rudp_hdr
), 0,

1417 
s
->
c⁄√˘ed
?
NULL
:
to
,

1418 (
sockaddr
));

1419 
	}
}

1421 
PA_THREAD_RETTYPE
 
__STDCALL
 
	$_RUDPSîvi˚Thªad
(*
pd©a
)

1423 
fd_£t
 
rfds
;

1424 
timevÆ
 
tv
;

1425 
li°_hód
 *
p
;

1426 
max_fd
;

1427 
t200
, 
t500
, 
äow
;

1429 
t200
 = 
t500
 = 
	`PA_GëTickCou¡
();

1430 
run
)

1432 
	`FD_ZERO
(&
rfds
);

1433 
tv
.
tv_£c
 = 0;Åv.
tv_u£c
 = 25*1000;

1435 
max_fd
 = 
sockw_r
;

1437 
	`PA_MuãxLock
(
muãx_sock_li°
);

1438 
	`li°_f‹_óch
(
p
, &
sock_li°
)

1440 
rudp_sockë
 *
s
 = 
	`li°_íåy
(
p
, rudp_sockë, 
ö°_li°
);

1444 
	`FD_SET
(
s
->
udp_sock
, &
rfds
);

1445 
max_fd
 = 
	`max
(max_fd, 
s
->
udp_sock
);

1448 
	`PA_MuãxU∆ock
(
muãx_sock_li°
);

1450 if(
	`£À˘
(
max_fd
+1, &
rfds
, 
NULL
, NULL, &
tv
) > 0)

1452 
	`PA_MuãxLock
(
muãx_sock_li°
);

1453 
	`li°_f‹_óch
(
p
, &
sock_li°
)

1455 
rudp_sockë
 *
s
 = 
	`li°_íåy
(
p
, rudp_sockë, 
ö°_li°
);

1456 if(
	`FD_ISSET
(
s
->
udp_sock
, &
rfds
))

1458 
sockaddr
 
‰om
;

1459 
Àn
, 
‰om_Àn
;

1460 
rudp_pkt
 *
pkt
;

1464 
pkt
 = 
	`_MBufGëPackë
();

1465 
‰om_Àn
 = (
‰om
);

1466 if(
pkt
)

1468 
Àn
 = 
	`PA_RecvFrom
(
s
->
udp_sock
, &
pkt
->
hdr
, 
MAX_PACKET_SIZE
, 0, &
‰om
, &
‰om_Àn
);

1469 if(
Àn
 < (
rudp_hdr
Ë|| 
pkt
->
hdr
.
Êags
.
rudp
 !
RUDP_HEADER_TAG
 ||

1470 !
	`_isPackëVÆid
(
pkt
))

1472 if(
Àn
 < 0)

1474 #ifde‡
WIN32


1475 
îr
 = 
	`WSAGëLa°Eº‹
();

1476 if(
îr
 !
WSAEWOULDBLOCK
)

1477 
	`dbg_msg
("ªcv‰omÉº‹: %d\n", 
îr
);

1479 if(
î∫o
 !
EWOULDBLOCK
)

1480 
	`dbg_msg
("ªcv‰om: %s\n", 
	`°ªº‹
(
î∫o
));

1484 
	`_MBufPutPackë
(
pkt
);

1488 
pkt
->
Àn
 =Üí - (
rudp_hdr
);

1489 
pkt
->
£qno
 = 
	`¡ohl
’kt->
hdr
.seqno);

1490 
	`_¥ötPkt
(
s
->
pcb
, 
pkt
, 
PHF_FROM
, (
sockaddr_ö
*)&
‰om
);

1491 
	`_Di•©chPackë
(
s
, 
pkt
, &
‰om
, 
‰om_Àn
);

1498 
	`PA_MuãxU∆ock
(
muãx_sock_li°
);

1501 if(
	`FD_ISSET
(
sockw_r
, &
rfds
))

1503 
sockaddr
 
ß
;

1504 
ßÀn
;

1505 
ouçut_nŸify
 
nŸify
;

1506 
ßÀn
 = (
ß
);

1507 
	`PA_RecvFrom
(
sockw_r
, &
nŸify
, “Ÿify), 0, &
ß
, &
ßÀn
);

1511 if(
nŸify
.
s
->
°©e
 =
RS_ESTABLISHED
 &&ÇŸify.s->
pcb
 &&ÇŸify.s->pcb->
ch™√l
[nŸify.
chno
].
sbuf
.
dup_ack
 < 3)

1513 
	`PA_MuãxLock
(
nŸify
.
s
->
muãx_w
);

1515 
	`_RudpOuçut
(
nŸify
.
s
,ÇŸify.
chno
, 0) > 0);

1516 
	`PA_MuãxU∆ock
(
nŸify
.
s
->
muãx_w
);

1522 
äow
 = 
	`PA_GëTickCou¡
();

1523 
	`PA_MuãxLock
(
muãx_sock_li°
);

1524 if(
äow
 - 
t200
 >
DELAY_ACK_MS
-4)

1527 
t200
 = 
äow
;

1528 
	`_timîProc
(
_h™dÀTimî200ms
);

1530 if(
äow
 - 
t500
 >
RTT_UINT
-4)

1533 
t500
 = 
äow
;

1534 
rudp_now
 ++;

1535 
	`_timîProc
(
_h™dÀTimî500ms
);

1537 
	`PA_MuãxU∆ock
(
muãx_sock_li°
);

1541  (
PA_THREAD_RETTYPE
)(0);

1542 
	}
}

1546 
öôRudpTimî
();

1547 
unöôRudpTimî
();

1549 
	$RUDPSèπ
()

1571 
	`PA_MuãxInô
(
muãx_sock_li°
);

1572 
	`PA_MuãxInô
(
muãx_pkt_poﬁ
);

1573 
‰ì_pkt
 = 
NULL
;

1575 
hthd
 = 
	`PA_ThªadCª©e
(
_RUDPSîvi˚Thªad
, 
NULL
);

1579 
	}
}

1581 
	$RUDPCÀ™up
()

1583 
li°_hód
 *
p
, *
q
;

1587 
run
 = 0;

1588 
	`PA_ThªadWaôU¡ûTîmö©e
(
hthd
);

1589 
	`PA_ThªadClo£H™dÀ
(
hthd
);

1593 
	`PA_MuãxLock
(
muãx_sock_li°
);

1594 
	`li°_f‹_óch_ß„
(
p
, 
q
, &
sock_li°
)

1596 
rudp_sockë
 *
s
 = 
	`li°_íåy
(
p
, rudp_sockë, 
ö°_li°
);

1597 if(!
	`li°_em±y
(&
s
->
li°í_queue
))

1599 
li°_hód
 *
µ
, *
qq
;

1600 
	`li°_f‹_óch_ß„
(
µ
, 
qq
, &
s
->
li°í_queue
)

1602 
rudp_sockë
 *
ss
 = 
	`li°_íåy
(
µ
, rudp_sockë, 
ac˚±ed_li°
);

1603 
	`_£ndRe£t
(
ss
, (
sockaddr
*)&ss->
pcb
->
≥î
);

1604 
	`_CÀ™upSockë
(
ss
, 0);

1605 
	`li°_dñ
(
µ
);

1606 
	`‰ì
(
ss
);

1609 if(
s
->
°©e
 =
RS_ESTABLISHED
)

1610 
	`_£ndRe£t
(
s
, (
sockaddr
*)&s->
pcb
->
≥î
);

1611 
	`_CÀ™upSockë
(
s
, 0);

1612 
	`li°_dñ
(
p
);

1613 
	`PA_SockëClo£
(
s
->
udp_sock
);

1614 
	`‰ì
(
s
);

1616 
	`PA_MuãxU∆ock
(
muãx_sock_li°
);

1618 
	`PA_MuãxUnöô
(
muãx_pkt_poﬁ
);

1619 
‰ì_pkt
)

1621 
rudp_pkt
 *
p
 = 
‰ì_pkt
;

1622 
‰ì_pkt
 = fªe_pkt->
√xt
;

1623 
	`‰ì
(
p
);

1626 
	`PA_MuãxUnöô
(
muãx_sock_li°
);

1629 
	}
}

1631 
RUDPSOCKET
 
	$RUDPSockë
()

1633 
rudp_sockë
 *
sock
 = 
	`_AŒocRudpSockë
();

1634 
sock
->
udp_sock
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

1635 
	`PA_SockëSëNBlk
(
sock
->
udp_sock
, 1);

1636 
	`PA_MuãxLock
(
muãx_sock_li°
);

1637 
	`li°_add_èû
(&
sock
->
ö°_li°
, &
sock_li°
);

1638 
	`PA_MuãxU∆ock
(
muãx_sock_li°
);

1640  (
RUDPSOCKET
)
sock
;

1641 
	}
}

1643 
RUDPSOCKET
 
	$RUDPSockëFromUdp
(
udpsock
)

1645 
rudp_sockë
 *
s
 = 
	`_AŒocRudpSockë
();

1646 
s
->
udp_sock
 = 
udpsock
;

1647 
	`PA_SockëSëNBlk
(
udpsock
, 1);

1648 
	`PA_MuãxLock
(
muãx_sock_li°
);

1649 
	`li°_add_èû
(&
s
->
ö°_li°
, &
sock_li°
);

1650 
	`PA_MuãxU∆ock
(
muãx_sock_li°
);

1652  (
RUDPSOCKET
)
s
;

1653 
	}
}

1655 
	$RUDPClo£
(
RUDPSOCKET
 
sock
)

1657 
rudp_sockë
 *
s
 = (rudp_sockë*)
sock
;

1658 if(
s
->
èg
 !
RUDP_SOCKET_TAG
Ë -
ERUDP_NOT_SOCKET
;

1660 
s
->
°©e
)

1662 
RS_CLOSED
:

1664 
RS_LISTEN
:

1666 
li°_hód
 *
p
, *
q
;

1667 
	`PA_MuãxLock
(
muãx_sock_li°
);

1668 
	`li°_f‹_óch_ß„
(
p
, 
q
, &
s
->
li°í_queue
)

1670 
rudp_sockë
 *
Ø
 = 
	`li°_íåy
(
p
, rudp_sockë, 
ac˚±ed_li°
);

1671 
	`_£ndRe£t
(
Ø
, (
sockaddr
*)&Ø->
pcb
->
≥î
);

1672 
	`_CÀ™upSockë
(
Ø
, 0);

1673 
	`li°_dñ
(
p
);

1674 
	`‰ì
(
Ø
);

1676 
	`PA_MuãxU∆ock
(
muãx_sock_li°
);

1679 
RS_SYN_SENT
:

1680 
RS_SYN_RCVD
:

1681 
	`_£ndRe£t
(
s
, (
sockaddr
*)&s->
pcb
->
≥î
);

1683 
RS_ESTABLISHED
:

1685 
i
, 
sb_is_em±y
 = 1;

1686 
	`PA_MuãxLock
(
s
->
muãx_w
);

1687 
i
=0; i<
MAX_PHY_CHANNELS
; i++)

1689 
¢dbuf
 *
psb
 = &
s
->
pcb
->
ch™√l
[
i
].
sbuf
;

1690 
rcvbuf
 *
¥b
 = &
s
->
pcb
->
ch™√l
[
i
].
rbuf
;

1691 if(
psb
->
fú°
 !
NULL
Ë{ 
sb_is_em±y
 = 0; }

1693 ; 
¥b
->
hód
 !¥b->
èû
;Örb->hód = (¥b->hód+1)%¥b->
q_size
)

1694 if(
¥b
->
pkt_q
[¥b->
hód
])

1696 
	`_MBufPutPackë
(
¥b
->
pkt_q
[¥b->
hód
]);

1697 
¥b
->
pkt_q
[¥b->
hód
] = 
NULL
;

1700 if(
sb_is_em±y
)

1702 
	`_£ndFö
(
s
);

1703 
s
->
°©e
 = 
RS_FIN_WAIT_1
;

1704 
s
->
timî
[
RT_KEEP
] = 
RTT_MIN
 * 
RTV_KEEP_CLOSE
;

1708 
s
->
°©e
 = 
RS_FIN_QUEUED
;

1710 
	`PA_MuãxU∆ock
(
s
->
muãx_w
);

1713 
RS_CLOSE_WAIT
:

1715 
RS_FIN_QUEUED
:

1716 
RS_FIN_WAIT_1
:

1717 
RS_FIN_WAIT_2
:

1718 
RS_CLOSING
:

1719 
RS_TIME_WAIT
:

1720  -
ERUDP_NOT_ALLOWED
;

1731 
	`PA_MuãxLock
(
muãx_sock_li°
);

1732 
	`_CÀ™AndFªeSockë
(
s
);

1733 
	`PA_MuãxU∆ock
(
muãx_sock_li°
);

1737 
	}
}

1739 
	$RUDPLi°í
(
RUDPSOCKET
 
sock
, 
n
)

1741 
rudp_sockë
 *
s
 = (rudp_sockë*)
sock
;

1742 if(
s
->
èg
 !
RUDP_SOCKET_TAG
Ë -
ERUDP_NOT_SOCKET
;

1744 if(
s
->
°©e
 !
RS_CLOSED
Ë -
ERUDP_NOT_ALLOWED
;

1745 
	`INIT_LIST_HEAD
(&
s
->
li°í_queue
);

1746 
s
->
°©e
 = 
RS_LISTEN
;

1748 #ifde‡
WIN32


1750 
›t
;

1751 
›t
 = 100*1024;

1752 
	`£tsock›t
(
s
->
udp_sock
, 
SOL_SOCKET
, 
SO_RCVBUF
, (c⁄° *)&
›t
, ());

1758 
	}
}

1760 
	$RUDPAc˚±
(
RUDPSOCKET
 
sock
, RUDPSOCKET *
ac˚±ed
, 
sockaddr
 *
addr
, *
addæí
)

1762 
rudp_sockë
 *
s
, *
a
;

1763 
li°_hód
 *
p
, *
q
;

1765 
s
 = (
rudp_sockë
*)
sock
;

1766 if(
s
->
èg
 !
RUDP_SOCKET_TAG
Ë -
ERUDP_NOT_SOCKET
;

1768 *
ac˚±ed
 = 
NULL
;

1769 
waô
:

1770 
	`PA_MuãxLock
(
s
->
muãx_r
);

1771 #ifde‡
WIN32


1772 if(
	`li°_em±y
(&
s
->
li°í_queue
))

1774 
	`PA_MuãxU∆ock
(
s
->
muãx_r
);

1775 
	`WaôF‹SögÀObje˘
(
s
->
evít_r
, 
INFINITE
);

1776 
	`PA_MuãxLock
(
s
->
muãx_r
);

1779 
	`li°_em±y
(&
s
->
li°í_queue
))

1780 
	`±hªad_c⁄d_waô
(&
s
->
evít_r
, &s->
muãx_r
);

1782 
	`PA_MuãxU∆ock
(
s
->
muãx_r
);

1785 
	`PA_MuãxLock
(
muãx_sock_li°
);

1787 
	`li°_f‹_óch_ß„
(
p
, 
q
, &
s
->
li°í_queue
)

1789 
a
 = 
	`li°_íåy
(
p
, 
rudp_sockë
, 
li°í_queue
);

1790 if(
a
->
°©e
 =
RS_ESTABLISHED
)

1792 
	`li°_dñ
(
p
);

1794 
	`INIT_LIST_HEAD
(&
a
->
ac˚±ed_li°
);

1795 
	`li°_add_èû
(&
a
->
ac˚±ed_li°
, &
s
->accepted_list);

1797 
	`INIT_LIST_HEAD
(&
a
->
li°í_queue
);

1798 *
ac˚±ed
 = (
RUDPSOCKET
)
a
;

1799 
	`mem˝y
(
addr
, &
a
->
pcb
->
≥î
, (
sockaddr
));

1800 *
addæí
 = (
sockaddr
);

1806 
	`PA_MuãxU∆ock
(
muãx_sock_li°
);

1808 if(!*
ac˚±ed
)

1810 if(
s
->
Êags
 & 
RF_NBLK
)

1811  -
ERUDP_AGAIN
;

1812 
waô
;

1816 
	}
}

1818 
	$RUDPBöd
(
RUDPSOCKET
 
sock
, c⁄° 
sockaddr
 *
addr
, 
addæí
)

1820 
rudp_sockë
 *
s
 = (rudp_sockë*)
sock
;

1821 if(
s
->
èg
 !
RUDP_SOCKET_TAG
Ë -
ERUDP_NOT_SOCKET
;

1823 if(
	`böd
(
s
->
udp_sock
, 
addr
, 
addæí
) == 0)  0;

1824  -
ERUDP_BIND
;

1825 
	}
}

1832 
	$RUDPC⁄√˘
(
RUDPSOCKET
 
sock
, c⁄° 
sockaddr
* 
addr
, 
addr_Àn
)

1834 
rudp_sockë
 *
s
;

1835 
ß_Àn
;

1837 
s
 = (
rudp_sockë
*)
sock
;

1838 if(
s
->
èg
 !
RUDP_SOCKET_TAG
Ë -
ERUDP_NOT_SOCKET
;

1839 if(
s
->
°©e
 =
RS_ESTABLISHED
Ë -
ERUDP_CONNECTED
;

1840 if(
s
->
°©e
 =
RS_SYN_SENT
Ë -
ERUDP_IN_PROGRESS
;

1841 if(
s
->
°©e
 !
RS_CLOSED
 )  -
ERUDP_NOT_ALLOWED
;

1844 
s
->
îr
 = 0;

1845 if(!
s
->
pcb
Ës->pcb = 
	`_AŒocRudpPcb
(s->
rcvbuf_sz
, 
INITIAL_SEQ_NO
, 0, 1);

1846 
	`mem˝y
(&
s
->
pcb
->
≥î
, 
addr
, (
sockaddr
));

1848 if(
	`c⁄√˘
(
s
->
udp_sock
, 
addr
, 
addr_Àn
) == 0)

1849 
s
->
c⁄√˘ed
 = 
TRUE
;

1851 
	`dbg_msg
("call connect() failed.\n");

1853 
ß_Àn
 = (
sockaddr_ö
);

1854 
	`PA_GëSockName
(
s
->
udp_sock
, (
sockaddr
*)&s->
pcb
->
loˇl
, &
ß_Àn
);

1855 
s
->
°©e
 = 
RS_SYN_SENT
;

1856 
s
->
timî
[
RT_KEEP
] = 
c⁄n_backoff
[0];

1859 
	`_£ndSyn
(
s
);

1860 
s
->
pcb
->
ªå_˙t
 = 0;

1862 if(
s
->
Êags
 & 
RF_NBLK
)

1863  -
ERUDP_AGAIN
;

1865 #ifde‡
WIN32


1866 
	`WaôF‹SögÀObje˘
(
s
->
evít_w
, 
INFINITE
);

1868 
	`PA_MuãxLock
(
s
->
muãx_w
);

1869 
s
->
°©e
 =
RS_SYN_SENT
)

1870 
	`±hªad_c⁄d_waô
(&
s
->
evít_w
, &s->
muãx_w
);

1871 
	`PA_MuãxU∆ock
(
s
->
muãx_w
);

1874 if(
s
->
°©e
 =
RS_ESTABLISHED
)

1877 
›t
 = 0;

1878 
›t
 = 1500*128;

1879 
	`£tsock›t
(
s
->
udp_sock
, 
SOL_SOCKET
, 
SO_RCVBUF
, (c⁄° *)&
›t
, ());

1885  -
ERUDP_CONN_FAILED
;

1886 
	}
}

1890 
	$RUDPC⁄√˘ed
(
RUDPSOCKET
 
sock
, c⁄° 
sockaddr
* 
addr
, 
≥î_rbuf_sz
)

1892 
rudp_sockë
 *
s
;

1893 
ß_Àn
, 
›t
;

1895 
s
 = (
rudp_sockë
*)
sock
;

1896 if(
s
->
èg
 !
RUDP_SOCKET_TAG
Ë -
ERUDP_NOT_SOCKET
;

1897 if(
s
->
°©e
 =
RS_ESTABLISHED
Ë -
ERUDP_CONNECTED
;

1898 if(
s
->
°©e
 =
RS_SYN_SENT
Ë -
ERUDP_IN_PROGRESS
;

1899 if(
s
->
°©e
 !
RS_CLOSED
 )  -
ERUDP_NOT_ALLOWED
;

1902 
s
->
îr
 = 0;

1903 if(
≥î_rbuf_sz
Ë
s
->
rcvbuf_sz
 =Öeer_rbuf_sz;

1904 if(!
s
->
pcb
Ës->pcb = 
	`_AŒocRudpPcb
(s->
rcvbuf_sz
, 
INITIAL_SEQ_NO
, 0, 1);

1905 
	`mem˝y
(&
s
->
pcb
->
≥î
, 
addr
, (
sockaddr
));

1907 if(
	`c⁄√˘
(
s
->
udp_sock
, 
addr
, (
sockaddr
)) == 0)

1908 
s
->
c⁄√˘ed
 = 
TRUE
;

1910 
	`dbg_msg
("call connect() failed.\n");

1912 
ß_Àn
 = (
sockaddr_ö
);

1913 
	`PA_GëSockName
(
s
->
udp_sock
, (
sockaddr
*)&s->
pcb
->
loˇl
, &
ß_Àn
);

1915 
s
->
°©e
 = 
RS_ESTABLISHED
;

1916 
	`SETEVENT
(
s
->
evít_w
);

1919 
›t
 = 1500*128;

1920 
	`£tsock›t
(
s
->
udp_sock
, 
SOL_SOCKET
, 
SO_RCVBUF
, (c⁄° *)&
›t
, ());

1923 
	}
}

1925 
	$RUDPSídV
(
RUDPSOCKET
 
sock
, 
chno
, c⁄° 
PA_IOVEC
 *
v
, 
size
, 
Êags
)

1927 
rudp_sockë
 *
s
;

1928 
¢dbuf
 *
ps
;

1929 
i
, 
Àn
, 
byt_£¡
;

1931 
Àn
 = 
byt_£¡
 = 0;

1932 
i
=0; i<
size
; i++Ë
Àn
 +
	`PA_IoVecGëLí
(&
v
[i]);

1933 if(
Àn
 == 0)  0;

1935 
s
 = (
rudp_sockë
*)
sock
;

1936 if(
s
->
èg
 !
RUDP_SOCKET_TAG
Ë -
ERUDP_NOT_SOCKET
;

1937 if(
s
->
îr
)  -s->err;

1938 if(
s
->
°©e
 !
RS_ESTABLISHED
Ë -
ERUDP_NO_CONN
;

1941 
ps
 = &
s
->
pcb
->
ch™√l
[
	`PHY_CHN
(
chno
)].
sbuf
;

1942 
	`PA_MuãxLock
(
s
->
muãx_w
);

1943 if(
s
->
°©e
 =
RS_DEAD
)

1945 
	`PA_MuãxLock
(
s
->
muãx_w
);

1946  -
s
->
îr
;

1950 #ifde‡
WIN32


1951 if(
ps
->
n_pkt
 >ps->
max_pkts
 && 
s
->
°©e
 !
RS_DEAD
)

1953 if((
Êags
 & 
RUDPMSG_DONTWAIT
Ë|| (
s
->Êag†& 
RF_NBLK
))

1955 
	`PA_MuãxU∆ock
(
s
->
muãx_w
);

1956  -
ERUDP_AGAIN
;

1958 
	`PA_MuãxU∆ock
(
s
->
muãx_w
);

1959 
	`WaôF‹SögÀObje˘
(
s
->
evít_w
, 
INFINITE
);

1960 
	`PA_MuãxLock
(
s
->
muãx_w
);

1963 
ps
->
n_pkt
 >ps->
max_pkts
 && 
s
->
°©e
 !
RS_DEAD
)

1965 if((
Êags
 & 
RUDPMSG_DONTWAIT
Ë|| (
s
->Êag†& 
RF_NBLK
))

1967 
	`PA_MuãxU∆ock
(
s
->
muãx_w
);

1968  -
ERUDP_AGAIN
;

1970 
	`±hªad_c⁄d_waô
(&
s
->
evít_w
, &s->
muãx_w
);

1973 if(
s
->
îr
 == 0)

1975 
t
, 
c›õd
 = 0 ;

1976 
rudp_pkt
 *
œ°
 = 
ps
->last;

1977 
i
 = 0;

1979 if(
œ°
 &&Üa°->
å™s
 =0 &&Üa°->
hdr
.
Êags
.
chno
 == chno)

1981 ; 
i
<
size
 && 
œ°
->
Àn
 < 
MAX_DATA_SIZE
; i++)

1983 
t
 = 
	`mö
(
	`PA_IoVecGëLí
(&
v
[
i
]), 
MAX_DATA_SIZE
 - 
œ°
->
Àn
);

1984 
	`mem˝y
(
œ°
->
d©a
 +Üa°->
Àn
, 
	`PA_IoVecGëPå
(&
v
[
i
]), 
t
);

1985 
œ°
->
Àn
 +
t
;

1986 if(
	`PA_IoVecGëLí
(&
v
[
i
]Ë!
t
)

1988 
byt_£¡
 = 
c›õd
 = 
t
;

1994 
i
 < 
size
)

1996 
rudp_pkt
 *
pkt
;

1998 
pkt
 = 
	`_MBufGëPackë
();

1999 if(!
pkt
) ;

2001 
pkt
->
hdr
.
Êags
.
chno
 = chno;

2003 ; 
i
<
size
 && 
pkt
->
Àn
 < 
MAX_DATA_SIZE
; i++, 
c›õd
 = 0)

2005 
t
 = 
	`mö
(
	`PA_IoVecGëLí
(&
v
[
i
]Ë- 
c›õd
, 
MAX_DATA_SIZE
 - 
pkt
->
Àn
);

2006 
	`mem˝y
(
pkt
->
d©a
 +Ökt->
Àn
, (*)
	`PA_IoVecGëPå
(&
v
[
i
]Ë+ 
c›õd
, 
t
);

2007 
pkt
->
Àn
 +
t
;

2008 
byt_£¡
 +
t
;

2009 if(
	`PA_IoVecGëLí
(&
v
[
i
]Ë- 
c›õd
 !
t
)

2011 
c›õd
 +
t
;

2015 if(
pkt
->
Àn
 == 0)

2017 
	`_MBufPutPackë
(
pkt
);

2021 
pkt
->
£qno
 = 
s
->
pcb
->
ch™√l
[
	`PHY_CHN
(
chno
)].
sbuf
.seqno++;

2022 
pkt
->
hdr
.
£qno
 = 
	`ht⁄l
(pkt->seqno);

2023 if(
ps
->
fú°
)

2025 
ps
->
œ°
->
√xt
 = 
pkt
;

2026 
ps
->
œ°
 = 
pkt
;

2028 if(!
ps
->
nŸ_£¡
Ëps->nŸ_£¡ =Ös->
œ°
;

2031 
ps
->
fú°
 =Ös->
œ°
 =Ös->
nŸ_£¡
 = 
pkt
;

2032 
pkt
->
√xt
 = 
NULL
;

2034 
ps
->
n_pkt
++;

2038 
	`_RudpOuçut
(
s
, 
	`PHY_CHN
(
chno
), 0) > 0);

2041 
byt_£¡
 = -
s
->
îr
;

2043 
	`PA_MuãxU∆ock
(
s
->
muãx_w
);

2045  
byt_£¡
;

2046 
	}
}

2048 
	$RUDPSíd
(
RUDPSOCKET
 
sock
, 
chno
, c⁄° *
±r
, 
Àn
, 
Êags
)

2050 
rudp_sockë
 *
s
;

2051 
¢dbuf
 *
ps
;

2052 
byt_£¡
 = 0;

2054 if(
Àn
 == 0)  0;

2055 
s
 = (
rudp_sockë
*)
sock
;

2056 if(
s
->
èg
 !
RUDP_SOCKET_TAG
Ë -
ERUDP_NOT_SOCKET
;

2057 if(
s
->
îr
)  -s->err;

2058 if(
s
->
°©e
 !
RS_ESTABLISHED
Ë -
ERUDP_NO_CONN
;

2061 
ps
 = &
s
->
pcb
->
ch™√l
[
	`PHY_CHN
(
chno
)].
sbuf
;

2062 
	`PA_MuãxLock
(
s
->
muãx_w
);

2063 if(
s
->
°©e
 =
RS_DEAD
)

2065 
	`PA_MuãxLock
(
s
->
muãx_w
);

2066  -
s
->
îr
;

2074 #ifde‡
WIN32


2075 
ps
->
n_pkt
 >ps->
max_pkts
 && 
s
->
°©e
 !
RS_DEAD
)

2077 if((
Êags
 & 
RUDPMSG_DONTWAIT
Ë|| (
s
->Êag†& 
RF_NBLK
))

2079 
	`PA_MuãxU∆ock
(
s
->
muãx_w
);

2080  -
ERUDP_AGAIN
;

2082 
	`PA_MuãxU∆ock
(
s
->
muãx_w
);

2083 
	`WaôF‹SögÀObje˘
(
s
->
evít_w
, 
INFINITE
);

2084 
	`PA_MuãxLock
(
s
->
muãx_w
);

2087 
ps
->
n_pkt
 >ps->
max_pkts
 && 
s
->
°©e
 !
RS_DEAD
)

2089 if((
Êags
 & 
RUDPMSG_DONTWAIT
Ë|| (
s
->Êag†& 
RF_NBLK
))

2091 
	`PA_MuãxU∆ock
(
s
->
muãx_w
);

2092  -
ERUDP_AGAIN
;

2094 
	`±hªad_c⁄d_waô
(&
s
->
evít_w
, &s->
muãx_w
);

2098 if(
s
->
îr
 == 0)

2100 
t
;

2101 *
d©a
;

2102 
rudp_pkt
 *
œ°
, *
pkt
;

2104 
d©a
 = (*)
±r
;

2105 
œ°
 = 
ps
->last;

2108 if(
œ°
 &&Üa°->
å™s
 =0 &&Üa°->
hdr
.
Êags
.
chno
 =chnÿ&&Üa°->
Àn
 < 
MAX_DATA_SIZE
)

2110 
t
 = 
	`mö
(
Àn
, 
MAX_DATA_SIZE
 - 
œ°
->len);

2111 
	`mem˝y
(
œ°
->
d©a
 +Üa°->
Àn
, d©a, 
t
);

2112 
œ°
->
Àn
 +
t
;

2113 
byt_£¡
 +
t
;

2114 
d©a
 +
t
;

2117 
byt_£¡
 < 
Àn
)

2119 
pkt
 = 
	`_MBufGëPackë
();

2120 if(!
pkt
) ;

2122 
pkt
->
hdr
.
Êags
.
chno
 = chno;

2124 
t
 = 
	`mö
(
Àn
, 
MAX_DATA_SIZE
);

2125 
	`mem˝y
(
pkt
->
d©a
, d©a, 
t
);

2126 
pkt
->
Àn
 = 
t
;

2127 
pkt
->
å™s
 = 0;

2128 
pkt
->
£qno
 = 
ps
->seqno++;

2129 
pkt
->
hdr
.
£qno
 = 
	`ht⁄l
(pkt->seqno);

2130 if(
ps
->
fú°
)

2132 
ps
->
œ°
->
√xt
 = 
pkt
;

2133 
ps
->
œ°
 = 
pkt
;

2135 if(!
ps
->
nŸ_£¡
Ëps->nŸ_£¡ =Ös->
œ°
;

2138 
ps
->
fú°
 =Ös->
œ°
 =Ös->
nŸ_£¡
 = 
pkt
;

2139 
pkt
->
√xt
 = 
NULL
;

2141 
ps
->
n_pkt
++;

2142 
byt_£¡
 +
t
;

2147 
	`_RudpOuçut
(
s
, 
	`PHY_CHN
(
chno
), 0) > 0);

2150 
byt_£¡
 = -
s
->
îr
;

2152 
	`PA_MuãxU∆ock
(
s
->
muãx_w
);

2155  
byt_£¡
;

2156 
	}
}

2163 
	$RUDPRecv
(
RUDPSOCKET
 
sock
, *
chno
, *
±r
, 
Àn
, 
Êags
)

2165 
rudp_sockë
 *
s
;

2166 
rudp_pcb
 *
pcb
;

2167 
rcvbuf
 *
¥b
;

2168 
i
, 
no_d©a
;

2169 
æí
;

2171 
s
 = (
rudp_sockë
*)
sock
;

2172 if(
s
->
èg
 !
RUDP_SOCKET_TAG
Ë -
ERUDP_NOT_SOCKET
;

2173 if(
s
->
îr
 && s->î∏!
ERUDP_PEER_CLOSED
)  -s->err;

2174 if(
s
->
°©e
 !
RS_ESTABLISHED
 && s->°©ê!
RS_CLOSE_WAIT
Ë -
ERUDP_NO_CONN
;

2176 
pcb
 = 
s
->pcb;

2177 
	`PA_MuãxLock
(
s
->
muãx_r
);

2178 if(
s
->
°©e
 =
RS_DEAD
)

2180 
	`PA_MuãxU∆ock
(
s
->
muãx_r
);

2181  -
s
->
îr
;

2183 
waô_d©a
:

2184 
no_d©a
=1;

2185 #ifde‡
WIN32


2186 
i
=0; i<
MAX_PHY_CHANNELS
; i++)

2188 
¥b
 = &
pcb
->
ch™√l
[
i
].
rbuf
;

2189 if(
¥b
->
pkt_q
[¥b->
hód
]Ë{ 
no_d©a
 = 0; ; }

2191 if(
no_d©a
)

2193 
	`PA_MuãxU∆ock
(
s
->
muãx_r
);

2194 if(
s
->
°©e
 =
RS_CLOSE_WAIT
)  0;

2195 if((
Êags
 & 
RUDPMSG_DONTWAIT
Ë|| (
s
->Êag†& 
RF_NBLK
))

2196  -
ERUDP_AGAIN
;

2197 
	`WaôF‹SögÀObje˘
(
s
->
evít_r
, 
INFINITE
);

2198 
	`PA_MuãxLock
(
s
->
muãx_r
);

2201 
s
->
°©e
 =
RS_ESTABLISHED
)

2203 
i
=0; i<
MAX_PHY_CHANNELS
; i++)

2205 
¥b
 = &
pcb
->
ch™√l
[
i
].
rbuf
;

2206 if(
¥b
->
pkt_q
[¥b->
hód
]Ë{ 
no_d©a
 = 0; ; }

2208 if(!
no_d©a
) ;

2209 if(
s
->
°©e
 =
RS_CLOSE_WAIT
)

2211 
	`PA_MuãxU∆ock
(
s
->
muãx_r
);

2214 if((
Êags
 & 
RUDPMSG_DONTWAIT
Ë|| (
s
->Êag†& 
RF_NBLK
))

2216 
	`PA_MuãxU∆ock
(
s
->
muãx_r
);

2217  -
ERUDP_AGAIN
;

2219 
	`±hªad_c⁄d_waô
(&
s
->
evít_r
, &s->
muãx_r
);

2222 if(
s
->
îr
 == 0)

2224 
æí
 = 0;

2225 
i
=0; i<
MAX_PHY_CHANNELS
; i++)

2227 
rudp_pkt
 *
pkt
;

2229 
¥b
 = &
pcb
->
ch™√l
[
i
].
rbuf
;

2230 
pkt
 = 
¥b
->
pkt_q
[¥b->
hód
];

2231 if(
pkt
)

2233 if(
pkt
->
Àn
 >Üen)

2235 
æí
 = 
Àn
;

2236 
	`mem˝y
(
±r
, 
pkt
->
pd©a
, 
Àn
);

2237 
pkt
->
Àn
 -=Üen;

2238 
pkt
->
pd©a
 +
Àn
;

2242 
æí
 = 
pkt
->
Àn
;

2243 
	`mem˝y
(
±r
, 
pkt
->
pd©a
, 
æí
);

2244 *
chno
 = 
pkt
->
hdr
.
Êags
.chno;

2246 
	`_MBufPutPackë
(
pkt
);

2248 
¥b
->
pkt_q
[¥b->
hód
] = 
NULL
;

2253 
¥b
->
hód
 = (¥b->hód+1)%¥b->
q_size
;

2254 
¥b
->
fú°_£q
++;

2256 
¥b
->
wö
++;

2258 if(
¥b
->
wö
 =1 && !¥b->
should_ack
)

2260 
¥b
->
should_ack
 = 
ACKT_OPENWND
;

2261 
	`_RudpOuçut
(
s
, 
	`PHY_CHN
(*
chno
), 0);

2268 if(
æí
 == 0)

2270 if(
s
->
Êags
 & 
RF_NBLK
)

2271 
æí
 = -
ERUDP_AGAIN
;

2273 
waô_d©a
;

2276 if(
s
->
îr
 =
ERUDP_PEER_CLOSED
)

2277 
æí
 = 0;

2279 
æí
 = -
s
->
îr
;

2280 
	`PA_MuãxU∆ock
(
s
->
muãx_r
);

2282  
æí
;

2283 
	}
}

2290 
	$RUDPRecvChn
(
RUDPSOCKET
 
sock
, *
chno
, *
±r
, 
Àn
, 
Êags
)

2292 
rudp_sockë
 *
s
;

2293 
rudp_pcb
 *
pcb
;

2294 
rcvbuf
 *
¥b
;

2295 
æí
;

2297 
s
 = (
rudp_sockë
*)
sock
;

2298 if(
s
->
èg
 !
RUDP_SOCKET_TAG
Ë -
ERUDP_NOT_SOCKET
;

2299 if(
s
->
îr
 && s->î∏!
ERUDP_PEER_CLOSED
)  -s->err;

2300 if(
s
->
°©e
 !
RS_ESTABLISHED
 && s->°©ê!
RS_CLOSE_WAIT
Ë -
ERUDP_NO_CONN
;

2302 
pcb
 = 
s
->pcb;

2303 
	`PA_MuãxLock
(
s
->
muãx_r
);

2304 if(
s
->
°©e
 =
RS_DEAD
)

2306 
	`PA_MuãxU∆ock
(
s
->
muãx_r
);

2307  -
s
->
îr
;

2309 
¥b
 = &
pcb
->
ch™√l
[
	`PHY_CHN
(*
chno
)].
rbuf
;

2311 
waô_d©a
:

2312 #ifde‡
WIN32


2313 if(!
¥b
->
pkt_q
[¥b->
hód
])

2315 
	`PA_MuãxU∆ock
(
s
->
muãx_r
);

2316 if(
s
->
°©e
 =
RS_CLOSE_WAIT
)  0;

2317 if(
s
->
Êags
 & 
RF_NBLK
Ë -
ERUDP_AGAIN
;

2318 
	`WaôF‹SögÀObje˘
(
s
->
evít_r
, 
INFINITE
);

2319 
	`PA_MuãxLock
(
s
->
muãx_r
);

2322 
s
->
°©e
 =
RS_ESTABLISHED
)

2324 if(
¥b
->
pkt_q
[¥b->
hód
]) ;

2326 if(
s
->
°©e
 =
RS_CLOSE_WAIT
)

2328 
	`PA_MuãxU∆ock
(
s
->
muãx_r
);

2331 if(
s
->
Êags
 & 
RF_NBLK
)

2333 
	`PA_MuãxU∆ock
(
s
->
muãx_r
);

2334  -
ERUDP_AGAIN
;

2336 
	`±hªad_c⁄d_waô
(&
s
->
evít_r
, &s->
muãx_r
);

2339 if(
s
->
îr
 == 0)

2341 
rudp_pkt
 *
pkt
;

2342 
æí
 = 0;

2343 
pkt
 = 
¥b
->
pkt_q
[¥b->
hód
];

2344 if(
pkt
)

2346 if(
pkt
->
Àn
 >Üen)

2348 
æí
 = 
Àn
;

2349 
	`mem˝y
(
±r
, 
pkt
->
pd©a
, 
Àn
);

2350 *
chno
 = 
pkt
->
hdr
.
Êags
.chno;

2352 
pkt
->
Àn
 -=Üen;

2353 
pkt
->
pd©a
 +
Àn
;

2357 
æí
 = 
pkt
->
Àn
;

2358 
	`mem˝y
(
±r
, 
pkt
->
pd©a
, 
æí
);

2359 *
chno
 = 
pkt
->
hdr
.
Êags
.chno;

2361 
	`_MBufPutPackë
(
pkt
);

2363 
¥b
->
pkt_q
[¥b->
hód
] = 
NULL
;

2368 
¥b
->
hód
 = (¥b->hód+1)%¥b->
q_size
;

2369 
¥b
->
fú°_£q
++;

2371 
¥b
->
wö
++;

2373 if(
¥b
->
wö
 =1 && !¥b->
should_ack
)

2375 
¥b
->
should_ack
 = 
ACKT_OPENWND
;

2376 
	`_RudpOuçut
(
s
, 
	`PHY_CHN
(*
chno
), 0);

2383 if(
s
->
Êags
 & 
RF_NBLK
)

2384 
æí
 = -
ERUDP_AGAIN
;

2386 
waô_d©a
;

2389 if(
s
->
îr
 =
ERUDP_PEER_CLOSED
)

2390 
æí
 = 0;

2392 
æí
 = -
s
->
îr
;

2393 
	`PA_MuãxU∆ock
(
s
->
muãx_r
);

2395  
æí
;

2396 
	}
}

2401 
	$RUDPSñe˘Sock
(
RUDPSOCKET
 
sock
, 
chno
, 
Êag
, c⁄° 
timevÆ
 *
timeout
)

2403 
rudp_sockë
 *
s
;

2404 #ifde‡
__LINUX__


2405 
time•ec
 
ts
;

2407 
s
 = (
rudp_sockë
*)
sock
;

2408 if(
s
->
èg
 !
RUDP_SOCKET_TAG
Ë -
ERUDP_NOT_SOCKET
;

2411 #ifde‡
__LINUX__


2412 if(
timeout
)

2414 
	`˛ock_gëtime
(
CLOCK_REALTIME
, &
ts
);

2415 
ts
.
tv_£c
 +
timeout
->tv_sec;

2416 
ts
.
tv_n£c
 +1000 * 
timeout
->
tv_u£c
;

2417 if(
ts
.
tv_n£c
 > 1000000000) {

2418 
ts
.
tv_n£c
 -= 1000000000;

2419 
ts
.
tv_£c
 ++;

2424 if(
Êag
 =
RUDPSELECT_READABLE
)

2426 
rcvbuf
 *
¥b
;

2427 
no_d©a
;

2428 
	`PA_MuãxLock
(
s
->
muãx_r
);

2429 if(
s
->
îr
 =
ERUDP_RESETED
 || s->î∏=
ERUDP_PEER_CLOSED
)

2431 
	`PA_MuãxU∆ock
(
s
->
muãx_r
);

2435 
no_d©a
 = 1;

2436 if(
no_d©a
 )

2438 
i
;

2439 if(
s
->
°©e
 =
RS_LISTEN
)

2441 
li°_hód
 *
p
;

2442 
	`li°_f‹_óch
(
p
, &
s
->
li°í_queue
)

2444 
rudp_sockë
 *
ss
 = 
	`li°_íåy
(
p
, rudp_sockë, 
li°í_queue
);

2445 if(
ss
->
°©e
 =
RS_ESTABLISHED
)

2447 
no_d©a
 = 0;

2452 if(
s
->
°©e
 =
RS_ESTABLISHED
)

2454 
i
=0; i<
MAX_PHY_CHANNELS
; i++)

2456 if(
chno
 < 0 || chnÿ=
i
)

2458 
¥b
 = &
s
->
pcb
->
ch™√l
[
i
].
rbuf
;

2459 if(
¥b
->
pkt_q
[¥b->
hód
]Ë{ 
no_d©a
 = 0; ; }

2464 if(
no_d©a
)

2466 #ifde‡
WIN32


2467 
	`PA_MuãxU∆ock
(
s
->
muãx_r
);

2468 
no_d©a
 = 
	`WaôF‹SögÀObje˘
(
s
->
evít_r
,

2469 
timeout
?timeout->
tv_£c
*1000+timeout->
tv_u£c
/1000:
INFINITE
Ë=
WAIT_OBJECT_0
 ? 0 : 1;

2470 
	`PA_MuãxLock
(
s
->
muãx_r
);

2472 if(
timeout
)

2473 
no_d©a
 = 
	`±hªad_c⁄d_timedwaô
(&
s
->
evít_r
, &s->
muãx_r
, &
ts
Ë=
ETIMEDOUT
 ? 1 : 0;

2475 
no_d©a
 = 
	`±hªad_c⁄d_waô
(&
s
->
evít_r
, &s->
muãx_r
) != 0;

2480 
	`PA_MuãxU∆ock
(
s
->
muãx_r
);

2481 if(
s
->
îr
)  -s->err;

2482  !
no_d©a
;

2486 if(
Êag
 =
RUDPSELECT_WRITABLE
) do

2488 
¢dbuf
 *
ps
;

2489 
wrôabÀ
 = 1;

2491 if(
chno
 < 0Ë -
ERUDP_INVALID
;

2492 if(
s
->
°©e
 !
RS_ESTABLISHED
) ;

2494 
	`PA_MuãxLock
(
s
->
muãx_w
);

2495 if(
s
->
°©e
 =
RS_DEAD
)

2497 
	`PA_MuãxLock
(
s
->
muãx_w
);

2498  -
s
->
îr
;

2501 
ps
 = &
s
->
pcb
->
ch™√l
[
chno
].
sbuf
;

2502 if(
ps
->
n_pkt
 >ps->
max_pkts
 && 
s
->
°©e
 !
RS_DEAD
)

2504 #ifde‡
WIN32


2505 
	`PA_MuãxU∆ock
(
s
->
muãx_w
);

2506 
wrôabÀ
 = 
	`WaôF‹SögÀObje˘
(
s
->
evít_w
, 
timeout
?timeout->
tv_£c
*1000+timeout->
tv_u£c
/1000:
INFINITE
)

2507 =
WAIT_OBJECT_0
 ? 1 : 0;

2508 
	`PA_MuãxLock
(
s
->
muãx_w
);

2510 if(
timeout
)

2511 
wrôabÀ
 = 
	`±hªad_c⁄d_timedwaô
(&
s
->
evít_w
, &s->
muãx_w
, &
ts
Ë=
ETIMEDOUT
 ? 0 : 1;

2513 
wrôabÀ
 = 
	`±hªad_c⁄d_waô
(&
s
->
evít_w
, &s->
muãx_w
) == 0;

2517 
	`PA_MuãxU∆ock
(
s
->
muãx_w
);

2518 if(
s
->
îr
)  -s->err;

2519  
wrôabÀ
;

2523 
	}
}

2525 
	$RUDPSñe˘
(
RUDPSOCKCHNO
 *
r_rscs
, *
n_ºscs
, RUDPSOCKCHNO *
w_rscs
, *
n_wrscs
, RUDPSOCKCHNO *
e_rscs
, *
n_îscs
, c⁄° 
timevÆ
 *
timeout
)

2527 
i
, 
ii
, 
n
;

2528 
ƒ
, 
nw
, 
√
;

2529 
li°_hód
 *
p
;

2530 
rudp_sockë
 *
s
, *
ss
;

2531 
waô_ticks
, 
t0
;

2533 
timevÆ
 
tv
;

2534 
_rfds
[64], 
_wfds
[64], 
_efds
[64];

2535 
_ƒ
, 
_nw
, 
_√
;

2536 
fd_£t
 
_rfds_
, 
_wfds_
, 
_efds_
;

2537 
max_fd
 = -1;

2539 if(
timeout
)

2540 
waô_ticks
 = 
timeout
->
tv_£c
 * 1000 +Åimeout->
tv_u£c
 / 1000;

2542 
waô_ticks
 = ~0UL;

2545 
_ƒ
 = 
_nw
 = 
_√
 = 0;

2546 if(
r_rscs
)

2548 
i
=0; i<*
n_ºscs
; i++)

2550 if(
r_rscs
[
i
].
sock
 =
NULL
)

2552 
_rfds
[
_ƒ
++] = 
r_rscs
[
i
].
chno
;

2553 
max_fd
 = 
	`max
(max_fd, 
r_rscs
[
i
].
chno
);

2557 if(
w_rscs
)

2559 
i
=0; i<*
n_wrscs
; i++)

2561 if(
w_rscs
[
i
].
sock
 =
NULL
)

2563 
_wfds
[
_nw
++] = 
w_rscs
[
i
].
chno
;

2564 
max_fd
 = 
	`max
(max_fd, 
w_rscs
[
i
].
chno
);

2568 if(
e_rscs
)

2570 
i
=0; i<*
n_îscs
; i++)

2572 if(
e_rscs
[
i
].
sock
 =
NULL
)

2574 
_efds
[
_√
++] = 
e_rscs
[
i
].
chno
;

2575 
max_fd
 = 
	`max
(max_fd, 
e_rscs
[
i
].
chno
);

2581 
ƒ
 = 
nw
 = 
√
 = 0;

2582 
t0
 = 
	`PA_GëTickCou¡
();

2584 
	`PA_MuãxLock
(
muãx_sock_li°
);

2585 if(
r_rscs
)

2587 
n
 = *
n_ºscs
;

2588 
i
 = 0; i < 
n
; i++)

2590 if(
r_rscs
[
i
].
sock
 =
NULL
) ;

2591 
s
 = (
rudp_sockë
*)
r_rscs
[
i
].
sock
;

2592 if(
s
->
îr
 =
ERUDP_RESETED
 || s->î∏=
ERUDP_PEER_CLOSED
)

2594 
	`RUDP_SET
(
s
, -1, 
r_rscs
, 
ƒ
);

2598 if(
s
->
°©e
 <
RS_CLOSED
 || s->°©ê>
RS_FIN_QUEUED
)

2604 
	`PA_MuãxLock
(
s
->
muãx_r
);

2605 if(
s
->
°©e
 =
RS_LISTEN
)

2607 
	`li°_f‹_óch
(
p
, &
s
->
li°í_queue
)

2609 
ss
 = 
	`li°_íåy
(
p
, 
rudp_sockë
, 
li°í_queue
);

2610 if(
ss
->
°©e
 =
RS_ESTABLISHED
)

2612 
r_rscs
[
ƒ
++].
sock
 = 
s
;

2618 if(
s
->
°©e
 =
RS_CLOSE_WAIT
)

2620 
	`RUDP_SET
(
s
, -1, 
r_rscs
, 
ƒ
);

2624 
rcvbuf
 *
¥b
;

2625 
ii
=0; ii<
MAX_PHY_CHANNELS
; ii++)

2627 if(
r_rscs
[
i
].
chno
 < 0 || 
ii
 ==Ñ_rscs[i].chno)

2629 
¥b
 = &
s
->
pcb
->
ch™√l
[
ii
 ].
rbuf
;

2630 if(
¥b
->
pkt_q
[¥b->
hód
])

2632 
	`RUDP_SET
(
r_rscs
[
i
].
sock
, 
ii
,Ñ_rscs, 
ƒ
);

2638 
	`PA_MuãxU∆ock
(
s
->
muãx_r
);

2641 if(
ƒ
Ë{ *
n_ºscs
 =Çr; 
r_rscs
[ƒ].
sock
 = 
INVALID_RUDPSOCKET
; }

2644 if(
w_rscs
)

2646 
n
 = *
n_wrscs
;

2647 
i
 = 0; i < 
n
; i++)

2649 if(
w_rscs
[
i
].
sock
 =
NULL
) ;

2650 
s
 = (
rudp_sockë
*)
w_rscs
[
i
].
sock
;

2651 if(
s
->
°©e
 <
RS_CLOSED
 || s->°©ê>
RS_FIN_QUEUED
)

2657 
	`PA_MuãxLock
(
s
->
muãx_w
);

2658 if(
s
->
°©e
 =
RS_ESTABLISHED
)

2660 
ii
=0; ii<
MAX_PHY_CHANNELS
; ii++)

2662 if(
w_rscs
[
i
].
chno
 < 0 || w_rscs[i].chnÿ=
ii
)

2664 
¢dbuf
 *
psb
 = &
s
->
pcb
->
ch™√l
[
ii
].
sbuf
;

2665 if(
psb
->
n_pkt
 <Ösb->
max_pkts
)

2667 
	`RUDP_SET
(
w_rscs
[
i
].
sock
, 
ii
, w_rscs, 
nw
);

2673 if(
s
->
°©e
 =
RS_CLOSE_WAIT
)

2675 
	`RUDP_SET
(
w_rscs
[
i
].
sock
, -1, w_rscs, 
nw
);

2677 
	`PA_MuãxU∆ock
(
s
->
muãx_w
);

2679 if(
nw
Ë{ *
n_wrscs
 =Çw; 
w_rscs
[nw].
sock
 = 
INVALID_RUDPSOCKET
; }

2681 if(
e_rscs
)

2683 
i
=0; i<*
n_îscs
; i++)

2685 if(
e_rscs
[
i
].
sock
 =
NULL
) ;

2686 
s
 = (
rudp_sockë
*)
e_rscs
[
i
].
sock
;

2687 if(
s
->
îr
Ë
	`RUDP_SET
(s, -1, 
e_rscs
, 
√
);

2689 if(
√
Ë{ *
n_îscs
 =Çe; 
e_rscs
[√].
sock
 = 
INVALID_RUDPSOCKET
; }

2691 
	`PA_MuãxU∆ock
(
muãx_sock_li°
);

2694 if(
_ƒ
 || 
_nw
 || 
_√
)

2696 
tv
.
tv_£c
 = 0;Åv.
tv_u£c
 = 0;

2697 if(
_ƒ
Ë{ 
	`FD_ZERO
(&
_rfds_
); 
i
=0; i<_ƒ; i++Ë
	`FD_SET
(
_rfds
[i], &_rfds_); }

2698 if(
_nw
Ë{ 
	`FD_ZERO
(&
_wfds_
); 
i
=0; i<_nw; i++Ë
	`FD_SET
(
_wfds
[i], &_wfds_); }

2699 if(
_√
Ë{ 
	`FD_ZERO
(&
_efds_
); 
i
=0; i<_√; i++Ë
	`FD_SET
(
_efds
[i], &_efds_); }

2700 if(
	`£À˘
(
max_fd
+1, 
_ƒ
?&
_rfds_
:
NULL
, 
_nw
?&
_wfds_
:NULL, 
_√
?&
_efds_
:NULL, &
tv
) > 0)

2702 if(
_ƒ
Ë
i
=0; i<_nr; i++)

2703 if(
	`FD_ISSET
(
_rfds
[
i
], &
_rfds_
))

2705 
r_rscs
[
ƒ
].
sock
 = 
NULL
;

2706 
r_rscs
[
ƒ
++].
chno
 = 
_rfds
[
i
];

2708 if(
_nw
Ë
i
=0; i<_nw; i++)

2709 if(
	`FD_ISSET
(
_wfds
[
i
], &
_wfds_
))

2711 
w_rscs
[
nw
].
sock
 = 
NULL
;

2712 
w_rscs
[
nw
++].
chno
 = 
_wfds
[
i
];

2714 if(
_√
Ë
i
=0; i<_ne; i++)

2715 if(
	`FD_ISSET
(
_efds
[
i
], &
_efds_
))

2717 
e_rscs
[
√
].
sock
 = 
NULL
;

2718 
e_rscs
[
√
++].
chno
 = 
_efds
[
i
];

2723 if(
ƒ
 || 
nw
 || 
√
) ;

2724 
	`PA_SÀï
(5);

2725 } 
	`PA_GëTickCou¡
(Ë- 
t0
 < 
waô_ticks
);

2727 if(
n_îscs
Ë*n_îsc†
√
;

2728 if(
n_ºscs
Ë*n_ºsc†
ƒ
;

2729 if(
n_wrscs
Ë*n_wrsc†
nw
;

2731  
ƒ
 + 
nw
 + 
√
;

2732 
	}
}

2734 
	$RUDP_FD_ISSET
(
fd
, c⁄° 
RUDPSOCKCHNO
 *
¥c
, 
size
)

2736 
i
;

2737 if(
fd
 < 0)  0;

2738 
i
=0; i<
size
; i++)

2740 if(
¥c
[
i
].
sock
 =
NULL
 &&Örc[i].
chno
 =
fd
)  1;

2743 
	}
}

2745 
	$RUDP_ISSET
(
RUDPSOCKET
 
s
, c⁄° 
RUDPSOCKCHNO
 *
¥c
, 
size
)

2747 
i
;

2748 if(
s
 =
INVALID_RUDPSOCKET
)  0;

2749 
i
=0; i<
size
; i++)

2751 if(
¥c
[
i
].
sock
 =
s
)  1;

2754 
	}
}

2756 
	$RUDPGëSockO±
(
RUDPSOCKET
 
sock
, 
›t
, *
›tvÆ
, *
›éí
)

2758 
rudp_sockë
 *
s
 = (rudp_sockë*)
sock
;

2759 if(
s
->
èg
 !
RUDP_SOCKET_TAG
Ë -
ERUDP_NOT_SOCKET
;

2761 
›t
)

2763 
OPT_UDP_SNDBUF
:

2764 if(*
›éí
 !()Ë -
ERUDP_INVALID
;

2765 
	`PA_GëSockO±
(
s
->
udp_sock
, 
SOL_SOCKET
, 
SO_SNDBUF
, (*)&
›t
, 
›éí
);

2767 
OPT_UDP_RCVBUF
:

2768 if(*
›éí
 !()Ë -
ERUDP_INVALID
;

2769 
	`PA_GëSockO±
(
s
->
udp_sock
, 
SOL_SOCKET
, 
SO_RCVBUF
, (*)&
›t
, 
›éí
);

2771 
OPT_RUDP_SNDBUF
:

2772 if(*
›éí
 !()Ë -
ERUDP_INVALID
;

2773 *((*)
›tvÆ
Ë
s
->
pcb
->
ch™√l
[0].
sbuf
.
max_pkts
;

2775 
OPT_RUDP_RCVBUF
:

2776 if(*
›éí
 !()Ë -
ERUDP_INVALID
;

2777 *((*)
›tvÆ
Ë
s
->
pcb
->
ch™√l
[0].
rbuf
.
q_size
;

2779 
OPT_LINGER
:

2781 
OPT_SNDTIMEO
:

2782 
OPT_RCVTIMEO
:

2784 
OPT_ADHOC
:

2785 if(*
›éí
 !()Ë -
ERUDP_INVALID
;

2786 *((*)
›tvÆ
Ë(
s
->
Êags
 & 
RF_ADHOC
)?1:0;

2789 
OPT_NBLK
:

2790 if(*
›éí
 !()Ë -
ERUDP_INVALID
;

2791 *((*)
›tvÆ
Ë(
s
->
Êags
 & 
RF_NBLK
)?1:0;

2794 
OPT_REUSEADDR
:

2795 if(*
›éí
 !()Ë -
ERUDP_INVALID
;

2796 
	`PA_GëSockO±
(
s
->
udp_sock
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*)
›tvÆ
, 
›éí
);

2798 
OPT_ERR
:

2799 if(*
›éí
 !()Ë -
ERUDP_INVALID
;

2800 *((*)
›tvÆ
Ë
s
->
îr
;

2803  -
ERUDP_INVALID
;

2806 
	}
}

2808 
	$RUDPSëSockO±
(
RUDPSOCKET
 
sock
, 
›t
, c⁄° *
›tvÆ
, 
›éí
)

2810 
i
, 
vÆ
;

2811 
rudp_sockë
 *
s
 = (rudp_sockë*)
sock
;

2812 if(
s
->
èg
 !
RUDP_SOCKET_TAG
Ë -
ERUDP_NOT_SOCKET
;

2814 
›t
)

2816 
OPT_UDP_SNDBUF
:

2817 if(
›éí
 !()Ë -
ERUDP_INVALID
;

2818 
	`£tsock›t
(
s
->
udp_sock
, 
SOL_SOCKET
, 
SO_SNDBUF
, (*)&
›t
, 
›éí
);

2820 
OPT_UDP_RCVBUF
:

2821 if(
›éí
 !()Ë -
ERUDP_INVALID
;

2822 
	`£tsock›t
(
s
->
udp_sock
, 
SOL_SOCKET
, 
SO_RCVBUF
, (*)&
›t
, 
›éí
);

2824 
OPT_RUDP_SNDBUF
:

2825 if(
›éí
 !()Ë -
ERUDP_INVALID
;

2826 if(
s
->
pcb
)

2828 
vÆ
 = *((*)
›tvÆ
);

2829 if(
vÆ
 > 
MAX_WINDOW
) val = MAX_WINDOW;

2830 if(
vÆ
 < 64) val = 64;

2831 
i
=0; i<
MAX_PHY_CHANNELS
; i++)

2832 
s
->
pcb
->
ch™√l
[
i
].
sbuf
.
max_pkts
 = 
vÆ
;

2835 
OPT_RUDP_RCVBUF
:

2836 if(
›éí
 !()Ë -
ERUDP_INVALID
;

2837 if(!
s
->
pcb
 && s->
°©e
 =
RS_CLOSED
)

2839 
vÆ
 = *((*)
›tvÆ
);

2840 if(
vÆ
 > 
MAX_WINDOW
) val = MAX_WINDOW;

2841 if(
vÆ
 < 64) val = 64;

2842 
s
->
rcvbuf_sz
 = 
vÆ
;

2845 
OPT_LINGER
:

2847 
OPT_SNDTIMEO
:

2848 
OPT_RCVTIMEO
:

2850 
OPT_ADHOC
:

2851 if(
›éí
 !()Ë -
ERUDP_INVALID
;

2852 if(
s
->
°©e
 !
RS_CLOSED
 || s->
pcb
Ë -
ERUDP_NOT_ALLOWED
;

2853 if(*((*)
›tvÆ
)Ë
s
->
Êags
 |
RF_ADHOC
;

2854 
s
->
Êags
 &~
RF_ADHOC
;

2856 
OPT_REUSEADDR
:

2857 if(
›éí
 !()Ë -
ERUDP_INVALID
;

2858 
	`£tsock›t
(
s
->
udp_sock
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*)
›tvÆ
, 
›éí
);

2861 
OPT_NBLK
:

2862 if(
›éí
 !()Ë -
ERUDP_INVALID
;

2863 if(
s
->
°©e
 < 
RS_CLOSED
Ë -
ERUDP_NOT_ALLOWED
;

2864 if(*((*)
›tvÆ
)Ë
s
->
Êags
 |
RF_NBLK
;

2865 
s
->
Êags
 &~
RF_NBLK
;

2869  -
ERUDP_INVALID
;

2872 
	}
}

2874 
	$RUDPGëSockName
(
RUDPSOCKET
 
sock
, 
sockaddr
 *
«me
)

2876 
rudp_sockë
 *
s
 = (rudp_sockë*)
sock
;

2877 
sockÀn_t
 
Àn
 = (
sockaddr
);

2878  
	`gësock«me
(
s
->
udp_sock
, 
«me
, &
Àn
);

2879 
	}
}

2881 
	$RUDPGëPìrName
(
RUDPSOCKET
 
sock
, 
sockaddr
 *
«me
)

2883 
rudp_sockë
 *
s
 = (rudp_sockë*)
sock
;

2884 if(
s
->
pcb
)

2886 
	`mem˝y
(
«me
, &
s
->
pcb
->
≥î
, (
sockaddr
));

2889 
	`mem£t
(
«me
, 0, (
sockaddr
));

2891 
	}
}

	@rudp.h

1 #i‚de‡
__rudp_h__


2 
	#__rudp_h__


	)

4 #ifde‡
WIN32


5 
	~<wösock2.h
>

7 
	~<√töë/ö.h
>

9 
	~"∂©f‹m_ad±.h
"

11 * 
	tRUDPSOCKET
;

12 
	#INVALID_RUDPSOCKET
 
NULL


	)

22 
	#ERUDP_FIRST
 100

	)

23 
	#ERUDP_NOT_SOCKET
 (
ERUDP_FIRST
+1)

	)

24 
	#ERUDP_NOT_ALLOWED
 (
ERUDP_FIRST
+2)

	)

25 
	#ERUDP_CONN_FAILED
 (
ERUDP_FIRST
+3)

	)

26 
	#ERUDP_CONNECTED
 (
ERUDP_FIRST
+4)

	)

27 
	#ERUDP_IN_PROGRESS
 (
ERUDP_FIRST
+5)

	)

28 
	#ERUDP_NO_CONN
 (
ERUDP_FIRST
+6)

	)

29 
	#ERUDP_BIND
 (
ERUDP_FIRST
+7)

	)

30 
	#ERUDP_RESETED
 (
ERUDP_FIRST
+8)

	)

31 
	#ERUDP_TIMEOUTED
 (
ERUDP_FIRST
+9)

	)

32 
	#ERUDP_INVALID
 (
ERUDP_FIRST
+10)

	)

33 
	#ERUDP_PEER_CLOSED
 (
ERUDP_FIRST
+11)

34 
	#ERUDP_AGAIN
 (
ERUDP_FIRST
+12)

	)

36 #ifde‡
__˝lu•lus


41 
RUDPSèπ
();

42 
RUDPCÀ™up
();

44 
RUDPSOCKET
 
RUDPSockë
();

45 
RUDPSOCKET
 
RUDPSockëFromUdp
(
udpsock
);

46 
RUDPClo£
(
RUDPSOCKET
 
sock
);

48 
RUDPLi°í
(
RUDPSOCKET
 
sock
, 
n
);

49 
RUDPAc˚±
(
RUDPSOCKET
 
sock
, RUDPSOCKET *
ac˚±ed
, 
sockaddr
 *
addr
, *
addæí
);

50 
RUDPBöd
(
RUDPSOCKET
 
sock
, c⁄° 
sockaddr
 *
addr
, 
addæí
);

51 
RUDPC⁄√˘
(
RUDPSOCKET
 
sock
, c⁄° 
sockaddr
* 
addr
, 
addr_Àn
);

55 
RUDPC⁄√˘ed
(
RUDPSOCKET
 
sock
, c⁄° 
sockaddr
* 
addr
, 
≥î_rbuf_sz
);

57 
	#RUDPMSG_DONTWAIT
 0x0001

	)

59 
RUDPRecv
(
RUDPSOCKET
 
sock
, *
chno
, *
±r
, 
Àn
, 
Êags
);

60 
RUDPRecvChn
(
RUDPSOCKET
 
sock
, *
chno
, *
±r
, 
Àn
, 
Êags
);

61 
RUDPSíd
(
RUDPSOCKET
 
sock
, 
chno
, c⁄° *
±r
, 
Àn
, 
Êags
);

62 
RUDPSídV
(
RUDPSOCKET
 
sock
, 
chno
, c⁄° 
PA_IOVEC
 *
v
, 
size
, 
Êags
);

65 
	#OPT_UDP_SNDBUF
 1

	)

66 
	#OPT_UDP_RCVBUF
 2

	)

67 
	#OPT_RUDP_SNDBUF
 3

68 
	#OPT_RUDP_RCVBUF
 4

69 
	#OPT_LINGER
 5

	)

70 
	#OPT_FC
 6

	)

71 
	#OPT_MSS
 7

	)

72 
	#OPT_SNDTIMEO
 11

	)

73 
	#OPT_RCVTIMEO
 12

	)

74 
	#OPT_REUSEADDR
 13

75 
	#OPT_ADHOC
 14

76 
	#OPT_NBLK
 15

	)

77 
	#OPT_ERR
 16

78 
	`RUDPGëSockO±
(
RUDPSOCKET
 
sock
, 
›t
, *
›tvÆ
, *
›éí
);

	)

79 
RUDPSëSockO±
(
RUDPSOCKET
 
sock
, 
›t
, c⁄° *
›tvÆ
, 
›éí
);

81 
	#RUDPSELECT_READABLE
 0x01

	)

82 
	#RUDPSELECT_WRITABLE
 0x02

	)

84 
RUDPSñe˘Sock
(
RUDPSOCKET
 
sock
, 
chno
, 
Êag
 , c⁄° 
timevÆ
 *
timeout
);

90 
	s_ègSñe˘Chn
 {

91 
RUDPSOCKET
 
sock
;

92 
chno
;

93 } 
	tRUDPSOCKCHNO
;

95 
RUDPSñe˘
(
RUDPSOCKCHNO
 *
r_rcs
, *
n_ºc
, RUDPSOCKCHNO *
w_rcs
, *
n_wrc
, RUDPSOCKCHNO *
e_rcs
, *
n_îc
, c⁄° 
timevÆ
 *
timeout
);

97 
	#RUDP_FD_SET
(
fd
, 
¥c
, 
size
) \

98 dÿ{ 
¥c
[
size
].
sock
 = 
NULL
;Örc[size++].
chno
 = 
fd
; }0)

	)

99 
	#RUDP_SET
(
s
, 
chn
, 
¥c
, 
size
) \

100 dÿ{ 
¥c
[
size
].
sock
 = 
s
;Örc[size++].
chno
 = 
chn
; }0)

	)

101 
	#RUDP_CLR
(
s
, 
chn
, 
¥c
, 
size
) \

102 dÿ{ 
i
; i=0; i<
size
; i++) \

103 if(
¥c
[
i
].
sock
 =
s
 &&Örc[i].
chno
 =
chn
) ; \

104 if(
i
 < 
size
Ë{ i<size-1Ë
¥c
[i] =Örc[i+1]; size--; } \

105 } 0)

	)

107 
RUDP_FD_ISSET
(
fd
, c⁄° 
RUDPSOCKCHNO
 *
¥c
, 
size
);

108 
RUDP_ISSET
(
RUDPSOCKET
 
s
, c⁄° 
RUDPSOCKCHNO
 *
¥c
, 
size
);

110 
RUDPGëSockName
(
RUDPSOCKET
 
sock
, 
sockaddr
 *
«me
);

111 
RUDPGëPìrName
(
RUDPSOCKET
 
sock
, 
sockaddr
 *
«me
);

113 #ifde‡
__˝lu•lus


	@rudp_imp.h

1 #i‚de‡
__rudp_imp_h__


2 
	#__rudp_imp_h__


	)

4 
	~"ba£ty≥.h
"

5 
	~"löux_li°.h
"

6 
	~"∂©f‹m_ad±.h
"

9 #i‚de‡
BYTE_ORDER


10 
	#BYTE_ORDER
 
LITTLE_ENDIAN


	)

13 
	#RUDP_HEADER_TAG
 3

	)

14 
	#MAX_LOSS_REPORT
 63

15 
	#MAX_WINDOW
 4095

16 

	)

18 
	srudp_hdr
 {

20 
uöt32
 
	mu32_Êags
;

22 
uöt8
 
	mèg
;

23 
uöt8
 
	mÊags
;

24 
uöt8
 
	mwödow
;

25 
uöt8
 
	mchno
;

26 } 
	mu8_Êags
;

29 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


30 
uöt32
 
	mchno
:8;

31 
uöt32
 
	mwödow
:12;

32 
uöt32
 
	mn_loss
:6;

33 
uöt32
 
	mack
:1;

34 
uöt32
 
	mr°
:1;

35 
uöt32
 
	mfö
:1;

36 
uöt32
 
	msyn
:1;

37 
uöt32
 
	mrudp
:2;

39 
uöt32
 
	mrudp
:2;

40 
uöt32
 
	msyn
:1;

41 
uöt32
 
	mfö
:1;

42 
uöt32
 
	mr°
:1;

43 
uöt32
 
	mack
:1;

44 
uöt32
 
	mn_loss
:6;

45 
uöt32
 
	mwödow
:12;

46 
uöt32
 
	mchno
:8;

49 } 
	mÊags
;

52 
uöt32
 
	m£qno
;

53 
uöt32
 
	mackno
;

55 
uöt32
 
	m¸c32
;

57 
	#PHY_HDR_CHN
(
hdr
Ë(hdr.
Êags
.
chno
&1)

	)

58 
	#PHY_CHN
(
chno
Ë((chno)&1)

	)

61 
	#WINDOW_NTOH
(
wödow
Ë
	)
window

62 
	#WINDOW_HTON
(
wödow
Ë
	)
window

69 
	#MAX_PACKET_SIZE
 1448

	)

70 
	#MAX_DATA_SIZE
 (
MAX_PACKET_SIZE
-(
rudp_hdr
))

	)

71 
	srudp_pkt
 {

72 
rudp_pkt
 *
	m√xt
;

75 
uöt32
 
	m£qno
;

76 
	mts
;

78 
	må™s
;

80 
	mÀn
;

81 *
	mpd©a
;

83 
rudp_hdr
 
	mhdr
;

84 
	md©a
[
MAX_DATA_SIZE
];

89 
	mRS_DEAD
 = -1,

90 
	mRS_CLOSED
 = 0,

91 
	mRS_LISTEN
,

92 
	mRS_SYN_SENT
,

93 
	mRS_SYN_RCVD
,

94 
	mRS_ESTABLISHED
,

95 
	mRS_CLOSE_WAIT
,

96 
	mRS_FIN_QUEUED
,

97 
	mRS_FIN_WAIT_1
,

98 
	mRS_FIN_WAIT_2
,

99 
	mRS_CLOSING
,

100 
	mRS_TIME_WAIT


101 } 
	tRUDPSTATE
;

109 
	#RT_KEEP
 0

	)

110 
	#RT_2MSL
 1

	)

111 
	#RT_CNT
 2

	)

113 
	#RCT_PERSIST
 0

	)

114 
	#RCT_REXMT
 1

	)

115 
	#RCT_CNT
 2

	)

117 
	#RUDPT_RANGESET
(
tv
, 
vÆue
, 
tvmö
, 
tvmax
) { \

118 (
tv
Ë(
vÆue
); \

119 i‡((
tv
Ë< (
tvmö
)) \

120 (
tv
Ë(
tvmö
); \

121 i‡((
tv
Ë> (
tvmax
)) \

122 (
tv
Ë(
tvmax
); \

123 }

	)

125 
	#RTV_KEEP_INIT
 15

	)

126 
	#RTV_REXMTMIN
 2

	)

127 
	#RTV_REXMTMAX
 128

	)

128 
	#RTV_PERSMIN
 10

	)

129 
	#RTV_PERSMAX
 120

	)

130 
	#RTV_KEEP_CLOSE
 5

	)

134 
	#SEQ_LT
(
a
,
b
Ë(()(◊Ë- (b)Ë< 0)

	)

135 
	#SEQ_LE
(
a
,
b
Ë(()(◊Ë- (b)Ë<0)

	)

136 
	#SEQ_GT
(
a
,
b
Ë(()(◊Ë- (b)Ë> 0)

	)

137 
	#SEQ_GE
(
a
,
b
Ë(()(◊Ë- (b)Ë>0)

	)

145 
	#DEFAULT_SNDBUF_SIZE
 128

	)

146 
	#DEFAULT_RCVBUF_SIZE
 128

	)

147 
	s¢dbuf
 {

148 
uöt32
 
	m£qno
;

149 
	mmax_pkts
;

150 
	mn_pkt
;

151 
	mn_u«cked
;

152 
rudp_pkt
 *
	mfú°
, *
	mœ°
;

153 
rudp_pkt
 *
	mnŸ_£¡
;

154 
rudp_pkt
 *
	mªxmt
;

157 
	møwnd
;

158 
	mrwnd
;

160 
	mæo°
;

166 
	mdup_ack
;

167 
uöt32
 
	mÁ°ªå_íd_£q
;

170 
	m°›_πtm
;

171 
rudp_pkt
 *
	mpkt_πtm_°¨t
;

174 
	srcvbuf
 {

175 
uöt32
 
	mfú°_£q
;

176 
uöt32
 
	mex≥˘ed_£qno
;

177 
uöt32
 
	macked_£qno
;

178 
	mshould_ack
;

179 
	mn_lo°
;

181 
	mq_size
;

182 
rudp_pkt
 **
	mpkt_q
;

183 
	mhód
;

184 
	mloss
;

185 
	mèû
;

186 
	mwö
;

191 
	srudp_ch™√l
 {

192 
	mtimî
[
RCT_CNT
];

193 
	mc⁄ge°ed
;

194 
¢dbuf
 
	msbuf
;

195 
rcvbuf
 
	mrbuf
;

199 
	#MAX_PHY_CHANNELS
 2

	)

200 
	#MAX_LOG_CHANNELS
 128

	)

201 
	srudp_pcb
 {

202 
sockaddr_ö
 
	mloˇl
;

203 
sockaddr_ö
 
	m≥î
;

211 
	mˇ_˙t
;

212 
	mcwnd
;

213 
	ms°hªsh
;

217 
	m§â
;

218 
	msdev
;

219 
	mπo
;

222 
	mrwö_size
;

223 
	mπw_size
;

224 
rudp_ch™√l
 
	mch™√l
[
MAX_PHY_CHANNELS
];

227 
	mªå_˙t
;

230 
	#RUDP_SOCKET_TAG
 0x50445552

231 
	#RF_ADHOC
 0x00000001

	)

232 
	#RF_NBLK
 0x00000002

	)

233 
	srudp_sockë
 {

234 
	mèg
;

239 
li°_hód
 
	mö°_li°
;

249 
li°_hód
 
	mac˚±ed_li°
;

254 
li°_hód
 
	mli°í_queue
;

257 
	mudp_sock
;

258 
BOOL
 
	mc⁄√˘ed
;

260 
	m°©e
;

261 
	mtimî
[
RT_CNT
];

263 
rudp_pcb
 *
	mpcb
;

265 
PA_MUTEX
 
	mmuãx_r
, 
	mmuãx_w
;

266 #ifde‡
WIN32


267 
HANDLE
 
	mevít_r
, 
	mevít_w
;

269 
±hªad_c⁄d_t
 
	mevít_r
, 
	mevít_w
;

271 
	mÊags
;

273 
	mrcvbuf_sz
;

276 
	mîr
;

	@timerq.c

1 #ifde‡
__LINUX__


2 
	~<sys/ty≥s.h
>

3 
	~<sys/£À˘.h
>

4 
	~<sys/time.h
>

5 
	~<uni°d.h
>

6 #ñi‡
deföed
(
WIN32
)

8 
	~<°rög.h
>

9 
	~"timîq.h
"

10 
	~"löux_li°.h
"

11 
	~"∂©f‹m_ad±.h
"

13 
	s£rvi˚_ôem
 {

14 
	m«me
[16];

15 
SERVICEFUNC
 
	mfunc
;

16 *
	md©a
;

17 
	mrun_a·î
;

20 
	#CMD_ADD_ITEM
 0

	)

21 
	#CMD_DEL_ITEM
 1

	)

22 
	squeue_cmd
 {

23 
	mcmd
;

24 
£rvi˚_ôem
 
	môem
;

26 
	s£rvi˚_queue_ôem
 {

27 
li°_hód
 
	mli°
;

28 
£rvi˚_ôem
 
	môem
;

29 
BOOL
 
	mbNew
;

32 
	s£rvi˚_queue
 {

33 
PA_HTHREAD
 
	mhThªad
;

34 
	mqueue_ty≥
;

36 
PA_PIPE
 
	mpùe
[2];

37 } 
	gs_queue
[2] = {

38 { 0, 
SLOW_QUEUE
, {
PA_INVALID_HANDLE
, PA_INVALID_HANDLE} },

39 { 0, 
FAST_QUEUE
, {
PA_INVALID_HANDLE
, PA_INVALID_HANDLE} }

44 
	$queueSîvi˚Iãm
(
li°_hód
 *
‰ì_li°
, li°_hód *
waô_li°
, 
£rvi˚_ôem
 *
svi
)

46 
li°_hód
* 
p
;

47 
£rvi˚_queue_ôem
 *
ôem
;

49 
	`li°_f‹_óch
(
p
, 
waô_li°
)

51 
ôem
 = 
	`li°_íåy
(
p
, 
£rvi˚_queue_ôem
, 
li°
);

52 if(
ôem
->ôem.
func
 =
svi
->fun¯&& iãm->ôem.
d©a
 == svi->data)

58 if(
	`li°_em±y
(
‰ì_li°
)) ;

59 
p
 = 
‰ì_li°
->
√xt
;

60 
	`li°_dñ
(
p
);

61 
	`INIT_LIST_HEAD
(
p
);

62 
ôem
 = 
	`li°_íåy
(
p
, 
£rvi˚_queue_ôem
, 
li°
);

63 
	`mem˝y
(&
ôem
->ôem, 
svi
, (
£rvi˚_ôem
));

64 
ôem
->
bNew
 = 
TRUE
;

67 
	`li°_add_èû
(
p
, 
waô_li°
);

68 
	}
}

69 
	$dequeueSîvi˚Iãm
(
li°_hód
 *
‰ì_li°
, li°_hód *
waô_li°
, c⁄° 
£rvi˚_ôem
 *
psi
)

71 
li°_hód
 *
p
, *
q
;

72 
£rvi˚_queue_ôem
 *
ôem
;

74 
	`li°_f‹_óch_ß„
(
p
, 
q
, 
waô_li°
)

76 
ôem
 = 
	`li°_íåy
(
p
, 
£rvi˚_queue_ôem
, 
li°
);

77 if(
ôem
->ôem.
func
 =
psi
->fun¯&& (psi->
run_a·î
 || iãm->ôem.
d©a
 ==Ösi->data))

79 
	`li°_dñ
(&
ôem
->
li°
);

80 
	`INIT_LIST_HEAD
(&
ôem
->
li°
);

81 
	`li°_add_èû
(&
ôem
->
li°
, 
‰ì_li°
);

84 
	}
}

86 
PA_THREAD_RETTYPE
 
__STDCALL
 
	$TimîQueueThªad
(* 
d©a
)

88 
£rvi˚_queue
 *
pq
 = (£rvi˚_queue*)
d©a
;

89 
DWORD
 
t1
, 
t2
;

90 
li°_hód
 *
p
;

91 
ñ≠£
 = 0;

92 
li°_hód
 
waô_li°
, 
‰ì_li°
;

93 
£rvi˚_queue_ôem
 *
pIãms
;

94 
i
;

96 
	`INIT_LIST_HEAD
(&
waô_li°
);

97 
	`INIT_LIST_HEAD
(&
‰ì_li°
);

98 
pIãms
 = (
£rvi˚_queue_ôem
*)
	`mÆloc
((£rvi˚_queue_ôem)*
MAX_QUEUE_SIZE
);

99 
i
=0; i<
MAX_QUEUE_SIZE
; i++)

101 
	`INIT_LIST_HEAD
(&
pIãms
[
i
].
li°
);

102 
	`li°_add_èû
(&
pIãms
[
i
].
li°
, &
‰ì_li°
);

104 
t1
 = 
	`PA_GëTickCou¡
();

107 
£rvi˚_queue_ôem
* 
ôemToPro˚ss
 = 
NULL
;

108 
mö_waô
 = ~0UL;

111 
	`li°_f‹_óch
(
p
, &
waô_li°
)

113 
£rvi˚_queue_ôem
 *
ôem
;

114 
ôem
 = 
	`li°_íåy
(
p
, 
£rvi˚_queue_ôem
, 
li°
);

116 if(
ôem
->
bNew
Ëôem->bNew = 
FALSE
;

119 
ôem
->ôem.
run_a·î
 -
ñ≠£
;

121 if(
ôem
->ôem.
run_a·î
 <= 0)

123 if(!
ôemToPro˚ss
ËôemToPro˚s†
ôem
;

126 if(
ôem
->ôem.
run_a·î
 > 0 && iãm->ôem.run_a·î < 
mö_waô
)

127 
mö_waô
 = 
ôem
->ôem.
run_a·î
;

131 if(
ôemToPro˚ss
)

133 
	`li°_dñ
(&
ôemToPro˚ss
->
li°
);

135 
ôemToPro˚ss
->
ôem
.
	`func
(ôemToPro˚ss->ôem.
d©a
);

136 
	`li°_add_èû
(&
ôemToPro˚ss
->
li°
, &
‰ì_li°
);

140 #ifde‡
__LINUX__


141 
timevÆ
 
tv
;

142 
fd_£t
 
rfds
;

144 
	`FD_ZERO
(&
rfds
);

145 
	`FD_SET
(
pq
->
pùe
[0], &
rfds
);

146 
tv
.
tv_£c
 = 
mö_waô
/1000;

147 
tv
.
tv_u£c
 = (
mö_waô
%1000)*1000;

148 if(
	`£À˘
(
pq
->
pùe
[0]+1, &
rfds
, 
NULL
, NULL, 
mö_waô
?&
tv
:NULLË> 0 && 
	`FD_ISSET
(pq->pipe[0], &rfds))

149 #ñi‡
	`deföed
(
WIN32
)

150 if(
	`WaôF‹SögÀObje˘
(
pq
->
pùe
[0], 
mö_waô
Ë=
WAIT_OBJECT_0
)

153 
queue_cmd
 
cmd
;

154 #ifde‡
__LINUX__


155 if((
	`ªad
(
pq
->
pùe
[0], &
cmd
, (cmd)Ë=(cmd)Ë&& cmd.
ôem
.
func
 )

156 #ñi‡
	`deföed
(
WIN32
)

157 
DWORD
 
dwRód
;

158 if(
	`RódFûe
(
pq
->
pùe
[0], &
cmd
, (cmd), &
dwRód
, 
NULL
Ë&& dwRód =(cmdË&& cmd.
ôem
.
func
)

161 if(
cmd
.cmd =
CMD_ADD_ITEM
)

163 if(
cmd
.
ôem
.
run_a·î
 <= 0)

164 
cmd
.
ôem
.
	`func
(cmd.ôem.
d©a
);

166 
	`queueSîvi˚Iãm
(&
‰ì_li°
, &
waô_li°
, &
cmd
.
ôem
);

168 if(
cmd
.cmd =
CMD_DEL_ITEM
Ë
	`dequeueSîvi˚Iãm
(&
‰ì_li°
, &
waô_li°
, &cmd.
ôem
);

176 
t2
 = 
	`PA_GëTickCou¡
();

177 
ñ≠£
 = 
t2
 - 
t1
;

178 if(
ñ≠£
Ë
t1
 = 
t2
;

181 
	`‰ì
(
pIãms
);

182 
	`dbg_msg
("TimerQueueThreadÅerminaed\n");

183  (
PA_THREAD_RETTYPE
)
NULL
;

184 
	}
}

188 
	$QueueSîvi˚Iãm
(
which
, 
SERVICEFUNC
 
func
, * 
d©a
, 
run_a·î
, c⁄° *
«me
)

190 
queue_cmd
 
cmd
;

192 
	`mem£t
(&
cmd
, 0, (cmd));

193 
cmd
.cmd = 
CMD_ADD_ITEM
;

194 if(
«me
)

196 
	`°∫˝y
(
cmd
.
ôem
.
«me
,Çame, (cmd.item.name));

197 
cmd
.
ôem
.
«me
[15] = '\0';

200 
cmd
.
ôem
.
«me
[0] = '\0';

201 
cmd
.
ôem
.
func
 = func;

202 
cmd
.
ôem
.
d©a
 = data;

203 
cmd
.
ôem
.
run_a·î
 =Ñun_after;

204 #ifde‡
__LINUX__


205  
	`wrôe
(
s_queue
[
which
?1:0].
pùe
[1], &
cmd
, (cmd))>0?0:-1;

206 #ñi‡
	`deföed
(
WIN32
)

207 { 
DWORD
 
dwWrôãn
;  
	`WrôeFûe
(
s_queue
[
which
?1:0].
pùe
[1], &
cmd
, (cmd), &dwWrôãn, 
NULL
)?0:-1; }

209 
	}
}

210 
	$DequeueSîvi˚Iãm
(
which_queue
, 
SERVICEFUNC
 
func
, * 
d©a
, 
BOOL
 
bIgn‹eD©a
)

212 
queue_cmd
 
cmd
;

214 
	`mem£t
(&
cmd
, 0, (cmd));

215 
cmd
.cmd = 
CMD_DEL_ITEM
;

216 
cmd
.
ôem
.
func
 = func;

217 
cmd
.
ôem
.
d©a
 = data;

218 
cmd
.
ôem
.
run_a·î
 = 
bIgn‹eD©a
;

219 #ifde‡
__LINUX__


220 
	`wrôe
(
s_queue
[
which_queue
?1:0].
pùe
[1], &
cmd
, (cmd));

221 #ñi‡
	`deföed
(
WIN32
)

222 { 
DWORD
 
dwWrôãn
; 
	`WrôeFûe
(
s_queue
[
which_queue
?1:0].
pùe
[1], &
cmd
, (cmd), &dwWrôãn, 
NULL
); }

224 
	}
}

226 
	$SèπTimîQueue
()

228 
i
;

229 
i
=
SLOW_QUEUE
; i<=
FAST_QUEUE
; i++)

231 if(!
	`PA_IsVÆidH™dÀ
(
s_queue
[
i
].
pùe
[0]))

233 
	`PA_PùeCª©e
(&
s_queue
[
i
].
pùe
[0], &s_queue[i].pipe[1]);

234 
s_queue
[
i
].
hThªad
 = 
	`PA_ThªadCª©e
(
TimîQueueThªad
, &s_queue[i]);

237 
	}
}

239 
	$St›TimîQueue
()

241 
i
;

243 
i
=
SLOW_QUEUE
; i<=
FAST_QUEUE
; i++)

245 if(
	`PA_IsVÆidH™dÀ
(
s_queue
[
i
].
pùe
[0]))

247 
	`QueueSîvi˚Iãm
(
i
, 
NULL
, 0, 0, NULL);

248 
	`PA_ThªadWaôU¡ûTîmö©e
(
s_queue
[
i
].
hThªad
);

249 
	`dbg_msg
("private service joined\n");

250 
	`PA_PùeClo£
(
s_queue
[
i
].
pùe
[0]);

251 
	`PA_PùeClo£
(
s_queue
[
i
].
pùe
[1]);

252 
s_queue
[
i
].
pùe
[0] = s_queue[i].pùe[1] = 
PA_INVALID_HANDLE
;

255 
	}
}

	@timerq.h

1 #i‚de‡
__timîq_h__


2 
	#__timîq_h__


	)

4 #ifde‡
__˝lu•lus


8 
	~"∂©f‹m_ad±.h
"

10 
	#MAX_QUEUE_SIZE
 10

	)

12 (*
SERVICEFUNC
)(*);

14 
	#SLOW_QUEUE
 0

	)

15 
	#FAST_QUEUE
 1

	)

16 
QueueSîvi˚Iãm
(
which
, 
SERVICEFUNC
 
func
, * 
d©a
, 
run_a·î
 , c⁄° *
«me
);

17 
DequeueSîvi˚Iãm
(
which_queue
, 
SERVICEFUNC
 
func
, * 
d©a
, 
BOOL
 
bIgn‹eD©a
);

19 
SèπTimîQueue
();

20 
St›TimîQueue
();

22 #ifde‡
__˝lu•lus


	@upnp_igd_cp.c

1 
	~"möiu≤pc/möiu≤pc.h
"

2 
	~"möiu≤pc/möiwgë.h
"

3 
	~"möiu≤pc/u≤pcomm™ds.h
"

4 
	~"u≤p_igd_˝.h
"

5 
	~"timîq.h
"

6 
	~"√tba£.h
"

12 
	gexã∫Æ_ù
 = 0;

14 *
	$°∫˝yz
(*
de°
, c⁄° *
§c
, 
size
)

16 
i
;

17 
size
--;

18 
i
=0; i<
size
&&*
§c
; i++)

20 
de°
[
i
] = 
§c
[i];

22 
de°
[
i
] = '\0';

23  
de°
;

24 
	}
}

27 c⁄° *
	g±_«me
[2] = { "UDP", "TCP" };

28 
	#OP_ADD
 1

	)

29 
	#OP_REMOVE
 2

	)

30 
	sIgdP‹tM≠
 {

31 
	m›
;

32 
	mdesc
[24];

33 
	mp‹t_ty≥
;

35 
	mloc_p‹t
, 
	mext_p‹t
;

37 
	mm≠≥d
;

38 } 
	tIGDPORTMAP
;

40 
	#PORTMAP_SIZE
 8

	)

41 
	sUPnPIGDW‹kP¨am
 {

42 
UPNPDev
 *
	mdevLi°
;

43 
UPNPDev
 *
	mdevi˚
, *
	mpNext
;

44 
UPNPUæs
 
	muæ
;

45 
IGDd©as
 
	md©a
;

47 
	mnIãm
;

48 
IGDPORTMAP
 
	mm≠
[
PORTMAP_SIZE
];

49 } 
	tUPNPIGDWORKPARAM
;

51 
UPNPIGDWORKPARAM
 
	gigd_wp
;

52 
PA_MUTEX
 
	gh_muãx
;

53 
BOOL
 
	gbInôed
 = 
FALSE
;

55 
	$˛órIgdWp
(
UPNPIGDWORKPARAM
 *
pWp
)

57 if(
pWp
->
devi˚
)

59 
pWp
->
devi˚
->
pNext
 =ÖWp->pNext;

60 
	`‰ìUPNPDevli°
(
pWp
->
devLi°
);

61 
pWp
->
devi˚
 =ÖWp->
pNext
 = 
NULL
;

62 
pWp
->
devLi°
 = 
NULL
;

63 
	`FªeUPNPUæs
(&
pWp
->
uæ
);

65 
	}
}

67 
BOOL
 
	$U≤pIgdCpGëN©M≠≥dAddªss
(
loc_p‹t
, 
uöt32
 *
ext_ù
, 
uöt16
 *
ext_p‹t
)

69 
i
;

70 if(
exã∫Æ_ù
 =0Ë 
FALSE
;

71 *
ext_ù
 = 
exã∫Æ_ù
;

72 
i
=0; i<
igd_wp
.
nIãm
; i++)

74 if(
igd_wp
.
m≠
[
i
].
loc_p‹t
 =loc_p‹à&& igd_wp.m≠[i].
m≠≥d
)

76 *
ext_p‹t
 = 
igd_wp
.
m≠
[
i
].ext_port;

77  
TRUE
;

80  
FALSE
;

81 
	}
}

83 
	$U≤pIgdCp
(
UPNPIGDWORKPARAM
 *
pWp
)

85 
gw
, 
œnù
;

86 
UPNPDev
 *
devi˚
;

87 
öãrvÆ
;

90 
öãrvÆ
 = 30;

91 if–!
	`GëDeÁu…Rouã
(&
gw
, &
œnù
) || gw == 0 )

94 
sIp
[16];

95 
	`IP2STR
(
œnù
, 
sIp
);

96 if(!
pWp
->
devLi°
 && !’Wp->devLi° = 
	`u≤pDiscovî
(3000, 
NULL
, 
sIp
, 0)) )

99 if(!
pWp
->
devi˚
)

101 
devi˚
 = 
pWp
->
devLi°
; devi˚; devi˚ = devi˚->
pNext
)

103 
ho°
[100 ], *
∑th
;

104 
p‹t
;

105 if–
	`∑r£URL
(
devi˚
->
descURL
, 
ho°
, &
p‹t
, &
∑th
Ë&& (
gw
 =
	`öë_addr
(host)) )

107 
	`dbg_msg
("found devi˚: %s\n", 
devi˚
->
descURL
);

108 
loˇl_ù
[21];

109 
æt
;

110 if–(
æt
 = 
	`UPNP_GëVÆidIGD
(
devi˚
, &
pWp
->
uæ
, &pWp->
d©a
, 
loˇl_ù
, (local_ip))) != 1)

112 if(
æt
Ë
	`FªeUPNPUæs
(&
pWp
->
uæ
);

113 
	`‰ìUPNPDevli°
(
pWp
->
devLi°
);

114 
pWp
->
devLi°
 = 
NULL
;

118 
	`dbg_msg
("............loˇl_ù = %s\n", 
loˇl_ù
);

119 
pWp
->
pNext
 = 
devi˚
->pNext;

120 
devi˚
->
pNext
 = 
NULL
;

121 
pWp
->
devi˚
 = device;

126 if(!
pWp
->
devi˚
)

132 
öClõ¡
[16], 
öP‹t
[6], 
ext_ù
[16];

135 if(
	`UPNP_GëExã∫ÆIPAddªss
(
pWp
->
uæ
.
c⁄åﬁURL
,ÖWp->
d©a
.
fú°
.
£rvi˚ty≥
, 
ext_ù
) != 0

136 || (
exã∫Æ_ù
 && (
	`öë_addr
(
ext_ù
) !=Éxternal_ip)) )

138 
	`˛órIgdWp
(&
igd_wp
);

139 
öãrvÆ
 = 5;

142 
exã∫Æ_ù
 = 
	`öë_addr
(
ext_ù
);

145 
i
;

146 
	`PA_MuãxLock
(
h_muãx
);

147 
i
=0; i < 
pWp
->
nIãm
; )

149 
extP‹t
[6] ;

150 c⁄° *
±
;

151 
IGDPORTMAP
 *
pIãm
 = &
igd_wp
.
m≠
[
i
];

153 
	`•rötf
(
extP‹t
, "%u", 
pIãm
->
ext_p‹t
);

154 
±
 = 
pIãm
->
p‹t_ty≥
 =
IGD_PORTTYPE_UDP
 ? 
±_«me
[0] :Öt_name[1];

156 if(
pIãm
->
›
 =
OP_REMOVE
)

158 if–0 =
	`UPNP_GëS≥cificP‹tM≠pögE¡ry
(
pWp
->
uæ
.
c⁄åﬁURL
,

159 
pWp
->
d©a
.
fú°
.
£rvi˚ty≥
, 
extP‹t
,

160 
±
, 
öClõ¡
, 
öP‹t
) )

161 
	`UPNP_DñëeP‹tM≠pög
(
igd_wp
.
uæ
.
c⁄åﬁURL
, igd_wp.
d©a
.
fú°
.
£rvi˚ty≥
,

162 
extP‹t
, 
±
, 
NULL
);

163 
	`mem˝y
(&
igd_wp
.
m≠
[
i
], &igd_wp.m≠[i+1], (
IGDPORTMAP
)*igd_wp.
nIãm
-i-1);

164 
pWp
->
nIãm
--;

168 if(
pIãm
->
›
 =
OP_ADD
)

170 if–0 !
	`UPNP_GëS≥cificP‹tM≠pögE¡ry
(
pWp
->
uæ
.
c⁄åﬁURL
,

171 
pWp
->
d©a
.
fú°
.
£rvi˚ty≥
, 
extP‹t
,

172 
±
, 
öClõ¡
, 
öP‹t
)

173 || ( ( 
	`öë_addr
(
öClõ¡
Ë!
œnù
 || 
	`©oi
(
öP‹t
Ë!
pIãm
->
ext_p‹t
 ) &&

174 
	`UPNP_DñëeP‹tM≠pög
(
pWp
->
uæ
.
c⁄åﬁURL
,ÖWp->
d©a
.
fú°
.
£rvi˚ty≥
,

175 
extP‹t
, 
±
, 
NULL
) == 0) )

177 
sLoˇlP‹t
[8], 
sL™Ip
[16];

179 
	`•rötf
(
sLoˇlP‹t
, "%u", 
pIãm
->
loc_p‹t
);

180 
	`IP2STR
(
œnù
, 
sL™Ip
);

181 
pIãm
->
m≠≥d
 = (
	`UPNP_AddP‹tM≠pög
(
pWp
->
uæ
.
c⁄åﬁURL
,ÖWp->
d©a
.
fú°
.
£rvi˚ty≥
,

182 
extP‹t
, 
sLoˇlP‹t
, 
sL™Ip
, 
pIãm
->
desc
, 
±
, 
NULL
) == 0);

184 
	`dbg_msg
("u≤∞m≠Ö‹à%†⁄ %s,Éxã∫Æáddªss:%s\n", 
extP‹t
, 
pWp
->
uæ
.
c⁄åﬁURL
, 
ext_ù
);

186 
i
++;

188 
	`PA_MuãxU∆ock
(
h_muãx
);

190 
öãrvÆ
 = 1800;

193 
	`QueueSîvi˚Iãm
(
SLOW_QUEUE
, (
SERVICEFUNC
)
U≤pIgdCp
, &
igd_wp
, 
öãrvÆ
*1000, "UpnpIgdCp");

194 
	}
}

196 
	$U≤pIgdCpInôülize
()

198 if(!
bInôed
)

200 
	`PA_MuãxInô
(
h_muãx
);

201 
	`mem£t
(&
igd_wp
, 0, (igd_wp));

202 
bInôed
 = 
TRUE
;

204 
	}
}

205 
	$U≤pIgdCpSt›
()

207 
	`DequeueSîvi˚Iãm
(
SLOW_QUEUE
, (
SERVICEFUNC
)
U≤pIgdCp
, &
igd_wp
, 
TRUE
);

208 
	`˛órIgdWp
(&
igd_wp
);

209 
exã∫Æ_ù
 = 0;

210 
bInôed
 = 
FALSE
;

211 
	}
}

213 
_U≤pIgdCpDñP‹tM≠
(
ext_p‹t
, 
p‹t_ty≥
);

217 
	$U≤pIgdCpAddP‹tM≠
(c⁄° *
desc
, 
loc_p‹t
, 
ext_p‹t
, 
p‹t_ty≥
)

219 
i
;

220 
IGDPORTMAP
 *
pIãm
 = 
NULL
;

222 
	`PA_MuãxLock
(
h_muãx
);

223 
i
=0; i<
igd_wp
.
nIãm
; i++)

225 if(
igd_wp
.
m≠
[
i
].
ext_p‹t
 ==Éxt_port)

227 
	`_U≤pIgdCpDñP‹tM≠
(
ext_p‹t
, 
p‹t_ty≥
);

228 
	`PA_MuãxU∆ock
(
h_muãx
);

233 if(
igd_wp
.
nIãm
 < 
PORTMAP_SIZE
)

235 
pIãm
 = &
igd_wp
.
m≠
[igd_wp.
nIãm
++];

237 
pIãm
->
›
 = 
OP_ADD
;

238 
pIãm
->
loc_p‹t
 =Üoc_port;

239 
pIãm
->
ext_p‹t
 =Éxt_port;

240 
pIãm
->
p‹t_ty≥
 =Öort_type;

241 
pIãm
->
m≠≥d
 = 0;

242 
	`°∫˝yz
(
pIãm
->
desc
, desc, (pItem->desc));

244 
	`DequeueSîvi˚Iãm
(
SLOW_QUEUE
, (
SERVICEFUNC
)
U≤pIgdCp
, 
NULL
, 
TRUE
);

245 
	`QueueSîvi˚Iãm
(
SLOW_QUEUE
, (
SERVICEFUNC
)
U≤pIgdCp
, &
igd_wp
, 2*1000, "");

246 
	`PA_MuãxU∆ock
(
h_muãx
);

252 
	`PA_MuãxU∆ock
(
h_muãx
);

257 
	}
}

258 
	$U≤pIgdCpGëM≠≥dSèã
(
ext_p‹t
, 
p‹t_ty≥
)

260 
i
;

261 
i
=0; i<
igd_wp
.
nIãm
; i++)

263 
IGDPORTMAP
 *
pIãm
 = &
igd_wp
.
m≠
[
i
];

265 if(
pIãm
->
ext_p‹t
 =ext_p‹à&&ÖIãm->
p‹t_ty≥
 ==Öort_type)

266  
pIãm
->
m≠≥d
;

269 
	}
}

270 
	$_U≤pIgdCpDñP‹tM≠
(
ext_p‹t
, 
p‹t_ty≥
)

272 
i
;

274 
i
=0; i<
igd_wp
.
nIãm
; i++)

276 
IGDPORTMAP
 *
pIãm
 = &
igd_wp
.
m≠
[
i
];

277 if(
pIãm
->
ext_p‹t
 =ext_p‹à&&ÖIãm->
p‹t_ty≥
 ==Öort_type)

279 if(
pIãm
->
m≠≥d
)

281 
pIãm
->
›
 = 
OP_REMOVE
;

282 
	`DequeueSîvi˚Iãm
(
SLOW_QUEUE
, (
SERVICEFUNC
)
U≤pIgdCp
, &
igd_wp
, 
TRUE
);

283 
	`QueueSîvi˚Iãm
(
SLOW_QUEUE
, (
SERVICEFUNC
)
U≤pIgdCp
, &
igd_wp
, 2*1000, "");

287 
	`mem˝y
(&
igd_wp
.
m≠
[
i
], &igd_wp.m≠[i+1], (
IGDPORTMAP
)*igd_wp.
nIãm
-i-1);

288 --
igd_wp
.
nIãm
;

293 
	}
}

294 
	$U≤pIgdCpDñP‹tM≠
(
ext_p‹t
, 
p‹t_ty≥
)

296 
	`PA_MuãxLock
(
h_muãx
);

297 
	`_U≤pIgdCpDñP‹tM≠
(
ext_p‹t
, 
p‹t_ty≥
);

298 
	`PA_MuãxU∆ock
(
h_muãx
);

299 
	}
}

	@upnp_igd_cp.h

1 #i‚de‡
__u≤p_igd_˝_h__


2 
	#__u≤p_igd_˝_h__


	)

4 #ifde‡
__˝lu•lus


8 
	~"∂©f‹m_ad±.h
"

10 
U≤pIgdCpInôülize
();

12 
	#IGD_PORTTYPE_UDP
 0

	)

13 
	#IGD_PORTTYPE_TCP
 1

	)

14 
U≤pIgdCpAddP‹tM≠
(c⁄° *
desc
, 
loc_p‹t
, 
ext_p‹t
, 
p‹t_ty≥
);

15 
U≤pIgdCpDñP‹tM≠
(
ext_p‹t
, 
p‹t_ty≥
);

17 
U≤pIgdCpSt›
();

19 
BOOL
 
U≤pIgdCpGëN©M≠≥dAddªss
(
loc_p‹t
, 
uöt32
 *
ext_ù
, 
uöt16
 *
ext_p‹t
);

21 #ifde‡
__˝lu•lus


	@/usr/include/arpa/inet.h

19 #i‚de‡
_ARPA_INET_H


20 
	#_ARPA_INET_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<√töë/ö.h
>

26 #i‚de‡
__sockÀn_t_deföed


27 
__sockÀn_t
 
	tsockÀn_t
;

28 
	#__sockÀn_t_deföed


	)

31 
__BEGIN_DECLS


35 
ö_addr_t
 
	$öë_addr
 (
__c⁄°
 *
__˝
Ë
__THROW
;

38 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

42 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

43 
__THROW
;

46 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

50 
ö_addr_t
 
	$öë_√tw‹k
 (
__c⁄°
 *
__˝
Ë
__THROW
;

54 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

59 
	$öë_±⁄
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

60 *
__ª°ri˘
 
__buf
Ë
__THROW
;

65 
__c⁄°
 *
	$öë_¡›
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

66 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

67 
__THROW
;

71 #ifde‡
__USE_MISC


74 
	$öë_©⁄
 (
__c⁄°
 *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

78 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

83 *
	$öë_√t_¡›
 (
__af
, 
__c⁄°
 *
__˝
, 
__bôs
,

84 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

89 
	$öë_√t_±⁄
 (
__af
, 
__c⁄°
 *
__˝
,

90 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

95 
	$öë_nßp_addr
 (
__c⁄°
 *
__˝
,

96 *
__buf
, 
__Àn
Ë
__THROW
;

100 *
	$öë_nßp_¡ﬂ
 (
__Àn
, 
__c⁄°
 *
__˝
,

101 *
__buf
Ë
__THROW
;

104 
__END_DECLS


	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_XOPEN2K8


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #ifde‡
__USE_XOPEN


38 
	~<sys/°©.h
>

41 #ifdef 
__USE_MISC


42 #i‚de‡
R_OK


45 
	#R_OK
 4

	)

46 
	#W_OK
 2

	)

47 
	#X_OK
 1

	)

48 
	#F_OK
 0

	)

53 #ifde‡
__USE_XOPEN


54 
	#SEEK_SET
 0

	)

55 
	#SEEK_CUR
 1

	)

56 
	#SEEK_END
 2

	)

59 #ifde‡
__USE_ATFILE


60 
	#AT_FDCWD
 -100

	)

63 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

64 
	#AT_REMOVEDIR
 0x200

	)

66 
	#AT_SYMLINK_FOLLOW
 0x400

	)

67 
	#AT_EACCESS
 0x200

	)

76 
f˙é
 (
__fd
, 
__cmd
, ...);

84 #i‚de‡
__USE_FILE_OFFSET64


85 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

87 #ifde‡
__REDIRECT


88 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

89 
	`__n⁄nuŒ
 ((1));

91 
	#›í
 
›í64


	)

94 #ifde‡
__USE_LARGEFILE64


95 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

98 #ifde‡
__USE_ATFILE


108 #i‚de‡
__USE_FILE_OFFSET64


109 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

110 
	`__n⁄nuŒ
 ((2));

112 #ifde‡
__REDIRECT


113 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

114 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

116 
	#›í©
 
›í©64


	)

120 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

121 
	`__n⁄nuŒ
 ((2));

129 #i‚de‡
__USE_FILE_OFFSET64


130 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

132 #ifde‡
__REDIRECT


133 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

134 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

136 
	#¸ót
 
¸ót64


	)

139 #ifde‡
__USE_LARGEFILE64


140 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

143 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

144 && !
deföed
 
__USE_POSIX
))

153 
	#F_ULOCK
 0

	)

154 
	#F_LOCK
 1

	)

155 
	#F_TLOCK
 2

	)

156 
	#F_TEST
 3

	)

158 #i‚de‡
__USE_FILE_OFFSET64


159 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

161 #ifde‡
__REDIRECT


162 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

164 
	#lockf
 
lockf64


	)

167 #ifde‡
__USE_LARGEFILE64


168 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

172 #ifde‡
__USE_XOPEN2K


175 #i‚de‡
__USE_FILE_OFFSET64


176 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

177 
__advi£
Ë
__THROW
;

179 #ifde‡
__REDIRECT_NTH


180 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

181 
__off64_t
 
__Àn
, 
__advi£
),

182 
posix_Ádvi£64
);

184 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

187 #ifde‡
__USE_LARGEFILE64


188 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

189 
__advi£
Ë
__THROW
;

197 #i‚de‡
__USE_FILE_OFFSET64


198 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

200 #ifde‡
__REDIRECT


201 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

202 
__off64_t
 
__Àn
),

203 
posix_ÁŒoˇã64
);

205 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

208 #ifde‡
__USE_LARGEFILE64


209 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

215 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

216 && 
deföed
 
__va_¨g_∑ck_Àn


217 
	~<bôs/f˙é2.h
>

220 
__END_DECLS


	@/usr/include/linux/if.h

19 #i‚de‡
_LINUX_IF_H


20 
	#_LINUX_IF_H


	)

22 
	~<löux/ty≥s.h
>

23 
	~<löux/sockë.h
>

26 
	#IFNAMSIZ
 16

	)

27 
	#IFALIASZ
 256

	)

28 
	~<löux/hdlc/io˘l.h
>

31 
	#IFF_UP
 0x1

	)

32 
	#IFF_BROADCAST
 0x2

	)

33 
	#IFF_DEBUG
 0x4

	)

34 
	#IFF_LOOPBACK
 0x8

	)

35 
	#IFF_POINTOPOINT
 0x10

	)

36 
	#IFF_NOTRAILERS
 0x20

	)

37 
	#IFF_RUNNING
 0x40

	)

38 
	#IFF_NOARP
 0x80

	)

39 
	#IFF_PROMISC
 0x100

	)

40 
	#IFF_ALLMULTI
 0x200

	)

42 
	#IFF_MASTER
 0x400

	)

43 
	#IFF_SLAVE
 0x800

	)

45 
	#IFF_MULTICAST
 0x1000

	)

47 
	#IFF_PORTSEL
 0x2000

	)

48 
	#IFF_AUTOMEDIA
 0x4000

	)

49 
	#IFF_DYNAMIC
 0x8000

	)

51 
	#IFF_LOWER_UP
 0x10000

	)

52 
	#IFF_DORMANT
 0x20000

	)

54 
	#IFF_ECHO
 0x40000

	)

56 
	#IFF_VOLATILE
 (
IFF_LOOPBACK
|
IFF_POINTOPOINT
|
IFF_BROADCAST
|
IFF_ECHO
|\

57 
IFF_MASTER
|
IFF_SLAVE
|
IFF_RUNNING
|
IFF_LOWER_UP
|
IFF_DORMANT
)

	)

60 
	#IFF_802_1Q_VLAN
 0x1

	)

61 
	#IFF_EBRIDGE
 0x2

	)

62 
	#IFF_SLAVE_INACTIVE
 0x4

	)

63 
	#IFF_MASTER_8023AD
 0x8

	)

64 
	#IFF_MASTER_ALB
 0x10

	)

65 
	#IFF_BONDING
 0x20

	)

66 
	#IFF_SLAVE_NEEDARP
 0x40

	)

67 
	#IFF_ISATAP
 0x80

	)

68 
	#IFF_MASTER_ARPMON
 0x100

	)

69 
	#IFF_WAN_HDLC
 0x200

	)

70 
	#IFF_XMIT_DST_RELEASE
 0x400

	)

74 
	#IF_GET_IFACE
 0x0001

	)

75 
	#IF_GET_PROTO
 0x0002

	)

78 
	#IF_IFACE_V35
 0x1000

	)

79 
	#IF_IFACE_V24
 0x1001

	)

80 
	#IF_IFACE_X21
 0x1002

	)

81 
	#IF_IFACE_T1
 0x1003

	)

82 
	#IF_IFACE_E1
 0x1004

	)

83 
	#IF_IFACE_SYNC_SERIAL
 0x1005

	)

84 
	#IF_IFACE_X21D
 0x1006

	)

87 
	#IF_PROTO_HDLC
 0x2000

	)

88 
	#IF_PROTO_PPP
 0x2001

	)

89 
	#IF_PROTO_CISCO
 0x2002

	)

90 
	#IF_PROTO_FR
 0x2003

	)

91 
	#IF_PROTO_FR_ADD_PVC
 0x2004

	)

92 
	#IF_PROTO_FR_DEL_PVC
 0x2005

	)

93 
	#IF_PROTO_X25
 0x2006

	)

94 
	#IF_PROTO_HDLC_ETH
 0x2007

	)

95 
	#IF_PROTO_FR_ADD_ETH_PVC
 0x2008

	)

96 
	#IF_PROTO_FR_DEL_ETH_PVC
 0x2009

	)

97 
	#IF_PROTO_FR_PVC
 0x200A

	)

98 
	#IF_PROTO_FR_ETH_PVC
 0x200B

	)

99 
	#IF_PROTO_RAW
 0x200C

	)

103 
	mIF_OPER_UNKNOWN
,

104 
	mIF_OPER_NOTPRESENT
,

105 
	mIF_OPER_DOWN
,

106 
	mIF_OPER_LOWERLAYERDOWN
,

107 
	mIF_OPER_TESTING
,

108 
	mIF_OPER_DORMANT
,

109 
	mIF_OPER_UP
,

114 
	mIF_LINK_MODE_DEFAULT
,

115 
	mIF_LINK_MODE_DORMANT
,

128 
	sifm≠


130 
	mmem_°¨t
;

131 
	mmem_íd
;

132 
	mba£_addr
;

133 
	múq
;

134 
	mdma
;

135 
	mp‹t
;

139 
	sif_£âögs


141 
	mty≥
;

142 
	msize
;

145 
øw_hdlc_¥Ÿo
 *
	møw_hdlc
;

146 
cisco_¥Ÿo
 *
	mcisco
;

147 
‰_¥Ÿo
 *
	m‰
;

148 
‰_¥Ÿo_pvc
 *
	m‰_pvc
;

149 
‰_¥Ÿo_pvc_öfo
 *
	m‰_pvc_öfo
;

152 
sync_£rül_£âögs
 *
	msync
;

153 
ã1_£âögs
 *
	mã1
;

154 } 
	mifs_ifsu
;

164 
	si‰eq


166 
	#IFHWADDRLEN
 6

	)

169 
	mi‰n_«me
[
IFNAMSIZ
];

170 } 
	mi‰_i‰n
;

173 
sockaddr
 
	mi‰u_addr
;

174 
sockaddr
 
	mi‰u_d°addr
;

175 
sockaddr
 
	mi‰u_brﬂdaddr
;

176 
sockaddr
 
	mi‰u_√tmask
;

177 
sockaddr
 
	mi‰u_hwaddr
;

178 
	mi‰u_Êags
;

179 
	mi‰u_ivÆue
;

180 
	mi‰u_mtu
;

181 
ifm≠
 
	mi‰u_m≠
;

182 
	mi‰u_¶ave
[
IFNAMSIZ
];

183 
	mi‰u_√w«me
[
IFNAMSIZ
];

184 * 
	mi‰u_d©a
;

185 
if_£âögs
 
	mi‰u_£âögs
;

186 } 
	mi‰_i‰u
;

189 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

190 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

191 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

192 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

193 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

194 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

195 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

196 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

197 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

198 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

199 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

200 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

201 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

202 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

203 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

204 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

205 
	#i‰_£âögs
 
i‰_i‰u
.
i‰u_£âögs


	)

214 
	sifc⁄f


216 
	mifc_Àn
;

219 *
	mifcu_buf
;

220 
i‰eq
 *
	mifcu_ªq
;

221 } 
	mifc_ifcu
;

223 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

224 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

	@/usr/include/net/if.h

20 #i‚de‡
_NET_IF_H


21 
	#_NET_IF_H
 1

	)

23 
	~<„©uªs.h
>

25 #ifde‡
__USE_MISC


26 
	~<sys/ty≥s.h
>

27 
	~<sys/sockë.h
>

32 
	#IF_NAMESIZE
 16

	)

34 
	sif_«meödex


36 
	mif_ödex
;

37 *
	mif_«me
;

41 #ifde‡
__USE_MISC


45 
	mIFF_UP
 = 0x1,

46 
	#IFF_UP
 
IFF_UP


	)

47 
	mIFF_BROADCAST
 = 0x2,

48 
	#IFF_BROADCAST
 
IFF_BROADCAST


	)

49 
	mIFF_DEBUG
 = 0x4,

50 
	#IFF_DEBUG
 
IFF_DEBUG


	)

51 
	mIFF_LOOPBACK
 = 0x8,

52 
	#IFF_LOOPBACK
 
IFF_LOOPBACK


	)

53 
	mIFF_POINTOPOINT
 = 0x10,

54 
	#IFF_POINTOPOINT
 
IFF_POINTOPOINT


	)

55 
	mIFF_NOTRAILERS
 = 0x20,

56 
	#IFF_NOTRAILERS
 
IFF_NOTRAILERS


	)

57 
	mIFF_RUNNING
 = 0x40,

58 
	#IFF_RUNNING
 
IFF_RUNNING


	)

59 
	mIFF_NOARP
 = 0x80,

60 
	#IFF_NOARP
 
IFF_NOARP


	)

61 
	mIFF_PROMISC
 = 0x100,

62 
	#IFF_PROMISC
 
IFF_PROMISC


	)

65 
	mIFF_ALLMULTI
 = 0x200,

66 
	#IFF_ALLMULTI
 
IFF_ALLMULTI


	)

68 
	mIFF_MASTER
 = 0x400,

69 
	#IFF_MASTER
 
IFF_MASTER


	)

70 
	mIFF_SLAVE
 = 0x800,

71 
	#IFF_SLAVE
 
IFF_SLAVE


	)

73 
	mIFF_MULTICAST
 = 0x1000,

74 
	#IFF_MULTICAST
 
IFF_MULTICAST


	)

76 
	mIFF_PORTSEL
 = 0x2000,

77 
	#IFF_PORTSEL
 
IFF_PORTSEL


	)

78 
	mIFF_AUTOMEDIA
 = 0x4000,

79 
	#IFF_AUTOMEDIA
 
IFF_AUTOMEDIA


	)

80 
	mIFF_DYNAMIC
 = 0x8000

81 
	#IFF_DYNAMIC
 
IFF_DYNAMIC


	)

89 
	siÁddr


91 
sockaddr
 
	miÁ_addr
;

94 
sockaddr
 
	mifu_brﬂdaddr
;

95 
sockaddr
 
	mifu_d°addr
;

96 } 
	miÁ_ifu
;

97 
iÁ˚
 *
	miÁ_iÂ
;

98 
iÁddr
 *
	miÁ_√xt
;

101 
	#iÁ_brﬂdaddr
 
iÁ_ifu
.
ifu_brﬂdaddr


	)

102 
	#iÁ_d°addr
 
iÁ_ifu
.
ifu_d°addr


	)

112 
	sifm≠


114 
	mmem_°¨t
;

115 
	mmem_íd
;

116 
	mba£_addr
;

117 
	múq
;

118 
	mdma
;

119 
	mp‹t
;

127 
	si‰eq


129 
	#IFHWADDRLEN
 6

	)

130 
	#IFNAMSIZ
 
IF_NAMESIZE


	)

133 
	mi‰n_«me
[
IFNAMSIZ
];

134 } 
	mi‰_i‰n
;

138 
sockaddr
 
	mi‰u_addr
;

139 
sockaddr
 
	mi‰u_d°addr
;

140 
sockaddr
 
	mi‰u_brﬂdaddr
;

141 
sockaddr
 
	mi‰u_√tmask
;

142 
sockaddr
 
	mi‰u_hwaddr
;

143 
	mi‰u_Êags
;

144 
	mi‰u_ivÆue
;

145 
	mi‰u_mtu
;

146 
ifm≠
 
	mi‰u_m≠
;

147 
	mi‰u_¶ave
[
IFNAMSIZ
];

148 
	mi‰u_√w«me
[
IFNAMSIZ
];

149 
__ˇddr_t
 
	mi‰u_d©a
;

150 } 
	mi‰_i‰u
;

152 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

153 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

154 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

155 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

156 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

157 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

158 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

159 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

160 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

161 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

162 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

163 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

164 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

165 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

166 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

167 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

168 
	#_IOT_i‰eq
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),16,0,0)

	)

169 
	#_IOT_i‰eq_sh‹t
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

170 
	#_IOT_i‰eq_öt
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

177 
	sifc⁄f


179 
	mifc_Àn
;

182 
__ˇddr_t
 
	mifcu_buf
;

183 
i‰eq
 *
	mifcu_ªq
;

184 } 
	mifc_ifcu
;

186 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

187 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

188 
	#_IOT_ifc⁄f
 
	`_IOT
(
	`_IOTS
(
ifc⁄f
),1,0,0,0,0Ë

	)

191 
__BEGIN_DECLS


194 
	$if_«mëoödex
 (
__c⁄°
 *
__i‚ame
Ë
__THROW
;

195 *
	$if_ödext⁄ame
 (
__ifödex
, *
__i‚ame
Ë
__THROW
;

198 
if_«meödex
 *
	$if_«meödex
 (Ë
__THROW
;

201 
	$if_‰ì«meödex
 (
if_«meödex
 *
__±r
Ë
__THROW
;

203 
__END_DECLS


	@/usr/include/netdb.h

23 #i‚def 
_NETDB_H


24 
	#_NETDB_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<√töë/ö.h
>

29 
	~<°döt.h
>

30 #ifde‡
__USE_MISC


33 
	~<Ωc/√tdb.h
>

36 #ifde‡
__USE_GNU


37 
	#__√ed_sigevít_t


	)

38 
	~<bôs/sigöfo.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

43 
	~<bôs/√tdb.h
>

46 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

47 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

48 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

49 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

50 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

51 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

54 
	g__BEGIN_DECLS


58 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

61 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

65 
	#HOST_NOT_FOUND
 1

	)

66 
	#TRY_AGAIN
 2

	)

68 
	#NO_RECOVERY
 3

	)

70 
	#NO_DATA
 4

	)

72 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


73 
	#NETDB_INTERNAL
 -1

	)

74 
	#NETDB_SUCCESS
 0

	)

75 
	#NO_ADDRESS
 
NO_DATA


	)

78 #ifde‡
__USE_XOPEN2K


80 
	#IPPORT_RESERVED
 1024

	)

83 #ifde‡
__USE_GNU


85 
	#SCOPE_DELIMITER
 '%'

	)

88 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


91 
	$hîr‹
 (
__c⁄°
 *
__°r
Ë
__THROW
;

94 
__c⁄°
 *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

99 
	sho°ít


101 *
h_«me
;

102 **
h_Æü£s
;

103 
h_addπy≥
;

104 
h_Àngth
;

105 **
h_addr_li°
;

106 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


107 
	#h_addr
 
h_addr_li°
[0]

	)

116 
	`£tho°ít
 (
__°ay_›í
);

122 
	`ídho°ít
 ();

129 
ho°ít
 *
	`gëho°ít
 ();

136 
ho°ít
 *
	`gëho°byaddr
 (
__c⁄°
 *
__addr
, 
__sockÀn_t
 
__Àn
,

137 
__ty≥
);

143 
ho°ít
 *
	`gëho°by«me
 (
__c⁄°
 *
__«me
);

145 #ifde‡
__USE_MISC


154 
ho°ít
 *
	`gëho°by«me2
 (
__c⁄°
 *
__«me
, 
__af
);

166 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

167 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

168 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

169 *
__ª°ri˘
 
__h_î∫›
);

171 
	`gëho°byaddr_r
 (
__c⁄°
 *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

172 
__ty≥
,

173 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

175 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

176 *
__ª°ri˘
 
__h_î∫›
);

178 
	`gëho°by«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

179 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

180 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

181 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

182 *
__ª°ri˘
 
__h_î∫›
);

184 
	`gëho°by«me2_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, 
__af
,

185 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

186 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

187 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

188 *
__ª°ri˘
 
__h_î∫›
);

197 
	`£äëít
 (
__°ay_›í
);

203 
	`íd√ã¡
 ();

210 
√ã¡
 *
	`gë√ã¡
 ();

217 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

223 
√ã¡
 *
	`gë√tby«me
 (
__c⁄°
 *
__«me
);

225 #ifdef 
__USE_MISC


236 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

237 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

238 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

239 *
__ª°ri˘
 
__h_î∫›
);

241 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

242 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

243 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

244 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

245 *
__ª°ri˘
 
__h_î∫›
);

247 
	`gë√tby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

248 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

249 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

250 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

251 *
__ª°ri˘
 
__h_î∫›
);

256 
	s£rvít


258 *
s_«me
;

259 **
s_Æü£s
;

260 
s_p‹t
;

261 *
s_¥Ÿo
;

269 
	`£t£rvít
 (
__°ay_›í
);

275 
	`íd£rvít
 ();

282 
£rvít
 *
	`gë£rvít
 ();

289 
£rvít
 *
	`gë£rvby«me
 (
__c⁄°
 *
__«me
,

290 
__c⁄°
 *
__¥Ÿo
);

297 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, 
__c⁄°
 *
__¥Ÿo
);

300 #ifdef 
__USE_MISC


308 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

309 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

310 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

312 
	`gë£rvby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

313 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

314 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

315 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

316 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

318 
	`gë£rvbyp‹t_r
 (
__p‹t
, 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

319 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

320 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

321 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

326 
	s¥Ÿ€¡


328 *
p_«me
;

329 **
p_Æü£s
;

330 
p_¥Ÿo
;

338 
	`£çrŸ€¡
 (
__°ay_›í
);

344 
	`íd¥Ÿ€¡
 ();

351 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

357 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (
__c⁄°
 *
__«me
);

363 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

366 #ifdef 
__USE_MISC


374 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

375 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

376 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

378 
	`gë¥Ÿoby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

379 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

380 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

381 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

383 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

384 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

385 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

386 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

395 
	`£äëgª¡
 (
__c⁄°
 *
__√tgroup
);

403 
	`íd√tgª¡
 ();

412 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

413 **
__ª°ri˘
 
__u£Ω
,

414 **
__ª°ri˘
 
__domaöp
);

423 
	`ö√tgr
 (
__c⁄°
 *
__√tgroup
, __c⁄° *
__ho°
,

424 
__c⁄°
 *
__u£r
, __c⁄° *
__domaö
);

432 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

433 **
__ª°ri˘
 
__u£Ω
,

434 **
__ª°ri˘
 
__domaöp
,

435 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

439 #ifde‡
__USE_BSD


451 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

452 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

453 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

454 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

463 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

464 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

465 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

466 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

467 
ß_Ámûy_t
 
__af
);

479 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

480 
__c⁄°
 *
__ª°ri˘
 
__«me
,

481 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

482 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

491 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

492 
__c⁄°
 *
__ª°ri˘
 
__«me
,

493 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

494 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

495 
ß_Ámûy_t
 
__af
);

505 
	`ru£rok
 (
__c⁄°
 *
__rho°
, 
__su£r
,

506 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

515 
	`ru£rok_af
 (
__c⁄°
 *
__rho°
, 
__su£r
,

516 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

517 
ß_Ámûy_t
 
__af
);

527 
	`ºesvp‹t
 (*
__Æp‹t
);

536 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

541 #ifdef 
__USE_POSIX


543 
	saddröfo


545 
ai_Êags
;

546 
ai_Ámûy
;

547 
ai_sockty≥
;

548 
ai_¥Ÿocﬁ
;

549 
sockÀn_t
 
ai_addæí
;

550 
sockaddr
 *
ai_addr
;

551 *
ai_ˇn⁄«me
;

552 
addröfo
 *
ai_√xt
;

555 #ifde‡
__USE_GNU


557 
	sgaicb


559 c⁄° *
¨_«me
;

560 c⁄° *
¨_£rvi˚
;

561 c⁄° 
addröfo
 *
¨_ªque°
;

562 
addröfo
 *
¨_ªsu…
;

564 
__ªtu∫
;

565 
__unu£d
[5];

569 
	#GAI_WAIT
 0

	)

570 
	#GAI_NOWAIT
 1

	)

574 
	#AI_PASSIVE
 0x0001

	)

575 
	#AI_CANONNAME
 0x0002

	)

576 
	#AI_NUMERICHOST
 0x0004

	)

577 
	#AI_V4MAPPED
 0x0008

	)

578 
	#AI_ALL
 0x0010

	)

579 
	#AI_ADDRCONFIG
 0x0020

	)

581 #ifde‡
__USE_GNU


582 
	#AI_IDN
 0x0040

	)

585 
	#AI_CANONIDN
 0x0080

	)

586 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

588 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

591 
	#AI_NUMERICSERV
 0x0400

	)

594 
	#EAI_BADFLAGS
 -1

	)

595 
	#EAI_NONAME
 -2

	)

596 
	#EAI_AGAIN
 -3

	)

597 
	#EAI_FAIL
 -4

	)

598 
	#EAI_FAMILY
 -6

	)

599 
	#EAI_SOCKTYPE
 -7

	)

600 
	#EAI_SERVICE
 -8

	)

601 
	#EAI_MEMORY
 -10

	)

602 
	#EAI_SYSTEM
 -11

	)

603 
	#EAI_OVERFLOW
 -12

	)

604 #ifde‡
__USE_GNU


605 
	#EAI_NODATA
 -5

	)

606 
	#EAI_ADDRFAMILY
 -9

	)

607 
	#EAI_INPROGRESS
 -100

	)

608 
	#EAI_CANCELED
 -101

	)

609 
	#EAI_NOTCANCELED
 -102

	)

610 
	#EAI_ALLDONE
 -103

	)

611 
	#EAI_INTR
 -104

	)

612 
	#EAI_IDN_ENCODE
 -105

	)

615 #ifde‡
__USE_MISC


616 
	#NI_MAXHOST
 1025

	)

617 
	#NI_MAXSERV
 32

	)

620 
	#NI_NUMERICHOST
 1

	)

621 
	#NI_NUMERICSERV
 2

	)

622 
	#NI_NOFQDN
 4

	)

623 
	#NI_NAMEREQD
 8

	)

624 
	#NI_DGRAM
 16

	)

625 #ifde‡
__USE_GNU


626 
	#NI_IDN
 32

	)

627 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

629 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

638 
	`gëaddröfo
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

639 
__c⁄°
 *
__ª°ri˘
 
__£rvi˚
,

640 
__c⁄°
 
addröfo
 *
__ª°ri˘
 
__ªq
,

641 
addröfo
 **
__ª°ri˘
 
__∑i
);

644 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

647 
__c⁄°
 *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

653 
	`gë«meöfo
 (
__c⁄°
 
sockaddr
 *
__ª°ri˘
 
__ß
,

654 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

655 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

656 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

659 #ifde‡
__USE_GNU


668 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

669 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

679 
	`gai_su•íd
 (
__c⁄°
 
gaicb
 *__c⁄° 
__li°
[], 
__ít
,

680 
__c⁄°
 
time•ec
 *
__timeout
);

683 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

686 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

689 
__END_DECLS


	@/usr/include/netinet/in.h

20 #i‚def 
_NETINET_IN_H


21 
	#_NETINET_IN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<°döt.h
>

25 
	~<sys/sockë.h
>

26 
	~<bôs/ty≥s.h
>

29 
__BEGIN_DECLS


34 
	mIPPROTO_IP
 = 0,

35 
	#IPPROTO_IP
 
IPPROTO_IP


	)

36 
	mIPPROTO_HOPOPTS
 = 0,

37 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

38 
	mIPPROTO_ICMP
 = 1,

39 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

40 
	mIPPROTO_IGMP
 = 2,

41 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

42 
	mIPPROTO_IPIP
 = 4,

43 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

44 
	mIPPROTO_TCP
 = 6,

45 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

46 
	mIPPROTO_EGP
 = 8,

47 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

48 
	mIPPROTO_PUP
 = 12,

49 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

50 
	mIPPROTO_UDP
 = 17,

51 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

52 
	mIPPROTO_IDP
 = 22,

53 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

54 
	mIPPROTO_TP
 = 29,

55 
	#IPPROTO_TP
 
IPPROTO_TP


	)

56 
	mIPPROTO_DCCP
 = 33,

57 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

58 
	mIPPROTO_IPV6
 = 41,

59 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

60 
	mIPPROTO_ROUTING
 = 43,

61 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

62 
	mIPPROTO_FRAGMENT
 = 44,

63 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

64 
	mIPPROTO_RSVP
 = 46,

65 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

66 
	mIPPROTO_GRE
 = 47,

67 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

68 
	mIPPROTO_ESP
 = 50,

69 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

70 
	mIPPROTO_AH
 = 51,

71 
	#IPPROTO_AH
 
IPPROTO_AH


	)

72 
	mIPPROTO_ICMPV6
 = 58,

73 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

74 
	mIPPROTO_NONE
 = 59,

75 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

76 
	mIPPROTO_DSTOPTS
 = 60,

77 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

78 
	mIPPROTO_MTP
 = 92,

79 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

80 
	mIPPROTO_ENCAP
 = 98,

81 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

82 
	mIPPROTO_PIM
 = 103,

83 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

84 
	mIPPROTO_COMP
 = 108,

85 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

86 
	mIPPROTO_SCTP
 = 132,

87 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

88 
	mIPPROTO_UDPLITE
 = 136,

89 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


97 
uöt16_t
 
	tö_p‹t_t
;

102 
	mIPPORT_ECHO
 = 7,

103 
	mIPPORT_DISCARD
 = 9,

104 
	mIPPORT_SYSTAT
 = 11,

105 
	mIPPORT_DAYTIME
 = 13,

106 
	mIPPORT_NETSTAT
 = 15,

107 
	mIPPORT_FTP
 = 21,

108 
	mIPPORT_TELNET
 = 23,

109 
	mIPPORT_SMTP
 = 25,

110 
	mIPPORT_TIMESERVER
 = 37,

111 
	mIPPORT_NAMESERVER
 = 42,

112 
	mIPPORT_WHOIS
 = 43,

113 
	mIPPORT_MTP
 = 57,

115 
	mIPPORT_TFTP
 = 69,

116 
	mIPPORT_RJE
 = 77,

117 
	mIPPORT_FINGER
 = 79,

118 
	mIPPORT_TTYLINK
 = 87,

119 
	mIPPORT_SUPDUP
 = 95,

122 
	mIPPORT_EXECSERVER
 = 512,

123 
	mIPPORT_LOGINSERVER
 = 513,

124 
	mIPPORT_CMDSERVER
 = 514,

125 
	mIPPORT_EFSSERVER
 = 520,

128 
	mIPPORT_BIFFUDP
 = 512,

129 
	mIPPORT_WHOSERVER
 = 513,

130 
	mIPPORT_ROUTESERVER
 = 520,

133 
	mIPPORT_RESERVED
 = 1024,

136 
	mIPPORT_USERRESERVED
 = 5000

141 
uöt32_t
 
	tö_addr_t
;

142 
	sö_addr


144 
ö_addr_t
 
	ms_addr
;

153 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

154 
	#IN_CLASSA_NET
 0xff000000

	)

155 
	#IN_CLASSA_NSHIFT
 24

	)

156 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

157 
	#IN_CLASSA_MAX
 128

	)

159 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

160 
	#IN_CLASSB_NET
 0xffff0000

	)

161 
	#IN_CLASSB_NSHIFT
 16

	)

162 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

163 
	#IN_CLASSB_MAX
 65536

	)

165 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

166 
	#IN_CLASSC_NET
 0xffffff00

	)

167 
	#IN_CLASSC_NSHIFT
 8

	)

168 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

170 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

171 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

173 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

174 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

177 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

179 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

181 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

184 
	#IN_LOOPBACKNET
 127

	)

186 #i‚de‡
INADDR_LOOPBACK


187 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

191 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

192 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

193 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

194 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

198 
	sö6_addr


202 
uöt8_t
 
	m__u6_addr8
[16];

203 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


204 
uöt16_t
 
	m__u6_addr16
[8];

205 
uöt32_t
 
	m__u6_addr32
[4];

207 } 
	m__ö6_u
;

208 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

209 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


210 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

211 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

215 c⁄° 
ö6_addr
 
ö6addr_™y
;

216 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

217 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

218 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

220 
	#INET_ADDRSTRLEN
 16

	)

221 
	#INET6_ADDRSTRLEN
 46

	)

225 
	ssockaddr_ö


227 
__SOCKADDR_COMMON
 (
sö_
);

228 
ö_p‹t_t
 
	msö_p‹t
;

229 
ö_addr
 
	msö_addr
;

232 
	msö_zîo
[ (
sockaddr
) -

233 
__SOCKADDR_COMMON_SIZE
 -

234  (
ö_p‹t_t
) -

235  (
ö_addr
)];

239 
	ssockaddr_ö6


241 
__SOCKADDR_COMMON
 (
sö6_
);

242 
ö_p‹t_t
 
	msö6_p‹t
;

243 
uöt32_t
 
	msö6_Êowöfo
;

244 
ö6_addr
 
	msö6_addr
;

245 
uöt32_t
 
	msö6_sc›e_id
;

249 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


251 
	sù_mªq


254 
ö_addr
 
	mimr_mu…üddr
;

257 
ö_addr
 
	mimr_öãrÁ˚
;

260 
	sù_mªq_sour˚


263 
ö_addr
 
	mimr_mu…üddr
;

266 
ö_addr
 
	mimr_öãrÁ˚
;

269 
ö_addr
 
	mimr_sour˚addr
;

275 
	sùv6_mªq


278 
ö6_addr
 
	mùv6mr_mu…üddr
;

281 
	mùv6mr_öãrÁ˚
;

285 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


287 
	sgroup_ªq


290 
uöt32_t
 
	mgr_öãrÁ˚
;

293 
sockaddr_°‹age
 
	mgr_group
;

296 
	sgroup_sour˚_ªq


299 
uöt32_t
 
	mg§_öãrÁ˚
;

302 
sockaddr_°‹age
 
	mg§_group
;

305 
sockaddr_°‹age
 
	mg§_sour˚
;

310 
	sù_msfûãr


313 
ö_addr
 
	mimsf_mu…üddr
;

316 
ö_addr
 
	mimsf_öãrÁ˚
;

319 
uöt32_t
 
	mimsf_fmode
;

322 
uöt32_t
 
	mimsf_num§c
;

324 
ö_addr
 
	mimsf_¶i°
[1];

327 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

328 -  (
ö_addr
) \

329 + (
num§c
Ë*  (
ö_addr
))

	)

331 
	sgroup_fûãr


334 
uöt32_t
 
	mgf_öãrÁ˚
;

337 
sockaddr_°‹age
 
	mgf_group
;

340 
uöt32_t
 
	mgf_fmode
;

343 
uöt32_t
 
	mgf_num§c
;

345 
sockaddr_°‹age
 
	mgf_¶i°
[1];

348 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

349 -  (
sockaddr_°‹age
) \

350 + ((
num§c
) \

351 *  (
sockaddr_°‹age
)))

	)

356 
	~<bôs/ö.h
>

365 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

366 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

367 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

368 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

369 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

370 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

371 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

373 
	~<ídün.h
>

376 
	~<bôs/byãsw≠.h
>

378 #ifde‡
__OPTIMIZE__


382 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


385 
	#¡ohl
(
x
Ë(x)

	)

386 
	#¡ohs
(
x
Ë(x)

	)

387 
	#ht⁄l
(
x
Ë(x)

	)

388 
	#ht⁄s
(
x
Ë(x)

	)

390 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


391 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

392 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

393 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

394 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

399 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

400 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

401 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

402 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

403 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =0)

	)

405 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

406 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

407 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

408 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

409 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

411 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((
__c⁄°
 
uöt8_t
 *Ë◊))[0] =0xff)

	)

413 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

414 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

415 =
	`ht⁄l
 (0x„800000))

	)

417 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

418 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

419 =
	`ht⁄l
 (0x„c00000))

	)

421 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

422 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

423 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

424 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

426 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

427 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

428 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

429 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0) \

430 && (
	`¡ohl
 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

432 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

433 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] =((__c⁄° uöt32_à*Ë(
b
))[0]) \

434 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] =((__c⁄° uöt32_à*Ë(
b
))[1]) \

435 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =((__c⁄° uöt32_à*Ë(
b
))[2]) \

436 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =((__c⁄° uöt32_à*Ë(
b
))[3]))

	)

438 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


440 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

443 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

444 
__THROW
;

448 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

449 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

450 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

452 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

453 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

454 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

456 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

457 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

458 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

460 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

461 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

462 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

464 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

465 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

466 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

469 #ifde‡
__USE_GNU


471 
	sö6_pktöfo


473 
ö6_addr
 
ùi6_addr
;

474 
ùi6_ifödex
;

478 
	sù6_mtuöfo


480 
sockaddr_ö6
 
ù6m_addr
;

481 
uöt32_t
 
ù6m_mtu
;

486 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

487 
__THROW
 
__©åibuã_dïªˇãd__
;

488 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

489 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

490 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

491 
__c⁄°
 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

492 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

493 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

494 
__mu…x
, 
__∂usy
)

495 
__THROW
 
__©åibuã_dïªˇãd__
;

496 
	$öë6_›ti⁄_√xt
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

497 
uöt8_t
 **
__çåp
)

498 
__THROW
 
__©åibuã_dïªˇãd__
;

499 
	$öë6_›ti⁄_föd
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

500 
uöt8_t
 **
__çåp
, 
__ty≥
)

501 
__THROW
 
__©åibuã_dïªˇãd__
;

505 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

506 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

507 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

508 **
__d©abuÂ
Ë
__THROW
;

509 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

510 
__THROW
;

511 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

512 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

513 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

514 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

515 **
__d©abuÂ
Ë
__THROW
;

516 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

517 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

518 **
__d©abuÂ
Ë
__THROW
;

519 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

520 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

524 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

525 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

526 
__£gmíts
Ë
__THROW
;

527 
	$öë6_πh_add
 (*
__bp
, 
__c⁄°
 
ö6_addr
 *
__addr
Ë
__THROW
;

528 
	$öë6_πh_ªvî£
 (
__c⁄°
 *
__ö
, *
__out
Ë
__THROW
;

529 
	$öë6_πh_£gmíts
 (
__c⁄°
 *
__bp
Ë
__THROW
;

530 
ö6_addr
 *
	$öë6_πh_gëaddr
 (
__c⁄°
 *
__bp
, 
__ödex
)

531 
__THROW
;

537 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

538 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

539 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

540 
__THROW
;

543 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

544 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

545 
uöt32_t
 
__num§c
,

546 
__c⁄°
 
ö_addr
 *
__¶i°
)

547 
__THROW
;

551 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

552 
__c⁄°
 
sockaddr
 *
__group
,

553 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

554 
uöt32_t
 *
__num§c
,

555 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

558 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

559 
__c⁄°
 
sockaddr
 *
__group
,

560 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

561 
uöt32_t
 
__num§c
,

562 
__c⁄°
 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

565 
__END_DECLS


	@/usr/include/netinet/tcp.h

32 #i‚de‡
_NETINET_TCP_H


33 
	#_NETINET_TCP_H
 1

	)

35 
	~<„©uªs.h
>

40 
	#TCP_NODELAY
 1

	)

41 
	#TCP_MAXSEG
 2

	)

42 
	#TCP_CORK
 3

	)

43 
	#TCP_KEEPIDLE
 4

	)

44 
	#TCP_KEEPINTVL
 5

	)

45 
	#TCP_KEEPCNT
 6

	)

46 
	#TCP_SYNCNT
 7

	)

47 
	#TCP_LINGER2
 8

	)

48 
	#TCP_DEFER_ACCEPT
 9

	)

49 
	#TCP_WINDOW_CLAMP
 10

	)

50 
	#TCP_INFO
 11

	)

51 
	#TCP_QUICKACK
 12

	)

52 
	#TCP_CONGESTION
 13

	)

53 
	#TCP_MD5SIG
 14

	)

55 #ifde‡
__USE_MISC


56 
	~<sys/ty≥s.h
>

57 
	~<sys/sockë.h
>

59 #ifde‡
__FAVOR_BSD


60 
u_öt32_t
 
	tt˝_£q
;

65 
	st˝hdr


67 
u_öt16_t
 
	mth_•‹t
;

68 
u_öt16_t
 
	mth_dp‹t
;

69 
t˝_£q
 
	mth_£q
;

70 
t˝_£q
 
	mth_ack
;

71 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
u_öt8_t
 
	mth_x2
:4;

73 
u_öt8_t
 
	mth_off
:4;

75 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


76 
u_öt8_t
 
	mth_off
:4;

77 
u_öt8_t
 
	mth_x2
:4;

79 
u_öt8_t
 
	mth_Êags
;

80 
	#TH_FIN
 0x01

	)

81 
	#TH_SYN
 0x02

	)

82 
	#TH_RST
 0x04

	)

83 
	#TH_PUSH
 0x08

	)

84 
	#TH_ACK
 0x10

	)

85 
	#TH_URG
 0x20

	)

86 
u_öt16_t
 
	mth_wö
;

87 
u_öt16_t
 
	mth_sum
;

88 
u_öt16_t
 
	mth_uΩ
;

92 
	st˝hdr


94 
u_öt16_t
 
	msour˚
;

95 
u_öt16_t
 
	mde°
;

96 
u_öt32_t
 
	m£q
;

97 
u_öt32_t
 
	mack_£q
;

98 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


99 
u_öt16_t
 
	mªs1
:4;

100 
u_öt16_t
 
	mdoff
:4;

101 
u_öt16_t
 
	mfö
:1;

102 
u_öt16_t
 
	msyn
:1;

103 
u_öt16_t
 
	mr°
:1;

104 
u_öt16_t
 
	mpsh
:1;

105 
u_öt16_t
 
	mack
:1;

106 
u_öt16_t
 
	murg
:1;

107 
u_öt16_t
 
	mªs2
:2;

108 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


109 
u_öt16_t
 
	mdoff
:4;

110 
u_öt16_t
 
	mªs1
:4;

111 
u_öt16_t
 
	mªs2
:2;

112 
u_öt16_t
 
	murg
:1;

113 
u_öt16_t
 
	mack
:1;

114 
u_öt16_t
 
	mpsh
:1;

115 
u_öt16_t
 
	mr°
:1;

116 
u_öt16_t
 
	msyn
:1;

117 
u_öt16_t
 
	mfö
:1;

121 
u_öt16_t
 
	mwödow
;

122 
u_öt16_t
 
	mcheck
;

123 
u_öt16_t
 
	murg_±r
;

129 
	mTCP_ESTABLISHED
 = 1,

130 
	mTCP_SYN_SENT
,

131 
	mTCP_SYN_RECV
,

132 
	mTCP_FIN_WAIT1
,

133 
	mTCP_FIN_WAIT2
,

134 
	mTCP_TIME_WAIT
,

135 
	mTCP_CLOSE
,

136 
	mTCP_CLOSE_WAIT
,

137 
	mTCP_LAST_ACK
,

138 
	mTCP_LISTEN
,

139 
	mTCP_CLOSING


142 
	#TCPOPT_EOL
 0

	)

143 
	#TCPOPT_NOP
 1

	)

144 
	#TCPOPT_MAXSEG
 2

	)

145 
	#TCPOLEN_MAXSEG
 4

	)

146 
	#TCPOPT_WINDOW
 3

	)

147 
	#TCPOLEN_WINDOW
 3

	)

148 
	#TCPOPT_SACK_PERMITTED
 4

	)

149 
	#TCPOLEN_SACK_PERMITTED
 2

	)

150 
	#TCPOPT_SACK
 5

	)

151 
	#TCPOPT_TIMESTAMP
 8

	)

152 
	#TCPOLEN_TIMESTAMP
 10

	)

153 
	#TCPOLEN_TSTAMP_APPA
 (
TCPOLEN_TIMESTAMP
+2Ë

	)

155 
	#TCPOPT_TSTAMP_HDR
 \

156 (
TCPOPT_NOP
<<24|TCPOPT_NOP<<16|
TCPOPT_TIMESTAMP
<<8|
TCPOLEN_TIMESTAMP
)

	)

164 
	#TCP_MSS
 512

	)

166 
	#TCP_MAXWIN
 65535

	)

168 
	#TCP_MAX_WINSHIFT
 14

	)

170 
	#SOL_TCP
 6

	)

173 
	#TCPI_OPT_TIMESTAMPS
 1

	)

174 
	#TCPI_OPT_SACK
 2

	)

175 
	#TCPI_OPT_WSCALE
 4

	)

176 
	#TCPI_OPT_ECN
 8

	)

179 
	et˝_ˇ_°©e


181 
	mTCP_CA_O≥n
 = 0,

182 
	mTCP_CA_Dis‹dî
 = 1,

183 
	mTCP_CA_CWR
 = 2,

184 
	mTCP_CA_Recovîy
 = 3,

185 
	mTCP_CA_Loss
 = 4

188 
	st˝_öfo


190 
u_öt8_t
 
	mt˝i_°©e
;

191 
u_öt8_t
 
	mt˝i_ˇ_°©e
;

192 
u_öt8_t
 
	mt˝i_ªå™smôs
;

193 
u_öt8_t
 
	mt˝i_¥obes
;

194 
u_öt8_t
 
	mt˝i_backoff
;

195 
u_öt8_t
 
	mt˝i_›ti⁄s
;

196 
u_öt8_t
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

198 
u_öt32_t
 
	mt˝i_πo
;

199 
u_öt32_t
 
	mt˝i_©o
;

200 
u_öt32_t
 
	mt˝i_¢d_mss
;

201 
u_öt32_t
 
	mt˝i_rcv_mss
;

203 
u_öt32_t
 
	mt˝i_u«cked
;

204 
u_öt32_t
 
	mt˝i_ßcked
;

205 
u_öt32_t
 
	mt˝i_lo°
;

206 
u_öt32_t
 
	mt˝i_ªå™s
;

207 
u_öt32_t
 
	mt˝i_Áckës
;

210 
u_öt32_t
 
	mt˝i_œ°_d©a_£¡
;

211 
u_öt32_t
 
	mt˝i_œ°_ack_£¡
;

212 
u_öt32_t
 
	mt˝i_œ°_d©a_ªcv
;

213 
u_öt32_t
 
	mt˝i_œ°_ack_ªcv
;

216 
u_öt32_t
 
	mt˝i_pmtu
;

217 
u_öt32_t
 
	mt˝i_rcv_s°hªsh
;

218 
u_öt32_t
 
	mt˝i_πt
;

219 
u_öt32_t
 
	mt˝i_πtv¨
;

220 
u_öt32_t
 
	mt˝i_¢d_s°hªsh
;

221 
u_öt32_t
 
	mt˝i_¢d_cwnd
;

222 
u_öt32_t
 
	mt˝i_advmss
;

223 
u_öt32_t
 
	mt˝i_ª‹dîög
;

225 
u_öt32_t
 
	mt˝i_rcv_πt
;

226 
u_öt32_t
 
	mt˝i_rcv_•a˚
;

228 
u_öt32_t
 
	mt˝i_tŸÆ_ªå™s
;

233 
	#TCP_MD5SIG_MAXKEYLEN
 80

	)

235 
	st˝_md5sig


237 
sockaddr_°‹age
 
	mt˝m_addr
;

238 
u_öt16_t
 
	m__t˝m_∑d1
;

239 
u_öt16_t
 
	mt˝m_keyÀn
;

240 
u_öt32_t
 
	m__t˝m_∑d2
;

241 
u_öt8_t
 
	mt˝m_key
[
TCP_MD5SIG_MAXKEYLEN
];

	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	#__√ed_sig£t_t


	)

29 
	~<sig«l.h
>

30 
	~<bôs/±hªadty≥s.h
>

31 
	~<bôs/£tjmp.h
>

32 
	~<bôs/w‹dsize.h
>

38 
	mPTHREAD_CREATE_JOINABLE
,

39 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

40 
	mPTHREAD_CREATE_DETACHED


41 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

48 
	mPTHREAD_MUTEX_TIMED_NP
,

49 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

50 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

51 
	mPTHREAD_MUTEX_ADAPTIVE_NP


52 #ifde‡
__USE_UNIX98


54 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

55 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

56 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

57 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


59 #ifde‡
__USE_GNU


61 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


66 #ifde‡
__USE_XOPEN2K


70 
	mPTHREAD_MUTEX_STALLED
,

71 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

72 
	mPTHREAD_MUTEX_ROBUST
,

73 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


78 #ifde‡
__USE_UNIX98


82 
	mPTHREAD_PRIO_NONE
,

83 
	mPTHREAD_PRIO_INHERIT
,

84 
	mPTHREAD_PRIO_PROTECT


90 #i‡
__WORDSIZE
 == 64

91 
	#PTHREAD_MUTEX_INITIALIZER
 \

92 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

93 #ifde‡
__USE_GNU


94 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

98 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

99 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

102 
	#PTHREAD_MUTEX_INITIALIZER
 \

103 { { 0, 0, 0, 0, 0, { 0 } } }

	)

104 #ifde‡
__USE_GNU


105 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

109 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

110 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

116 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


119 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

120 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

121 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

122 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


126 
	#PTHREAD_RWLOCK_INITIALIZER
 \

127 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

128 #ifde‡
__USE_GNU


129 #i‡
__WORDSIZE
 == 64

130 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

132 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

134 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


135 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

136 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

137 0, 0, 0, 0 } }

	)

139 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

140 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

141 0 } }

	)

151 
	mPTHREAD_INHERIT_SCHED
,

152 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

153 
	mPTHREAD_EXPLICIT_SCHED


154 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

161 
	mPTHREAD_SCOPE_SYSTEM
,

162 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

163 
	mPTHREAD_SCOPE_PROCESS


164 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

171 
	mPTHREAD_PROCESS_PRIVATE
,

172 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

173 
	mPTHREAD_PROCESS_SHARED


174 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

180 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

184 
	s_±hªad_˛ónup_buf„r


186 (*
	m__routöe
) (*);

187 *
	m__¨g
;

188 
	m__ˇn˚…y≥
;

189 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

195 
	mPTHREAD_CANCEL_ENABLE
,

196 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

197 
	mPTHREAD_CANCEL_DISABLE


198 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

202 
	mPTHREAD_CANCEL_DEFERRED
,

203 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

204 
	mPTHREAD_CANCEL_ASYNCHRONOUS


205 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

207 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

211 
	#PTHREAD_ONCE_INIT
 0

	)

214 #ifde‡
__USE_XOPEN2K


218 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

222 
__BEGIN_DECLS


227 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

228 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

229 *(*
__°¨t_routöe
) (*),

230 *
__ª°ri˘
 
__¨g
Ë
__THROW
 
__n⁄nuŒ
 ((1, 3));

236 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

244 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

246 #ifde‡
__USE_GNU


249 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

257 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

258 
__c⁄°
 
time•ec
 *
__ab°ime
);

265 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

269 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

272 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

280 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

283 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

284 
__THROW
 
	`__n⁄nuŒ
 ((1));

287 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

288 *
__dëach°©e
)

289 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

292 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

293 
__dëach°©e
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

298 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

299 
size_t
 *
__gu¨dsize
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

303 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

304 
size_t
 
__gu¨dsize
)

305 
__THROW
 
	`__n⁄nuŒ
 ((1));

309 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


310 
__©å
,

311 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

315 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

316 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


317 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

320 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


321 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

322 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

325 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

326 
__THROW
 
	`__n⁄nuŒ
 ((1));

329 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


330 
__©å
, *
__ª°ri˘
 
__öhîô
)

331 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

334 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

335 
__öhîô
)

336 
__THROW
 
	`__n⁄nuŒ
 ((1));

340 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

341 *
__ª°ri˘
 
__sc›e
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

345 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

346 
__THROW
 
	`__n⁄nuŒ
 ((1));

349 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


350 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

351 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

357 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

358 *
__°ackaddr
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

362 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


363 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

364 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

369 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

370 
size_t
 
__°acksize
)

371 
__THROW
 
	`__n⁄nuŒ
 ((1));

373 #ifde‡
__USE_XOPEN2K


375 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

376 **
__ª°ri˘
 
__°ackaddr
,

377 
size_t
 *
__ª°ri˘
 
__°acksize
)

378 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

383 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

384 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

387 #ifde‡
__USE_GNU


390 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

391 
size_t
 
__˝u£tsize
,

392 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

397 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

398 
size_t
 
__˝u£tsize
,

399 
˝u_£t_t
 *
__˝u£t
)

400 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

406 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

407 
__THROW
 
	`__n⁄nuŒ
 ((2));

415 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

416 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

417 
__THROW
 
	`__n⁄nuŒ
 ((3));

420 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

421 *
__ª°ri˘
 
__pﬁicy
,

422 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

423 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

426 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

427 
__THROW
;

430 #ifde‡
__USE_UNIX98


432 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

435 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

438 #ifde‡
__USE_GNU


443 
	$±hªad_yõld
 (Ë
__THROW
;

448 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

449 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

450 
__THROW
 
	`__n⁄nuŒ
 ((3));

453 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

454 
˝u_£t_t
 *
__˝u£t
)

455 
__THROW
 
	`__n⁄nuŒ
 ((3));

468 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

469 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

480 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

484 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

487 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

492 
	`±hªad_ã°ˇn˚l
 ();

501 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

502 
__mask_was_ßved
;

503 } 
__ˇn˚l_jmp_buf
[1];

504 *
__∑d
[4];

505 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

508 #i‚de‡
__˛ónup_f˘_©åibuã


509 
	#__˛ónup_f˘_©åibuã


	)

514 
	s__±hªad_˛ónup_‰ame


516 (*
__ˇn˚l_routöe
) (*);

517 *
__ˇn˚l_¨g
;

518 
__do_ô
;

519 
__ˇn˚l_ty≥
;

522 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


523 #ifde‡
__˝lu•lus


525 ˛as†
	c__±hªad_˛ónup_˛ass


527 (*
__ˇn˚l_routöe
) (*);

528 *
__ˇn˚l_¨g
;

529 
__do_ô
;

530 
__ˇn˚l_ty≥
;

532 
public
:

533 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

534 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

535 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

536 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

537 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

538 &
__ˇn˚l_ty≥
); 
	}
}

539 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

549 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

551 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

555 
	#±hªad_˛ónup_p›
(
execuã
) \

556 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

557 } 0)

	)

559 #ifde‡
__USE_GNU


563 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

565 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

566 
__˛‰ame
.
	`__de„r
 ()

	)

571 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

572 
__˛‰ame
.
	`__ª°‹e
 (); \

573 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

574 } 0)

	)

581 
__exã∫_ölöe
 

582 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

584 i‡(
__‰ame
->
__do_ô
)

585 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

586 
	}
}

595 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

597 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

598 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

599 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

600 .
__do_ô
 = 1 };

	)

604 
	#±hªad_˛ónup_p›
(
execuã
) \

605 
__˛‰ame
.
__do_ô
 = (
execuã
); \

606 } 0)

	)

608 #ifde‡
__USE_GNU


612 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

614 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

615 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

616 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

617 .
__do_ô
 = 1 }; \

618 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

619 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

624 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

625 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

626 
__˛‰ame
.
__do_ô
 = (
execuã
); \

627 } 0)

	)

638 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

640 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

641 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

642 *
__ˇn˚l_¨g
 = (
¨g
); \

643 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

644 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

645 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

647 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

648 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

652 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

653 dÿ{

	)

654 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

655 
__˛ónup_f˘_©åibuã
;

659 
	#±hªad_˛ónup_p›
(
execuã
) \

662 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 i‡(
execuã
) \

664 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

665 } 0)

	)

666 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

667 
__˛ónup_f˘_©åibuã
;

669 #ifde‡
__USE_GNU


673 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

675 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

676 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

677 *
__ˇn˚l_¨g
 = (
¨g
); \

678 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

679 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

680 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

682 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

683 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

687 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

688 dÿ{

	)

689 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

690 
__˛ónup_f˘_©åibuã
;

695 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

698 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

699 i‡(
execuã
) \

700 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

701 
	}
} 0)

	)

702 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

703 
__˛ónup_f˘_©åibuã
;

707 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

708 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

709 #i‚de‡
SHARED


710 
	`__©åibuã__
 ((
__wók__
))

716 
__jmp_buf_èg
;

717 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

723 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

724 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1));

728 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

729 
__THROW
 
	`__n⁄nuŒ
 ((1));

732 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

733 
__THROW
 
	`__n⁄nuŒ
 ((1));

736 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

737 
__THROW
 
	`__n⁄nuŒ
 ((1));

739 #ifde‡
__USE_XOPEN2K


741 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

742 
__c⁄°
 
time•ec
 *
__ª°ri˘


743 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

747 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

748 
__THROW
 
	`__n⁄nuŒ
 ((1));

751 #ifde‡
__USE_UNIX98


753 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

754 
__ª°ri˘
 
__muãx
,

755 *
__ª°ri˘
 
__¥io˚ûög
)

756 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

760 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

761 
__¥io˚ûög
,

762 *
__ª°ri˘
 
__ﬁd_˚ûög
)

763 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

767 #ifde‡
__USE_XOPEN2K8


769 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

770 
__THROW
 
	`__n⁄nuŒ
 ((1));

771 #ifde‡
__USE_GNU


772 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

773 
__THROW
 
	`__n⁄nuŒ
 ((1));

782 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

783 
__THROW
 
	`__n⁄nuŒ
 ((1));

786 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

787 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

791 
__ª°ri˘
 
__©å
,

792 *
__ª°ri˘
 
__psh¨ed
)

793 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

796 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

797 
__psh¨ed
)

798 
__THROW
 
	`__n⁄nuŒ
 ((1));

800 #ifde‡
__USE_UNIX98


802 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


803 
__©å
, *
__ª°ri˘
 
__köd
)

804 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

809 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1));

813 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

814 
__ª°ri˘
 
__©å
,

815 *
__ª°ri˘
 
__¥Ÿocﬁ
)

816 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

820 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

821 
__¥Ÿocﬁ
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

825 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

826 
__ª°ri˘
 
__©å
,

827 *
__ª°ri˘
 
__¥io˚ûög
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

831 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

832 
__¥io˚ûög
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1));

836 #ifde‡
__USE_XOPEN2K


838 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

839 *
__robu°√ss
)

840 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

841 #ifde‡
__USE_GNU


842 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

843 *
__robu°√ss
)

844 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

848 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

849 
__robu°√ss
)

850 
__THROW
 
	`__n⁄nuŒ
 ((1));

851 #ifde‡
__USE_GNU


852 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

853 
__robu°√ss
)

854 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


864 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

865 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


866 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

869 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

870 
__THROW
 
	`__n⁄nuŒ
 ((1));

873 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

874 
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

880 #ifde‡
__USE_XOPEN2K


882 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

883 
__c⁄°
 
time•ec
 *
__ª°ri˘


884 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

888 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

889 
__THROW
 
	`__n⁄nuŒ
 ((1));

892 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

893 
__THROW
 
	`__n⁄nuŒ
 ((1));

895 #ifde‡
__USE_XOPEN2K


897 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

898 
__c⁄°
 
time•ec
 *
__ª°ri˘


899 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

903 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

904 
__THROW
 
	`__n⁄nuŒ
 ((1));

910 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

911 
__THROW
 
	`__n⁄nuŒ
 ((1));

914 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

915 
__THROW
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

919 
__ª°ri˘
 
__©å
,

920 *
__ª°ri˘
 
__psh¨ed
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

924 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

925 
__psh¨ed
)

926 
__THROW
 
	`__n⁄nuŒ
 ((1));

929 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

930 
__ª°ri˘
 
__©å
,

931 *
__ª°ri˘
 
__¥ef
)

932 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

935 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

936 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

944 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

945 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


946 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

949 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

954 
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

966 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

967 
	`__n⁄nuŒ
 ((1, 2));

976 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

977 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

978 
__c⁄°
 
time•ec
 *
__ª°ri˘


979 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

984 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

985 
__THROW
 
	`__n⁄nuŒ
 ((1));

988 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

989 
__THROW
 
	`__n⁄nuŒ
 ((1));

992 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

993 
__ª°ri˘
 
__©å
,

994 *
__ª°ri˘
 
__psh¨ed
)

995 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

998 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

999 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1001 #ifde‡
__USE_XOPEN2K


1003 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1004 
__ª°ri˘
 
__©å
,

1005 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1006 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1009 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1010 
__˛ockid_t
 
__˛ock_id
)

1011 
__THROW
 
	`__n⁄nuŒ
 ((1));

1015 #ifde‡
__USE_XOPEN2K


1020 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1021 
__THROW
 
	`__n⁄nuŒ
 ((1));

1024 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1025 
__THROW
 
	`__n⁄nuŒ
 ((1));

1028 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROW
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1045 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1046 
__©å
, 
__cou¡
)

1047 
__THROW
 
	`__n⁄nuŒ
 ((1));

1050 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1051 
__THROW
 
	`__n⁄nuŒ
 ((1));

1054 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1059 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1060 
__THROW
 
	`__n⁄nuŒ
 ((1));

1063 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1064 
__THROW
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1068 
__ª°ri˘
 
__©å
,

1069 *
__ª°ri˘
 
__psh¨ed
)

1070 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1073 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1074 
__psh¨ed
)

1075 
__THROW
 
	`__n⁄nuŒ
 ((1));

1087 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1088 (*
__de°r_fun˘i⁄
) (*))

1089 
__THROW
 
	`__n⁄nuŒ
 ((1));

1092 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1095 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1098 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1099 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1102 #ifde‡
__USE_XOPEN2K


1104 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1105 
__˛ockid_t
 *
__˛ock_id
)

1106 
__THROW
 
	`__n⁄nuŒ
 ((2));

1121 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1122 (*
__∑ª¡
) (),

1123 (*
__chûd
Ë()Ë
__THROW
;

1126 #ifde‡
__USE_EXTERN_INLINES


1128 
__exã∫_ölöe
 

1129 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1131  
__thªad1
 =
__thªad2
;

1132 
	}
}

1135 
	g__END_DECLS


	@/usr/include/resolv.h

52 #i‚de‡
_RESOLV_H_


56 
	~<sys/ty≥s.h
>

57 
	~<√töë/ö.h
>

59 #i‚de‡
__√ed_ªs_°©e


60 
	#_RESOLV_H_


	)

62 
	~<sys/∑øm.h
>

63 
	~<sys/cdefs.h
>

64 
	~<°dio.h
>

65 
	~<¨∑/«me£r.h
>

68 #i‚de‡
__ªs_°©e_deföed


69 
	#__ªs_°©e_deföed


	)

71 íum { 
	mªs_gﬂhód
, 
	mªs_√xäs
, 
	mªs_modifõd
, 
	mªs_d⁄e
, 
	mªs_îr‹
 }

72 
	tªs_£ndhooka˘
;

74 
	$ªs_£ndhooka˘
 (*
	tªs_£nd_qhook
Ë(
	tsockaddr_ö
 * c⁄° *
	t__ns
,

75 c⁄° 
	tu_ch¨
 **
	t__quîy
,

76 *
	t__quîyÀn
,

77 
	tu_ch¨
 *
	t__™s
,

78 
	t__™ssiz
,

79 *
	t__ª•Àn
);

81 
	$ªs_£ndhooka˘
 (*
	tªs_£nd_rhook
Ë(c⁄° 
	tsockaddr_ö
 *
	t__ns
,

82 c⁄° 
	tu_ch¨
 *
	t__quîy
,

83 
	t__quîyÀn
,

84 
	tu_ch¨
 *
	t__™s
,

85 
	t__™ssiz
,

86 *
	t__ª•Àn
);

91 
	#MAXNS
 3

	)

92 
	#MAXDFLSRCH
 3

	)

93 
	#MAXDNSRCH
 6

	)

94 
	#LOCALDOMAINPARTS
 2

	)

96 
	#RES_TIMEOUT
 5

	)

97 
	#MAXRESOLVSORT
 10

	)

98 
	#RES_MAXNDOTS
 15

	)

99 
	#RES_MAXRETRANS
 30

	)

100 
	#RES_MAXRETRY
 5

	)

101 
	#RES_DFLRETRY
 2

	)

102 
	#RES_MAXTIME
 65535

	)

104 
	s__ªs_°©e
 {

105 
ªå™s
;

106 
ªåy
;

107 
u_l⁄g
 
›ti⁄s
;

108 
nscou¡
;

109 
sockaddr_ö


110 
nßddr_li°
[
MAXNS
];

111 
	#nßddr
 
nßddr_li°
[0]

	)

112 
u_sh‹t
 
id
;

114 *
dn§ch
[
MAXDNSRCH
+1];

115 
defd«me
[256];

116 
u_l⁄g
 
pfcode
;

117 
ndŸs
:4;

118 
ns‹t
:4;

119 
ùv6_u«vaû
:1;

120 
unu£d
:23;

122 
ö_addr
 
addr
;

123 
u_öt32_t
 
mask
;

124 } 
s‹t_li°
[
MAXRESOLVSORT
];

126 
ªs_£nd_qhook
 
qhook
;

127 
ªs_£nd_rhook
 
rhook
;

128 
ªs_h_î∫o
;

129 
_vcsock
;

130 
u_öt
 
_Êags
;

133 
∑d
[52];

135 
u_öt16_t
 
nscou¡
;

136 
u_öt16_t
 
nsm≠
[
MAXNS
];

137 
nssocks
[
MAXNS
];

138 
u_öt16_t
 
nscou¡6
;

139 
u_öt16_t
 
nsöô
;

140 
sockaddr_ö6
 *
nßddrs
[
MAXNS
];

141 #ifde‡
_LIBC


142 
öô°amp


143 
	`__©åibuã__
((
∑cked
));

145 
_öô°amp
[2];

147 } 
_ext
;

148 } 
_u
;

151 
__ªs_°©e
 *
	tªs_°©e
;

152 #unde‡
__√ed_ªs_°©e


155 #ifde‡
_RESOLV_H_


164 
	#__RES
 19991006

	)

172 #i‚de‡
_PATH_RESCONF


173 
	#_PATH_RESCONF
 "/ëc/ªsﬁv.c⁄f"

	)

176 
	sªs_sym
 {

177 
numbî
;

178 * 
«me
;

179 * 
hum™«me
;

185 
	#RES_F_VC
 0x00000001

	)

186 
	#RES_F_CONN
 0x00000002

	)

187 
	#RES_F_EDNS0ERR
 0x00000004

	)

190 
	#RES_EXHAUSTIVE
 0x00000001

	)

195 
	#RES_INIT
 0x00000001

	)

196 
	#RES_DEBUG
 0x00000002

	)

197 
	#RES_AAONLY
 0x00000004

	)

198 
	#RES_USEVC
 0x00000008

	)

199 
	#RES_PRIMARY
 0x00000010

	)

200 
	#RES_IGNTC
 0x00000020

	)

201 
	#RES_RECURSE
 0x00000040

	)

202 
	#RES_DEFNAMES
 0x00000080

	)

203 
	#RES_STAYOPEN
 0x00000100

	)

204 
	#RES_DNSRCH
 0x00000200

	)

205 
	#RES_INSECURE1
 0x00000400

	)

206 
	#RES_INSECURE2
 0x00000800

	)

207 
	#RES_NOALIASES
 0x00001000

	)

208 
	#RES_USE_INET6
 0x00002000

	)

209 
	#RES_ROTATE
 0x00004000

	)

210 
	#RES_NOCHECKNAME
 0x00008000

	)

211 
	#RES_KEEPTSIG
 0x00010000

	)

212 
	#RES_BLAST
 0x00020000

	)

213 
	#RES_USEBSTRING
 0x00040000

	)

215 
	#RES_NOIP6DOTINT
 0x00080000

	)

217 
	#RES_USE_EDNS0
 0x00100000

	)

218 
	#RES_SNGLKUP
 0x00200000

	)

219 
	#RES_SNGLKUPREOP
 0x00400000

	)

221 
	#RES_USE_DNSSEC
 0x00800000

	)

223 
	#RES_DEFAULT
 (
RES_RECURSE
|
RES_DEFNAMES
|
RES_DNSRCH
|
RES_NOIP6DOTINT
)

	)

228 
	#RES_PRF_STATS
 0x00000001

	)

229 
	#RES_PRF_UPDATE
 0x00000002

	)

230 
	#RES_PRF_CLASS
 0x00000004

	)

231 
	#RES_PRF_CMD
 0x00000008

	)

232 
	#RES_PRF_QUES
 0x00000010

	)

233 
	#RES_PRF_ANS
 0x00000020

	)

234 
	#RES_PRF_AUTH
 0x00000040

	)

235 
	#RES_PRF_ADD
 0x00000080

	)

236 
	#RES_PRF_HEAD1
 0x00000100

	)

237 
	#RES_PRF_HEAD2
 0x00000200

	)

238 
	#RES_PRF_TTLID
 0x00000400

	)

239 
	#RES_PRF_HEADX
 0x00000800

	)

240 
	#RES_PRF_QUERY
 0x00001000

	)

241 
	#RES_PRF_REPLY
 0x00002000

	)

242 
	#RES_PRF_INIT
 0x00004000

	)

246 
__BEGIN_DECLS


247 
__ªs_°©e
 *
	$__ªs_°©e
(Ë
	`__©åibuã__
 ((
__c⁄°__
));

248 
__END_DECLS


249 
	#_ªs
 (*
	`__ªs_°©e
())

	)

251 #i‚de‡
__BIND_NOSTATIC


252 
	#Â_nquîy
 
__Â_nquîy


	)

253 
	#Â_quîy
 
__Â_quîy


	)

254 
	#ho°Æüs
 
__ho°Æüs


	)

255 
	#p_quîy
 
__p_quîy


	)

256 
	#ªs_˛o£
 
__ªs_˛o£


	)

257 
	#ªs_öô
 
__ªs_öô


	)

258 
	#ªs_isour£rvî
 
__ªs_isour£rvî


	)

259 
	#ªs_mkquîy
 
__ªs_mkquîy


	)

260 
	#ªs_quîy
 
__ªs_quîy


	)

261 
	#ªs_quîydomaö
 
__ªs_quîydomaö


	)

262 
	#ªs_£¨ch
 
__ªs_£¨ch


	)

263 
	#ªs_£nd
 
__ªs_£nd


	)

265 
__BEGIN_DECLS


266 
	$Â_nquîy
 (c⁄° 
u_ch¨
 *, , 
FILE
 *Ë
__THROW
;

267 
	$Â_quîy
 (c⁄° 
u_ch¨
 *, 
FILE
 *Ë
__THROW
;

268 c⁄° * 
	$ho°Æüs
 (c⁄° *Ë
__THROW
;

269 
	$p_quîy
 (c⁄° 
u_ch¨
 *Ë
__THROW
;

270 
	$ªs_˛o£
 (Ë
__THROW
;

271 
	$ªs_öô
 (Ë
__THROW
;

272 
	$ªs_isour£rvî
 (c⁄° 
sockaddr_ö
 *Ë
__THROW
;

273 
	$ªs_mkquîy
 (, c⁄° *, , , c⁄° 
u_ch¨
 *,

274 , c⁄° 
u_ch¨
 *, u_ch¨ *, Ë
__THROW
;

275 
	$ªs_quîy
 (c⁄° *, , , 
u_ch¨
 *, Ë
__THROW
;

276 
	$ªs_quîydomaö
 (const *, const *, , ,

277 
u_ch¨
 *, Ë
__THROW
;

278 
	$ªs_£¨ch
 (c⁄° *, , , 
u_ch¨
 *, Ë
__THROW
;

279 
	$ªs_£nd
 (c⁄° 
u_ch¨
 *, , u_ch¨ *, Ë
__THROW
;

280 
__END_DECLS


283 
	#b64_¡›
 
__b64_¡›


	)

284 
	#b64_±⁄
 
__b64_±⁄


	)

285 
	#dn_comp
 
__dn_comp


	)

286 
	#dn_cou¡_œbñs
 
__dn_cou¡_œbñs


	)

287 
	#dn_ex∑nd
 
__dn_ex∑nd


	)

288 
	#dn_skù«me
 
__dn_skù«me


	)

289 
	#Â_ªs°©
 
__Â_ªs°©


	)

290 
	#loc_©⁄
 
__loc_©⁄


	)

291 
	#loc_¡ﬂ
 
__loc_¡ﬂ


	)

292 
	#p_cd«me
 
__p_cd«me


	)

293 
	#p_cd¬ame
 
__p_cd¬ame


	)

294 
	#p_˛ass
 
__p_˛ass


	)

295 
	#p_fq«me
 
__p_fq«me


	)

296 
	#p_fq¬ame
 
__p_fq¬ame


	)

297 
	#p_›ti⁄
 
__p_›ti⁄


	)

298 
	#p_£c°od©e
 
__p_£c°od©e


	)

299 
	#p_£˘i⁄
 
__p_£˘i⁄


	)

300 
	#p_time
 
__p_time


	)

301 
	#p_ty≥
 
__p_ty≥


	)

302 
	#p_rcode
 
__p_rcode


	)

303 
	#pué⁄g
 
__pué⁄g


	)

304 
	#putsh‹t
 
__putsh‹t


	)

305 
	#ªs_dnok
 
__ªs_dnok


	)

306 
	#ªs_hnok
 
__ªs_hnok


	)

307 
	#ªs_ho°Æüs
 
__ªs_ho°Æüs


	)

308 
	#ªs_maûok
 
__ªs_maûok


	)

309 
	#ªs_«meöquîy
 
__ªs_«meöquîy


	)

310 
	#ªs_n˛o£
 
__ªs_n˛o£


	)

311 
	#ªs_nöô
 
__ªs_nöô


	)

312 
	#ªs_nmkquîy
 
__ªs_nmkquîy


	)

313 
	#ªs_≈quîy
 
__ªs_≈quîy


	)

314 
	#ªs_nquîy
 
__ªs_nquîy


	)

315 
	#ªs_nquîydomaö
 
__ªs_nquîydomaö


	)

316 
	#ªs_n£¨ch
 
__ªs_n£¨ch


	)

317 
	#ªs_n£nd
 
__ªs_n£nd


	)

318 
	#ªs_nisour£rvî
 
__ªs_nisour£rvî


	)

319 
	#ªs_ownok
 
__ªs_ownok


	)

320 
	#ªs_quîõsm©ch
 
__ªs_quîõsm©ch


	)

321 
	#ªs_øndomid
 
__ªs_øndomid


	)

322 
	#sym_¡›
 
__sym_¡›


	)

323 
	#sym_¡os
 
__sym_¡os


	)

324 
	#sym_°⁄
 
__sym_°⁄


	)

325 
__BEGIN_DECLS


326 
	$ªs_hnok
 (c⁄° *Ë
__THROW
;

327 
	$ªs_ownok
 (c⁄° *Ë
__THROW
;

328 
	$ªs_maûok
 (c⁄° *Ë
__THROW
;

329 
	$ªs_dnok
 (c⁄° *Ë
__THROW
;

330 
	$sym_°⁄
 (c⁄° 
ªs_sym
 *, c⁄° *, *Ë
__THROW
;

331 c⁄° * 
	$sym_¡os
 (c⁄° 
ªs_sym
 *, , *Ë
__THROW
;

332 c⁄° * 
	$sym_¡›
 (c⁄° 
ªs_sym
 *, , *Ë
__THROW
;

333 
	$b64_¡›
 (
u_ch¨
 c⁄° *, 
size_t
, *, size_tË
__THROW
;

334 
	$b64_±⁄
 (c⁄° *, 
u_ch¨
 *, 
size_t
Ë
__THROW
;

335 
	$loc_©⁄
 (c⁄° *
__ascii
, 
u_ch¨
 *
__bö¨y
Ë
__THROW
;

336 c⁄° * 
	$loc_¡ﬂ
 (c⁄° 
u_ch¨
 *
__bö¨y
, *
__ascii
Ë
__THROW
;

337 
	$dn_skù«me
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *Ë
__THROW
;

338 
	$pué⁄g
 (
u_öt32_t
, 
u_ch¨
 *Ë
__THROW
;

339 
	$putsh‹t
 (
u_öt16_t
, 
u_ch¨
 *Ë
__THROW
;

340 c⁄° * 
	$p_˛ass
 (Ë
__THROW
;

341 c⁄° * 
	$p_time
 (
u_öt32_t
Ë
__THROW
;

342 c⁄° * 
	$p_ty≥
 (Ë
__THROW
;

343 c⁄° * 
	$p_rcode
 (Ë
__THROW
;

344 c⁄° 
u_ch¨
 * 
	$p_cd¬ame
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *, , 
FILE
 *)

345 
__THROW
;

346 c⁄° 
u_ch¨
 * 
	$p_cd«me
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *, 
FILE
 *Ë
__THROW
;

347 c⁄° 
u_ch¨
 * 
	$p_fq¬ame
 (c⁄° 
u_ch¨
 *
__˝
, c⁄° u_ch¨ *
__msg
,

348 , *, Ë
__THROW
;

349 c⁄° 
u_ch¨
 * 
	$p_fq«me
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *, 
FILE
 *Ë
__THROW
;

350 c⁄° * 
	$p_›ti⁄
 (
u_l⁄g
 
__›ti⁄
Ë
__THROW
;

351 * 
	$p_£c°od©e
 (
u_l⁄g
Ë
__THROW
;

352 
	$dn_cou¡_œbñs
 (c⁄° *Ë
__THROW
;

353 
	$dn_comp
 (c⁄° *, 
u_ch¨
 *, , u_char **, u_char **)

354 
__THROW
;

355 
	$dn_ex∑nd
 (c⁄° 
u_ch¨
 *, const u_char *, const u_char *,

356 *, Ë
__THROW
;

357 
u_öt
 
	$ªs_øndomid
 (Ë
__THROW
;

358 
	$ªs_«meöquîy
 (const *, , ,

359 c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *Ë
__THROW
;

360 
	$ªs_quîõsm©ch
 (c⁄° 
u_ch¨
 *, const u_char *,

361 c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *Ë
__THROW
;

362 c⁄° * 
	$p_£˘i⁄
 (
__£˘i⁄
, 
__›code
Ë
__THROW
;

364 
	$ªs_nöô
 (
ªs_°©e
Ë
__THROW
;

365 
	$ªs_nisour£rvî
 (c⁄° 
ªs_°©e
,

366 c⁄° 
sockaddr_ö
 *Ë
__THROW
;

367 
	$Â_ªs°©
 (c⁄° 
ªs_°©e
, 
FILE
 *Ë
__THROW
;

368 
	$ªs_≈quîy
 (c⁄° 
ªs_°©e
, c⁄° 
u_ch¨
 *, , 
FILE
 *)

369 
__THROW
;

370 c⁄° * 
	$ªs_ho°Æüs
 (c⁄° 
ªs_°©e
, c⁄° *, *, 
size_t
)

371 
__THROW
;

372 
	$ªs_nquîy
 (
ªs_°©e
, c⁄° *, , , 
u_ch¨
 *, )

373 
__THROW
;

374 
	$ªs_n£¨ch
 (
ªs_°©e
, c⁄° *, , , 
u_ch¨
 *, )

375 
__THROW
;

376 
	$ªs_nquîydomaö
 (
ªs_°©e
, const *, const *, ,

377 , 
u_ch¨
 *, Ë
__THROW
;

378 
	$ªs_nmkquîy
 (
ªs_°©e
, , const *, , ,

379 c⁄° 
u_ch¨
 *, , const u_char *, u_char *,

380 Ë
__THROW
;

381 
	$ªs_n£nd
 (
ªs_°©e
, c⁄° 
u_ch¨
 *, , u_char *, )

382 
__THROW
;

383 
	$ªs_n˛o£
 (
ªs_°©e
Ë
__THROW
;

384 
__END_DECLS


	@/usr/include/semaphore.h

19 #i‚de‡
_SEMAPHORE_H


20 
	#_SEMAPHORE_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

24 #ifde‡
__USE_XOPEN2K


25 
	#__√ed_time•ec


	)

26 
	~<time.h
>

30 
	~<bôs/£m≠h‹e.h
>

33 
__BEGIN_DECLS


37 
	$£m_öô
 (
£m_t
 *
__£m
, 
__psh¨ed
, 
__vÆue
)

38 
__THROW
;

40 
	$£m_de°roy
 (
£m_t
 *
__£m
Ë
__THROW
;

43 
£m_t
 *
	$£m_›í
 (
__c⁄°
 *
__«me
, 
__oÊag
, ...Ë
__THROW
;

46 
	$£m_˛o£
 (
£m_t
 *
__£m
Ë
__THROW
;

49 
	$£m_u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
;

55 
	`£m_waô
 (
£m_t
 *
__£m
);

57 #ifde‡
__USE_XOPEN2K


62 
	`£m_timedwaô
 (
£m_t
 *
__ª°ri˘
 
__£m
,

63 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__ab°ime
);

67 
	$£m_åywaô
 (
£m_t
 *
__£m
Ë
__THROW
;

70 
	$£m_po°
 (
£m_t
 *
__£m
Ë
__THROW
;

73 
	$£m_gëvÆue
 (
£m_t
 *
__ª°ri˘
 
__£m
, *__ª°ri˘ 
__svÆ
)

74 
__THROW
;

77 
__END_DECLS


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #ifde‡
__USE_XOPEN


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

89 
__BEGIN_NAMESPACE_STD


90 #i‚de‡
__USE_FILE_OFFSET64


91 
_G_Âos_t
 
	tÂos_t
;

93 
_G_Âos64_t
 
	tÂos_t
;

95 
__END_NAMESPACE_STD


96 #ifde‡
__USE_LARGEFILE64


97 
_G_Âos64_t
 
	tÂos64_t
;

101 
	#_IOFBF
 0

	)

102 
	#_IOLBF
 1

	)

103 
	#_IONBF
 2

	)

107 #i‚de‡
BUFSIZ


108 
	#BUFSIZ
 
_IO_BUFSIZ


	)

114 #i‚de‡
EOF


115 
	#EOF
 (-1)

	)

121 
	#SEEK_SET
 0

	)

122 
	#SEEK_CUR
 1

	)

123 
	#SEEK_END
 2

	)

126 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


128 
	#P_tmpdú
 "/tmp"

	)

141 
	~<bôs/°dio_lim.h
>

145 
_IO_FILE
 *
°dö
;

146 
_IO_FILE
 *
°dout
;

147 
_IO_FILE
 *
°dîr
;

148 #ifde‡
__STDC__


150 
	#°dö
 
°dö


	)

151 
	#°dout
 
°dout


	)

152 
	#°dîr
 
°dîr


	)

155 
__BEGIN_NAMESPACE_STD


157 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

159 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

160 
__END_NAMESPACE_STD


162 #ifde‡
__USE_ATFILE


164 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

165 
__c⁄°
 *
__√w
Ë
__THROW
;

168 
__BEGIN_NAMESPACE_STD


173 #i‚de‡
__USE_FILE_OFFSET64


174 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

176 #ifde‡
__REDIRECT


177 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

179 
	#tmpfûe
 
tmpfûe64


	)

183 #ifde‡
__USE_LARGEFILE64


184 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

188 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

189 
__END_NAMESPACE_STD


191 #ifde‡
__USE_MISC


194 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

198 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


206 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

207 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

211 
__BEGIN_NAMESPACE_STD


216 
	`f˛o£
 (
FILE
 *
__°ªam
);

221 
	`fÊush
 (
FILE
 *
__°ªam
);

222 
__END_NAMESPACE_STD


224 #ifde‡
__USE_MISC


231 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

234 #ifde‡
__USE_GNU


241 
	`f˛o£Æl
 ();

245 
__BEGIN_NAMESPACE_STD


246 #i‚de‡
__USE_FILE_OFFSET64


251 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

252 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

257 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

258 
__c⁄°
 *
__ª°ri˘
 
__modes
,

259 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

261 #ifde‡
__REDIRECT


262 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

263 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

264 
__wur
;

265 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

266 
__c⁄°
 *
__ª°ri˘
 
__modes
,

267 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

268 
__wur
;

270 
	#f›í
 
f›í64


	)

271 
	#‰e›í
 
‰e›í64


	)

274 
__END_NAMESPACE_STD


275 #ifde‡
__USE_LARGEFILE64


276 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

277 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

279 
__c⁄°
 *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

283 #ifdef 
__USE_POSIX


285 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

288 #ifdef 
__USE_GNU


291 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

292 
__c⁄°
 *
__ª°ri˘
 
__modes
,

293 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

296 #ifde‡
__USE_XOPEN2K8


298 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

299 
__THROW
 
__wur
;

304 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

308 
__BEGIN_NAMESPACE_STD


311 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

315 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

316 
__modes
, 
size_t
 
__n
Ë
__THROW
;

317 
__END_NAMESPACE_STD


319 #ifdef 
__USE_BSD


322 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

323 
size_t
 
__size
Ë
__THROW
;

326 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

330 
__BEGIN_NAMESPACE_STD


335 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

336 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

341 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

343 
	$•rötf
 (*
__ª°ri˘
 
__s
,

344 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

350 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

351 
_G_va_li°
 
__¨g
);

356 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

358 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

359 
_G_va_li°
 
__¨g
Ë
__THROW
;

360 
__END_NAMESPACE_STD


362 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


363 
__BEGIN_NAMESPACE_C99


365 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

366 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

367 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

369 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

370 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

371 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

372 
__END_NAMESPACE_C99


375 #ifde‡
__USE_GNU


378 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

379 
_G_va_li°
 
__¨g
)

380 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

381 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

382 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

383 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

384 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

385 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

386 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

389 #ifde‡
__USE_XOPEN2K8


396 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

397 
_G_va_li°
 
__¨g
)

398 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

399 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

400 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

404 
__BEGIN_NAMESPACE_STD


409 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

410 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

415 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

417 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

418 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

420 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

421 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

422 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

423 #ifde‡
__REDIRECT


427 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

428 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

429 
__isoc99_fsˇnf
Ë
__wur
;

430 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

431 
__isoc99_sˇnf
Ë
__wur
;

432 
	`__REDIRECT
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

433 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

434 
__isoc99_ssˇnf
Ë
__THROW
;

436 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

437 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

438 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

439 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

440 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

441 
	#fsˇnf
 
__isoc99_fsˇnf


	)

442 
	#sˇnf
 
__isoc99_sˇnf


	)

443 
	#ssˇnf
 
__isoc99_ssˇnf


	)

447 
__END_NAMESPACE_STD


449 #ifdef 
__USE_ISOC99


450 
__BEGIN_NAMESPACE_C99


455 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

456 
_G_va_li°
 
__¨g
)

457 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

463 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

464 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

467 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

468 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

469 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

471 #i‡!
deföed
 
__USE_GNU
 \

472 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

473 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

474 #ifde‡
__REDIRECT


478 
	`__REDIRECT
 (
vfsˇnf
,

479 (
FILE
 *
__ª°ri˘
 
__s
,

480 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

481 
__isoc99_vfsˇnf
)

482 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

483 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

484 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

485 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

486 
	`__REDIRECT
 (
vssˇnf
,

487 (
__c⁄°
 *
__ª°ri˘
 
__s
,

488 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

489 
__isoc99_vssˇnf
)

490 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

492 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

493 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

494 
_G_va_li°
 
__¨g
Ë
__wur
;

495 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

496 
_G_va_li°
 
__¨g
Ë
__wur
;

497 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

498 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

499 
_G_va_li°
 
__¨g
Ë
__THROW
;

500 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

501 
	#vsˇnf
 
__isoc99_vsˇnf


	)

502 
	#vssˇnf
 
__isoc99_vssˇnf


	)

506 
__END_NAMESPACE_C99


510 
__BEGIN_NAMESPACE_STD


515 
	`fgëc
 (
FILE
 *
__°ªam
);

516 
	`gëc
 (
FILE
 *
__°ªam
);

522 
	`gëch¨
 ();

523 
__END_NAMESPACE_STD


527 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

529 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


534 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

535 
	`gëch¨_u∆ocked
 ();

538 #ifde‡
__USE_MISC


545 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

549 
__BEGIN_NAMESPACE_STD


557 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

558 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

564 
	`putch¨
 (
__c
);

565 
__END_NAMESPACE_STD


569 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

571 #ifde‡
__USE_MISC


578 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

581 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


586 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

587 
	`putch¨_u∆ocked
 (
__c
);

591 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

592 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

594 
	`gëw
 (
FILE
 *
__°ªam
);

597 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

601 
__BEGIN_NAMESPACE_STD


606 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

607 
__wur
;

614 *
	$gës
 (*
__s
Ë
__wur
;

615 
__END_NAMESPACE_STD


617 #ifde‡
__USE_GNU


624 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

625 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

629 #ifdef 
__USE_XOPEN2K8


640 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

641 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

642 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

643 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

644 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

645 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

653 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

654 
size_t
 *
__ª°ri˘
 
__n
,

655 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

659 
__BEGIN_NAMESPACE_STD


664 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

670 
	`puts
 (
__c⁄°
 *
__s
);

677 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

684 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

685 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

690 
size_t
 
	$fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

691 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
Ë
__wur
;

692 
__END_NAMESPACE_STD


694 #ifde‡
__USE_GNU


701 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

702 
FILE
 *
__ª°ri˘
 
__°ªam
);

705 #ifde‡
__USE_MISC


712 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

713 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

714 
size_t
 
	$fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

715 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

719 
__BEGIN_NAMESPACE_STD


724 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

729 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

734 
	`ªwöd
 (
FILE
 *
__°ªam
);

735 
__END_NAMESPACE_STD


742 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


743 #i‚de‡
__USE_FILE_OFFSET64


748 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

753 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

755 #ifde‡
__REDIRECT


756 
	`__REDIRECT
 (
f£eko
,

757 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

758 
f£eko64
);

759 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

761 
	#f£eko
 
f£eko64


	)

762 
	#·ñlo
 
·ñlo64


	)

767 
__BEGIN_NAMESPACE_STD


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

778 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

782 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

783 
	`__REDIRECT
 (
f£ços
,

784 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

786 
	#fgëpos
 
fgëpos64


	)

787 
	#f£ços
 
f£ços64


	)

790 
__END_NAMESPACE_STD


792 #ifde‡
__USE_LARGEFILE64


793 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

794 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

795 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

796 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

799 
__BEGIN_NAMESPACE_STD


801 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

803 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

805 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

806 
__END_NAMESPACE_STD


808 #ifde‡
__USE_MISC


810 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

811 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

812 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

816 
__BEGIN_NAMESPACE_STD


821 
	`≥º‹
 (
__c⁄°
 *
__s
);

822 
__END_NAMESPACE_STD


828 
	~<bôs/sys_îæi°.h
>

831 #ifdef 
__USE_POSIX


833 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

836 #ifde‡
__USE_MISC


838 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

842 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

843 
deföed
 
__USE_MISC
)

848 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

854 
	`p˛o£
 (
FILE
 *
__°ªam
);

858 #ifdef 
__USE_POSIX


860 *
	$˘îmid
 (*
__s
Ë
__THROW
;

864 #ifde‡
__USE_XOPEN


866 *
	`cu£rid
 (*
__s
);

870 #ifdef 
__USE_GNU


871 
ob°ack
;

874 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

875 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

876 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

877 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

878 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

879 
_G_va_li°
 
__¨gs
)

880 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

884 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


888 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

892 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

895 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

898 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


902 
	#__√ed_gë›t


	)

903 
	~<gë›t.h
>

908 #ifde‡
__USE_EXTERN_INLINES


909 
	~<bôs/°dio.h
>

911 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


912 
	~<bôs/°dio2.h
>

914 #ifde‡
__LDBL_COMPAT


915 
	~<bôs/°dio-ldbl.h
>

918 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


502 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

505 #ifde‡
__USE_XOPEN2K


507 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

508 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

511 
__BEGIN_NAMESPACE_STD


513 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

517 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

519 #ifde‡
__USE_GNU


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #ifde‡
__USE_GNU


551 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

553 
__END_NAMESPACE_STD


555 #ifde‡
__USE_ISOC99


556 
__BEGIN_NAMESPACE_C99


559 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

560 
__END_NAMESPACE_C99


564 
__BEGIN_NAMESPACE_STD


566 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

567 
__END_NAMESPACE_STD


571 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


584 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
;

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


604 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

614 #i‚de‡
__USE_FILE_OFFSET64


615 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

617 #ifde‡
__REDIRECT


618 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

619 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 
	#mk°emp
 
mk°emp64


	)

624 #ifde‡
__USE_LARGEFILE64


625 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

629 #ifde‡
__USE_MISC


636 #i‚de‡
__USE_FILE_OFFSET64


637 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

639 #ifde‡
__REDIRECT


640 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

641 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 
	#mk°emps
 
mk°emps64


	)

646 #ifde‡
__USE_LARGEFILE64


647 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

648 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

652 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


658 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

661 #ifde‡
__USE_GNU


668 #i‚de‡
__USE_FILE_OFFSET64


669 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

671 #ifde‡
__REDIRECT


672 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

673 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 
	#mko°emp
 
mko°emp64


	)

678 #ifde‡
__USE_LARGEFILE64


679 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

688 #i‚de‡
__USE_FILE_OFFSET64


689 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

690 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #ifde‡
__REDIRECT


693 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

694 
__Êags
), 
mko°emps64
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 
	#mko°emps
 
mko°emps64


	)

700 #ifde‡
__USE_LARGEFILE64


701 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

702 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

707 
__BEGIN_NAMESPACE_STD


712 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

713 
__END_NAMESPACE_STD


716 #ifdef 
__USE_GNU


719 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

720 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

723 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


729 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

730 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

735 #i‚de‡
__COMPAR_FN_T


736 
	#__COMPAR_FN_T


	)

737 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

739 #ifdef 
__USE_GNU


740 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

743 #ifde‡
__USE_GNU


744 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

747 
__BEGIN_NAMESPACE_STD


750 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

751 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

752 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

756 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

757 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

758 #ifde‡
__USE_GNU


759 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

760 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

761 
	`__n⁄nuŒ
 ((1, 4));

766 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

767 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

768 
__END_NAMESPACE_STD


770 #ifde‡
__USE_ISOC99


771 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

772 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
__BEGIN_NAMESPACE_STD


780 
div_t
 
	$div
 (
__numî
, 
__díom
)

781 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

782 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

783 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

784 
__END_NAMESPACE_STD


786 #ifde‡
__USE_ISOC99


787 
__BEGIN_NAMESPACE_C99


788 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

789 
__díom
)

790 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

791 
__END_NAMESPACE_C99


795 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


802 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

803 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

808 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

815 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

818 #ifde‡
__USE_MISC


820 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

821 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

822 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

823 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

824 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

825 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

826 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

827 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

832 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

833 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

834 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

835 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

836 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

837 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

839 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

840 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

841 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

842 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

843 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

844 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

845 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

846 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

851 
__BEGIN_NAMESPACE_STD


854 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

857 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

858 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

861 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

865 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

866 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

868 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

869 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

870 
__THROW
;

871 
__END_NAMESPACE_STD


874 #ifde‡
__USE_SVID


879 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

883 #ifde‡
__USE_XOPEN_EXTENDED


890 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

891 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

892 **
__ª°ri˘
 
__vÆuï
)

893 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

897 #ifde‡
__USE_XOPEN


899 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

905 #ifde‡
__USE_XOPEN2K


907 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

910 #ifde‡
__USE_XOPEN


915 
	$gø¡±
 (
__fd
Ë
__THROW
;

919 
	$u∆ock±
 (
__fd
Ë
__THROW
;

924 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

927 #ifde‡
__USE_GNU


931 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

932 
__THROW
 
	`__n⁄nuŒ
 ((2));

935 
	`gë±
 ();

938 #ifde‡
__USE_BSD


942 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

943 
__THROW
 
	`__n⁄nuŒ
 ((1));

948 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


949 
	~<bôs/°dlib.h
>

951 #ifde‡
__LDBL_COMPAT


952 
	~<bôs/°dlib-ldbl.h
>

956 #unde‡
__√ed_mÆloc_™d_ˇŒoc


958 
__END_DECLS


	@/usr/include/string.h

23 #i‚def 
_STRING_H


24 
	#_STRING_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

37 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

41 
__BEGIN_NAMESPACE_STD


43 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

44 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

45 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

49 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

50 
__END_NAMESPACE_STD


55 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


56 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

57 
__c
, 
size_t
 
__n
)

58 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

62 
__BEGIN_NAMESPACE_STD


64 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

67 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

68 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

71 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


74 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

76 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

79 #ifde‡
__OPTIMIZE__


80 
__exã∫_Æways_ölöe
 *

81 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


83  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

86 
__exã∫_Æways_ölöe
 
__c⁄°
 *

87 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


89  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

92 
	}
}

94 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

95 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

97 
__END_NAMESPACE_STD


99 #ifde‡
__USE_GNU


102 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


103 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

105 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

106 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

108 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

109 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

113 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


114 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

116 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

119 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

120 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

125 
__BEGIN_NAMESPACE_STD


127 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

128 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

130 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

131 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

132 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

135 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

136 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

138 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

139 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

142 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

143 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

145 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

149 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

150 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

152 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

153 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((2));

155 
__END_NAMESPACE_STD


157 #ifde‡
__USE_XOPEN2K8


161 
	~<xloˇÀ.h
>

164 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

165 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

167 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

168 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

171 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


173 *
	$°rdup
 (
__c⁄°
 *
__s
)

174 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

180 #i‡
deföed
 
__USE_XOPEN2K8


181 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

182 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

185 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


187 
	#°rdu∑
(
s
) \

188 (
__exãnsi⁄__
 \

190 
__c⁄°
 *
__ﬁd
 = (
s
); \

191 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

192 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

193 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

194 
	}
}))

	)

197 
	#°∫du∑
(
s
, 
n
) \

198 (
__exãnsi⁄__
 \

200 
__c⁄°
 *
__ﬁd
 = (
s
); \

201 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

202 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

203 
__√w
[
__Àn
] = '\0'; \

204 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

205 }))

	)

208 
	g__BEGIN_NAMESPACE_STD


210 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


213 *
°rchr
 (*
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

215 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

218 #ifde‡
__OPTIMIZE__


219 
__exã∫_Æways_ölöe
 *

220 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


222  
__buûtö_°rchr
 (
__s
, 
__c
);

225 
__exã∫_Æways_ölöe
 
__c⁄°
 *

226 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


228  
__buûtö_°rchr
 (
__s
, 
__c
);

233 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

234 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


240 *
	`°ºchr
 (*
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

242 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

245 #ifde‡
__OPTIMIZE__


246 
__exã∫_Æways_ölöe
 *

247 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


249  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

252 
__exã∫_Æways_ölöe
 
__c⁄°
 *

253 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


255  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

258 
	}
}

260 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

261 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

263 
__END_NAMESPACE_STD


265 #ifde‡
__USE_GNU


268 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


269 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

271 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

274 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

275 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

279 
__BEGIN_NAMESPACE_STD


282 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

283 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

286 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

287 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


292 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

294 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 #ifde‡
__OPTIMIZE__


298 
__exã∫_Æways_ölöe
 *

299 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


301  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

304 
__exã∫_Æways_ölöe
 
__c⁄°
 *

305 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


307  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

310 
	}
}

312 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

313 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

316 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


319 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

321 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

322 
__c⁄°
 *
__√edÀ
)

323 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

325 #ifde‡
__OPTIMIZE__


326 
__exã∫_Æways_ölöe
 *

327 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


329  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

332 
__exã∫_Æways_ölöe
 
__c⁄°
 *

333 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


335  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

338 
	}
}

340 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

341 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

346 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

347 
__THROW
 
	`__n⁄nuŒ
 ((2));

348 
__END_NAMESPACE_STD


352 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

353 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

354 **
__ª°ri˘
 
__ßve_±r
)

355 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

356 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


357 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

358 **
__ª°ri˘
 
__ßve_±r
)

359 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

362 #ifde‡
__USE_GNU


364 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


365 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

367 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

368 
__c⁄°
 *
__√edÀ
)

369 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

371 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

372 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

376 #ifde‡
__USE_GNU


380 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

381 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

382 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

386 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

387 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

389 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

390 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

395 
__BEGIN_NAMESPACE_STD


397 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

398 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

399 
__END_NAMESPACE_STD


401 #ifdef 
__USE_XOPEN2K8


404 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

405 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

409 
__BEGIN_NAMESPACE_STD


411 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

412 
__END_NAMESPACE_STD


413 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


421 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


424 #ifde‡
__REDIRECT_NTH


425 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

426 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

427 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

429 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

430 
__THROW
 
	`__n⁄nuŒ
 ((2));

431 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

436 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

437 
__THROW
 
	`__n⁄nuŒ
 ((2));

441 #ifde‡
__USE_XOPEN2K8


443 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

449 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

451 #ifde‡
__USE_BSD


453 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

454 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

457 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

460 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

461 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

464 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


467 *
	`ödex
 (*
__s
, 
__c
)

468 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

469 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

472 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


473 
__exã∫_Æways_ölöe
 *

474 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


476  
	`__buûtö_ödex
 (
__s
, 
__c
);

479 
__exã∫_Æways_ölöe
 
__c⁄°
 *

480 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


482  
	`__buûtö_ödex
 (
__s
, 
__c
);

485 
	}
}

487 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

488 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

492 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


495 *
	`rödex
 (*
__s
, 
__c
)

496 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

497 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

500 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


501 
__exã∫_Æways_ölöe
 *

502 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


504  
	`__buûtö_rödex
 (
__s
, 
__c
);

507 
__exã∫_Æways_ölöe
 
__c⁄°
 *

508 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


510  
	`__buûtö_rödex
 (
__s
, 
__c
);

513 
	}
}

515 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

516 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

521 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

525 #ifdef 
__USE_GNU


526 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifde‡
__GNUC__


528 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

529 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

534 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

535 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

538 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

539 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

542 #ifdef 
__USE_GNU


545 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

546 
__loˇÀ_t
 
__loc
)

547 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

549 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

550 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

554 #ifdef 
__USE_BSD


557 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

558 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

559 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

562 #ifdef 
__USE_XOPEN2K8


564 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

567 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

575 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

578 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

582 #ifdef 
__USE_GNU


584 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

585 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

588 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 #i‚de‡
ba£«me


598 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


599 "C++" *
	$ba£«me
 (*
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

601 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

604 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

610 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

611 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

612 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


632 
	~<bôs/°rög.h
>

635 
	~<bôs/°rög2.h
>

638 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


640 
	~<bôs/°rög3.h
>

644 
__END_DECLS


	@/usr/include/sys/ioctl.h

19 #i‚def 
_SYS_IOCTL_H


20 
	#_SYS_IOCTL_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


27 
	~<bôs/io˘ls.h
>

30 
	~<bôs/io˘l-ty≥s.h
>

37 
	~<sys/âydeÁu…s.h
>

42 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

44 
__END_DECLS


	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/socket.h

21 #i‚def 
_SYS_SOCKET_H


22 
	#_SYS_SOCKET_H
 1

	)

24 
	~<„©uªs.h
>

26 
	g__BEGIN_DECLS


28 
	~<sys/uio.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

31 #ifde‡
__USE_GNU


33 
	~<bôs/sig£t.h
>

40 
	~<bôs/sockë.h
>

42 #ifde‡
__USE_BSD


45 
	sosockaddr


47 
	mß_Ámûy
;

48 
	mß_d©a
[14];

56 
	mSHUT_RD
 = 0,

57 
	#SHUT_RD
 
SHUT_RD


	)

58 
	mSHUT_WR
,

59 
	#SHUT_WR
 
SHUT_WR


	)

60 
	mSHUT_RDWR


61 
	#SHUT_RDWR
 
SHUT_RDWR


	)

70 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


71 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

72 
	#__CONST_SOCKADDR_ARG
 
__c⁄°
 
sockaddr
 *

	)

76 
	#__SOCKADDR_ALLTYPES
 \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

85 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

86 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

87 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

88 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

89 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

91 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

92 uni⁄ { 
	m__SOCKADDR_ALLTYPES


93 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

94 #unde‡
__SOCKADDR_ONETYPE


95 
	#__SOCKADDR_ONETYPE
(
ty≥
Ë
__c⁄°
 ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

96 uni⁄ { 
	m__SOCKADDR_ALLTYPES


97 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

98 #unde‡
__SOCKADDR_ONETYPE


105 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

111 
	$sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

112 
__fds
[2]Ë
__THROW
;

115 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

116 
__THROW
;

119 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

120 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

129 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

133 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

134 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

141 
ssize_t
 
	`£nd
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
, 
__Êags
);

148 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

155 
ssize_t
 
	`£ndto
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

156 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

157 
sockÀn_t
 
__addr_Àn
);

166 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

167 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

168 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

176 
ssize_t
 
	`£ndmsg
 (
__fd
, 
__c⁄°
 
msghdr
 *
__mesßge
,

177 
__Êags
);

184 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

190 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

191 *
__ª°ri˘
 
__›tvÆ
,

192 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

197 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

198 
__c⁄°
 *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

204 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

214 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

215 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

217 #ifde‡
__USE_GNU


222 
	`ac˚±4
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

223 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
, 
__Êags
);

232 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

235 #ifde‡
__USE_XOPEN2K


237 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

241 #ifde‡
__USE_MISC


245 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

250 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


251 
	~<bôs/sockë2.h
>

254 
__END_DECLS


	@/usr/include/sys/stat.h

24 #i‚def 
_SYS_STAT_H


25 
	#_SYS_STAT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	~<bôs/ty≥s.h
>

31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

32 || 
deföed
 
	g__USE_ATFILE


33 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_time_t


	)

36 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


37 
	#__√ed_time•ec


	)

39 
	~<time.h
>

42 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


45 #i‚de‡
__dev_t_deföed


46 
__dev_t
 
	tdev_t
;

47 
	#__dev_t_deföed


	)

50 #i‚de‡
__gid_t_deföed


51 
__gid_t
 
	tgid_t
;

52 
	#__gid_t_deföed


	)

55 #i‚de‡
__öo_t_deföed


56 #i‚de‡
__USE_FILE_OFFSET64


57 
__öo_t
 
	töo_t
;

59 
__öo64_t
 
	töo_t
;

61 
	#__öo_t_deföed


	)

64 #i‚de‡
__mode_t_deföed


65 
__mode_t
 
	tmode_t
;

66 
	#__mode_t_deföed


	)

69 #i‚de‡
__∆ök_t_deföed


70 
__∆ök_t
 
	t∆ök_t
;

71 
	#__∆ök_t_deföed


	)

74 #i‚de‡
__off_t_deföed


75 #i‚de‡
__USE_FILE_OFFSET64


76 
__off_t
 
	toff_t
;

78 
__off64_t
 
	toff_t
;

80 
	#__off_t_deföed


	)

83 #i‚de‡
__uid_t_deföed


84 
__uid_t
 
	tuid_t
;

85 
	#__uid_t_deföed


	)

89 #ifde‡
__USE_UNIX98


90 #i‚de‡
__blk˙t_t_deföed


91 #i‚de‡
__USE_FILE_OFFSET64


92 
__blk˙t_t
 
	tblk˙t_t
;

94 
__blk˙t64_t
 
	tblk˙t_t
;

96 
	#__blk˙t_t_deföed


	)

99 #i‚de‡
__blksize_t_deföed


100 
__blksize_t
 
	tblksize_t
;

101 
	#__blksize_t_deföed


	)

105 
	g__BEGIN_DECLS


107 
	~<bôs/°©.h
>

109 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


110 
	#S_IFMT
 
__S_IFMT


	)

111 
	#S_IFDIR
 
__S_IFDIR


	)

112 
	#S_IFCHR
 
__S_IFCHR


	)

113 
	#S_IFBLK
 
__S_IFBLK


	)

114 
	#S_IFREG
 
__S_IFREG


	)

115 #ifde‡
__S_IFIFO


116 
	#S_IFIFO
 
__S_IFIFO


	)

118 #ifde‡
__S_IFLNK


119 
	#S_IFLNK
 
__S_IFLNK


	)

121 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

122 && 
deföed
 
	g__S_IFSOCK


123 
	#S_IFSOCK
 
__S_IFSOCK


	)

129 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

131 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

132 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

133 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

134 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

135 #ifde‡
__S_IFIFO


136 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

138 #ifde‡
__S_IFLNK


139 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

142 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


143 
	#S_ISLNK
(
mode
Ë0

	)

146 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
) \

147 && 
deföed
 
	g__S_IFSOCK


148 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

155 #ifdef 
__USE_POSIX199309


156 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

157 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

158 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

164 
	#S_ISUID
 
__S_ISUID


	)

165 
	#S_ISGID
 
__S_ISGID


	)

167 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


169 
	#S_ISVTX
 
__S_ISVTX


	)

172 
	#S_IRUSR
 
__S_IREAD


	)

173 
	#S_IWUSR
 
__S_IWRITE


	)

174 
	#S_IXUSR
 
__S_IEXEC


	)

176 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

178 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


179 
	#S_IREAD
 
S_IRUSR


	)

180 
	#S_IWRITE
 
S_IWUSR


	)

181 
	#S_IEXEC
 
S_IXUSR


	)

184 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

185 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

186 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

188 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

190 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

191 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

192 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

194 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

197 #ifdef 
__USE_BSD


199 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

200 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

201 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

203 
	#S_BLKSIZE
 512

	)

207 #i‚de‡
__USE_FILE_OFFSET64


209 
	$°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

210 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

214 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

216 #ifde‡
__REDIRECT_NTH


217 
	`__REDIRECT_NTH
 (
°©
, (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

218 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

219 
	`__n⁄nuŒ
 ((1, 2));

220 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

221 
	`__n⁄nuŒ
 ((2));

223 
	#°©
 
°©64


	)

224 
	#f°©
 
f°©64


	)

227 #ifde‡
__USE_LARGEFILE64


228 
	$°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

229 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

230 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

233 #ifde‡
__USE_ATFILE


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$f°©©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

239 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

240 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

242 #ifde‡
__REDIRECT_NTH


243 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

244 
°©
 *
__ª°ri˘
 
__buf
,

245 
__Êag
),

246 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

248 
	#f°©©
 
f°©©64


	)

252 #ifde‡
__USE_LARGEFILE64


253 
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fûe
,

254 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

255 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

259 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


260 #i‚de‡
__USE_FILE_OFFSET64


263 
	$l°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

264 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

266 #ifde‡
__REDIRECT_NTH


267 
	`__REDIRECT_NTH
 (
l°©
,

268 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

269 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

270 
	`__n⁄nuŒ
 ((1, 2));

272 
	#l°©
 
l°©64


	)

275 #ifde‡
__USE_LARGEFILE64


276 
	$l°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

277 
°©64
 *
__ª°ri˘
 
__buf
)

278 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

284 
	$chmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

285 
__THROW
 
	`__n⁄nuŒ
 ((1));

287 #ifde‡
__USE_BSD


291 
	$lchmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


297 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

300 #ifde‡
__USE_ATFILE


303 
	$fchmod©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
,

304 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

312 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

314 #ifdef 
__USE_GNU


317 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

321 
	$mkdú
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

322 
__THROW
 
	`__n⁄nuŒ
 ((1));

324 #ifde‡
__USE_ATFILE


328 
	$mkdú©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

329 
__THROW
 
	`__n⁄nuŒ
 ((2));

335 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


336 
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

337 
__THROW
 
	`__n⁄nuŒ
 ((1));

339 #ifde‡
__USE_ATFILE


343 
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

344 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
	$mkfifo
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

351 
__THROW
 
	`__n⁄nuŒ
 ((1));

353 #ifde‡
__USE_ATFILE


357 
	$mkfifﬂt
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

361 #ifde‡
__USE_ATFILE


364 
	$utimíßt
 (
__fd
, 
__c⁄°
 *
__∑th
,

365 
__c⁄°
 
time•ec
 
__times
[2],

366 
__Êags
)

367 
__THROW
 
	`__n⁄nuŒ
 ((2));

370 #ifde‡
__USE_XOPEN2K8


372 
	$futimís
 (
__fd
, 
__c⁄°
 
time•ec
 
__times
[2]Ë
__THROW
;

390 #i‚de‡
_STAT_VER


391 
	#_STAT_VER
 0

	)

393 #i‚de‡
_MKNOD_VER


394 
	#_MKNOD_VER
 0

	)

398 #i‚de‡
__USE_FILE_OFFSET64


399 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

400 
__THROW
 
	`__n⁄nuŒ
 ((3));

401 
	$__x°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

402 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

403 
	$__lx°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

404 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

405 
	$__fx°©©
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

406 
°©
 *
__°©_buf
, 
__Êag
)

407 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

409 #ifde‡
__REDIRECT_NTH


410 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

411 
°©
 *
__°©_buf
), 
__fx°©64
)

412 
	`__n⁄nuŒ
 ((3));

413 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

414 
°©
 *
__°©_buf
), 
__x°©64
)

415 
	`__n⁄nuŒ
 ((2, 3));

416 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

417 
°©
 *
__°©_buf
), 
__lx°©64
)

418 
	`__n⁄nuŒ
 ((2, 3));

419 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

420 
__c⁄°
 *
__fûíame
,

421 
°©
 *
__°©_buf
, 
__Êag
),

422 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

425 
	#__fx°©
 
__fx°©64


	)

426 
	#__x°©
 
__x°©64


	)

427 
	#__lx°©
 
__lx°©64


	)

431 #ifde‡
__USE_LARGEFILE64


432 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

433 
__THROW
 
	`__n⁄nuŒ
 ((3));

434 
	$__x°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

435 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

436 
	$__lx°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

437 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

438 
	$__fx°©©64
 (
__vî
, 
__fûdes
, 
__c⁄°
 *
__fûíame
,

439 
°©64
 *
__°©_buf
, 
__Êag
)

440 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

442 
	$__xmknod
 (
__vî
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

443 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$__xmknod©
 (
__vî
, 
__fd
, 
__c⁄°
 *
__∑th
,

446 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

447 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

449 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


452 
__exã∫_ölöe
 

453 
	`__NTH
 (
	$°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

455  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

456 
	}
}

458 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


459 
__exã∫_ölöe
 

460 
__NTH
 (
	$l°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

462  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

463 
	}
}

466 
__exã∫_ölöe
 

467 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

469  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

470 
	}
}

472 #ifde‡
__USE_ATFILE


473 
__exã∫_ölöe
 

474 
__NTH
 (
	$f°©©
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©
 *
__°©buf
,

475 
__Êag
))

477  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

478 
	}
}

481 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


482 
__exã∫_ölöe
 

483 
__NTH
 (
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

485  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

486 
	}
}

489 #ifde‡
__USE_ATFILE


490 
__exã∫_ölöe
 

491 
__NTH
 (
	$mknod©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

492 
__dev_t
 
__dev
))

494  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

495 
	}
}

498 #i‡
deföed
 
__USE_LARGEFILE64
 \

499 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

500 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

501 
__exã∫_ölöe
 

502 
__NTH
 (
	$°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

504  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

505 
	}
}

507 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


508 
__exã∫_ölöe
 

509 
__NTH
 (
	$l°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

511  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

512 
	}
}

515 
__exã∫_ölöe
 

516 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

518  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

519 
	}
}

521 #ifde‡
__USE_ATFILE


522 
__exã∫_ölöe
 

523 
__NTH
 (
	$f°©©64
 (
__fd
, 
__c⁄°
 *
__fûíame
, 
°©64
 *
__°©buf
,

524 
__Êag
))

526  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

527 
	}
}

534 
	g__END_DECLS


	@/usr/include/sys/time.h

20 #i‚de‡
_SYS_TIME_H


21 
	#_SYS_TIME_H
 1

	)

23 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

26 
	#__√ed_time_t


	)

27 
	~<time.h
>

28 
	#__√ed_timevÆ


	)

29 
	~<bôs/time.h
>

31 
	~<sys/£À˘.h
>

33 #i‚de‡
__su£c⁄ds_t_deföed


34 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

35 
	#__su£c⁄ds_t_deföed


	)

39 
	g__BEGIN_DECLS


41 #ifde‡
__USE_GNU


43 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

44 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

45 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

46 }

	)

47 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

48 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

49 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

50 }

	)

54 #ifde‡
__USE_BSD


57 
	stimez⁄e


59 
	mtz_möuãswe°
;

60 
	mtz_d°time
;

63 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

65 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

73 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

74 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

76 #ifde‡
__USE_BSD


79 
	$£âimeofday
 (
__c⁄°
 
timevÆ
 *
__tv
,

80 
__c⁄°
 
timez⁄e
 *
__tz
)

81 
__THROW
 
	`__n⁄nuŒ
 ((1));

87 
	$adjtime
 (
__c⁄°
 
timevÆ
 *
__dñè
,

88 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

93 
	e__ôimî_which


96 
ITIMER_REAL
 = 0,

97 
	#ITIMER_REAL
 
ITIMER_REAL


	)

99 
ITIMER_VIRTUAL
 = 1,

100 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

103 
ITIMER_PROF
 = 2

104 
	#ITIMER_PROF
 
ITIMER_PROF


	)

109 
	sôimîvÆ


112 
timevÆ
 
ô_öãrvÆ
;

114 
timevÆ
 
ô_vÆue
;

117 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


120 
__ôimî_which
 
	t__ôimî_which_t
;

122 
	t__ôimî_which_t
;

127 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

128 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

133 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

134 
__c⁄°
 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

135 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

140 
	$utimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

141 
__THROW
 
	`__n⁄nuŒ
 ((1));

143 #ifde‡
__USE_BSD


145 
	$lutimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

146 
__THROW
 
	`__n⁄nuŒ
 ((1));

149 
	$futimes
 (
__fd
, 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

152 #ifde‡
__USE_GNU


156 
	$futimeßt
 (
__fd
, 
__c⁄°
 *
__fûe
,

157 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

161 #ifde‡
__USE_BSD


164 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

165 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

166 
	#timîcmp
(
a
, 
b
, 
CMP
) \

167 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

168 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

169 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

170 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

172 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

173 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

174 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

176 ++(
ªsu…
)->
tv_£c
; \

177 (
ªsu…
)->
tv_u£c
 -= 1000000; \

179 
	}
} 0)

	)

180 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

182 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

183 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

184 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

185 --(
ªsu…
)->
tv_£c
; \

186 (
ªsu…
)->
tv_u£c
 += 1000000; \

188 } 0)

	)

191 
	g__END_DECLS


	@/usr/include/sys/types.h

24 #i‚def 
_SYS_TYPES_H


25 
	#_SYS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

33 #ifdef 
__USE_BSD


34 #i‚de‡
__u_ch¨_deföed


35 
__u_ch¨
 
	tu_ch¨
;

36 
__u_sh‹t
 
	tu_sh‹t
;

37 
__u_öt
 
	tu_öt
;

38 
__u_l⁄g
 
	tu_l⁄g
;

39 
__quad_t
 
	tquad_t
;

40 
__u_quad_t
 
	tu_quad_t
;

41 
__fsid_t
 
	tfsid_t
;

42 
	#__u_ch¨_deföed


	)

46 
__loff_t
 
	tloff_t
;

48 #i‚de‡
__öo_t_deföed


49 #i‚de‡
__USE_FILE_OFFSET64


50 
__öo_t
 
	töo_t
;

52 
__öo64_t
 
	töo_t
;

54 
	#__öo_t_deföed


	)

56 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


57 
__öo64_t
 
	töo64_t
;

58 
	#__öo64_t_deföed


	)

61 #i‚de‡
__dev_t_deföed


62 
__dev_t
 
	tdev_t
;

63 
	#__dev_t_deföed


	)

66 #i‚de‡
__gid_t_deföed


67 
__gid_t
 
	tgid_t
;

68 
	#__gid_t_deföed


	)

71 #i‚de‡
__mode_t_deföed


72 
__mode_t
 
	tmode_t
;

73 
	#__mode_t_deföed


	)

76 #i‚de‡
__∆ök_t_deföed


77 
__∆ök_t
 
	t∆ök_t
;

78 
	#__∆ök_t_deföed


	)

81 #i‚de‡
__uid_t_deföed


82 
__uid_t
 
	tuid_t
;

83 
	#__uid_t_deföed


	)

86 #i‚de‡
__off_t_deföed


87 #i‚de‡
__USE_FILE_OFFSET64


88 
__off_t
 
	toff_t
;

90 
__off64_t
 
	toff_t
;

92 
	#__off_t_deföed


	)

94 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


95 
__off64_t
 
	toff64_t
;

96 
	#__off64_t_deföed


	)

99 #i‚de‡
__pid_t_deföed


100 
__pid_t
 
	tpid_t
;

101 
	#__pid_t_deföed


	)

104 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #ifde‡
__USE_XOPEN


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__WORDSIZE
 == 64

167 
	töt64_t
;

168 #ñi‡
__GLIBC_HAVE_LONG_LONG


169 
__exãnsi⁄__
 
	töt64_t
;

174 
	tu_öt8_t
;

175 
	tu_öt16_t
;

176 
	tu_öt32_t
;

177 #i‡
__WORDSIZE
 == 64

178 
	tu_öt64_t
;

179 #ñi‡
__GLIBC_HAVE_LONG_LONG


180 
__exãnsi⁄__
 
	tu_öt64_t
;

183 
	tªgi°î_t
;

188 
	#__ötN_t
(
N
, 
MODE
) \

189 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

190 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

191 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

193 #i‚de‡
	t__öt8_t_deföed


194 
	t__öt8_t_deföed


	)

195 
	t__ötN_t
 (8, 
	t__QI__
);

196 
__ötN_t
 (16, 
__HI__
);

197 
__ötN_t
 (32, 
__SI__
);

198 
__ötN_t
 (64, 
__DI__
);

201 
__u_ötN_t
 (8, 
__QI__
);

202 
__u_ötN_t
 (16, 
__HI__
);

203 
__u_ötN_t
 (32, 
__SI__
);

204 
__u_ötN_t
 (64, 
__DI__
);

206 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

212 
	#__BIT_TYPES_DEFINED__
 1

	)

215 #ifdef 
__USE_BSD


217 
	~<ídün.h
>

220 
	~<sys/£À˘.h
>

223 
	~<sys/sysma¸os.h
>

227 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/sys/uio.h

19 #i‚de‡
_SYS_UIO_H


20 
	#_SYS_UIO_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<sys/ty≥s.h
>

26 
	g__BEGIN_DECLS


29 
	~<bôs/uio.h
>

40 
ssize_t
 
	$ªadv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
)

41 
__wur
;

51 
ssize_t
 
	$wrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
)

52 
__wur
;

55 #ifde‡
__USE_BSD


56 #i‚de‡
__USE_FILE_OFFSET64


66 
ssize_t
 
	$¥ódv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

67 
__off_t
 
__off£t
Ë
__wur
;

78 
ssize_t
 
	$pwrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

79 
__off_t
 
__off£t
Ë
__wur
;

81 #ifde‡
__REDIRECT


82 
ssize_t
 
	`__REDIRECT
 (
¥ódv
, (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
,

83 
__cou¡
, 
__off64_t
 
__off£t
),

84 
¥ódv64
Ë
__wur
;

85 
ssize_t
 
	`__REDIRECT
 (
pwrôev
, (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
,

86 
__cou¡
, 
__off64_t
 
__off£t
),

87 
pwrôev64
Ë
__wur
;

89 
	#¥ódv
 
¥ódv64


	)

90 
	#pwrôev
 
pwrôev64


	)

94 #ifde‡
__USE_LARGEFILE64


104 
ssize_t
 
	$¥ódv64
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

105 
__off64_t
 
__off£t
Ë
__wur
;

116 
ssize_t
 
	$pwrôev64
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
,

117 
__off64_t
 
__off£t
Ë
__wur
;

121 
__END_DECLS


	@/usr/include/syslog.h

1 
	~<sys/sy¶og.h
>

	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #ifde‡
__USE_UNIX98


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

317 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


319 
	#L_SET
 
SEEK_SET


	)

320 
	#L_INCR
 
SEEK_CUR


	)

321 
	#L_XTND
 
SEEK_END


	)

330 #i‚de‡
__USE_FILE_OFFSET64


331 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

333 #ifde‡
__REDIRECT_NTH


334 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

335 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

336 
l£ek64
);

338 
	#l£ek
 
l£ek64


	)

341 #ifde‡
__USE_LARGEFILE64


342 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

343 
__THROW
;

350 
	`˛o£
 (
__fd
);

357 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

363 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

365 #ifde‡
__USE_UNIX98


366 #i‚de‡
__USE_FILE_OFFSET64


373 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

374 
__off_t
 
__off£t
Ë
__wur
;

381 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

382 
__off_t
 
__off£t
Ë
__wur
;

384 #ifde‡
__REDIRECT


385 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

386 
__off64_t
 
__off£t
),

387 
¥ód64
Ë
__wur
;

388 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

389 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

390 
pwrôe64
Ë
__wur
;

392 
	#¥ód
 
¥ód64


	)

393 
	#pwrôe
 
pwrôe64


	)

397 #ifde‡
__USE_LARGEFILE64


401 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

402 
__off64_t
 
__off£t
Ë
__wur
;

405 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

406 
__off64_t
 
__off£t
Ë
__wur
;

414 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

416 #ifde‡
__USE_GNU


419 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

429 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

441 
	`¶ìp
 (
__£c⁄ds
);

443 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


448 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

449 
__THROW
;

456 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

465 
	`∑u£
 ();

469 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

470 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

472 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


474 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

479 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

480 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

484 #ifde‡
__USE_ATFILE


487 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

488 
__gid_t
 
__group
, 
__Êag
)

489 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

493 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

495 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


497 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

507 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

509 #ifdef 
__USE_GNU


513 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

516 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


520 *
	$gëwd
 (*
__buf
)

521 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

526 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

529 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

531 #ifde‡
__USE_GNU


534 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

538 **
__ívú⁄
;

539 #ifde‡
__USE_GNU


540 **
ívú⁄
;

546 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

547 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

549 #ifde‡
__USE_XOPEN2K8


552 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

553 
__THROW
;

558 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

559 
__THROW
 
	`__n⁄nuŒ
 ((1));

563 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

564 
__THROW
 
	`__n⁄nuŒ
 ((1));

568 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1));

573 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

574 
__THROW
 
	`__n⁄nuŒ
 ((1));

579 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

580 
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #ifde‡
__USE_GNU


585 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

586 *
__c⁄°
 
__ívp
[])

587 
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


593 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

598 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

604 
	~<bôs/c⁄‚ame.h
>

607 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

608 
__THROW
 
	`__n⁄nuŒ
 ((1));

611 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

614 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

616 #ifdef 
__USE_POSIX2


618 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

623 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

626 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

630 #i‚de‡
__FAVOR_BSD


631 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

633 #ifde‡
__REDIRECT_NTH


634 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

636 
	#gëpgΩ
 
__gëpgid


	)

641 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

642 #ifde‡
__USE_XOPEN_EXTENDED


643 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

650 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

652 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


663 #i‚de‡
__FAVOR_BSD


667 
	$£çgΩ
 (Ë
__THROW
;

672 #ifde‡
__REDIRECT_NTH


673 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

675 
	#£çgΩ
 
£çgid


	)

684 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

686 #ifde‡
__USE_XOPEN_EXTENDED


688 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

692 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

695 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

698 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

701 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

706 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

708 #ifdef 
__USE_GNU


710 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

717 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

719 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


727 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

734 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

736 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


739 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

742 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


744 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

747 #ifde‡
__USE_GNU


750 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

751 
__THROW
;

755 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

756 
__THROW
;

760 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

761 
__THROW
;

765 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

766 
__THROW
;

773 
__pid_t
 
	$f‹k
 (Ë
__THROW
;

775 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


780 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

786 *
	$ây«me
 (
__fd
Ë
__THROW
;

790 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

791 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

795 
	$ißây
 (
__fd
Ë
__THROW
;

797 #i‡
deföed
 
__USE_BSD
 \

798 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

801 
	$ây¶Ÿ
 (Ë
__THROW
;

806 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

809 #ifde‡
__USE_ATFILE


812 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

813 
__c⁄°
 *
__to
, 
__Êags
)

814 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

817 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


819 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

820 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

825 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

826 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

827 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

830 #ifde‡
__USE_ATFILE


832 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

833 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

836 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

837 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

838 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

842 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_ATFILE


846 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

847 
__THROW
 
	`__n⁄nuŒ
 ((2));

851 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

855 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

858 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

865 *
	`gëlogö
 ();

866 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


873 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

876 #ifdef 
__USE_BSD


878 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

882 #ifdef 
__USE_POSIX2


886 
	#__√ed_gë›t


	)

887 
	~<gë›t.h
>

891 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


895 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

899 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

902 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

903 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

907 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

913 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

914 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

915 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

916 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

922 
	$vh™gup
 (Ë
__THROW
;

925 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

933 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

934 
size_t
 
__off£t
, 
__sˇÀ
)

935 
__THROW
 
	`__n⁄nuŒ
 ((1));

941 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

945 *
	$gëu£rshñl
 (Ë
__THROW
;

946 
	$ídu£rshñl
 (Ë
__THROW
;

947 
	$£tu£rshñl
 (Ë
__THROW
;

953 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

957 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

960 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

964 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

968 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


973 
	`fsync
 (
__fd
);

977 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


980 
	`gëho°id
 ();

983 
	$sync
 (Ë
__THROW
;

988 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

993 
	$gëdèbÀsize
 (Ë
__THROW
;

997 #i‚de‡
__USE_FILE_OFFSET64


998 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

999 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1001 #ifde‡
__REDIRECT_NTH


1002 
	`__REDIRECT_NTH
 (
åunˇã
,

1003 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1004 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1006 
	#åunˇã
 
åunˇã64


	)

1009 #ifde‡
__USE_LARGEFILE64


1010 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1011 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1016 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1019 #i‚de‡
__USE_FILE_OFFSET64


1020 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1022 #ifde‡
__REDIRECT_NTH


1023 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1024 
·runˇã64
Ë
__wur
;

1026 
	#·runˇã
 
·runˇã64


	)

1029 #ifde‡
__USE_LARGEFILE64


1030 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1036 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1040 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1046 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1050 #ifde‡
__USE_MISC


1061 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1066 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1078 
	#F_ULOCK
 0

	)

1079 
	#F_LOCK
 1

	)

1080 
	#F_TLOCK
 2

	)

1081 
	#F_TEST
 3

	)

1083 #i‚de‡
__USE_FILE_OFFSET64


1084 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1086 #ifde‡
__REDIRECT


1087 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1088 
lockf64
Ë
__wur
;

1090 
	#lockf
 
lockf64


	)

1093 #ifde‡
__USE_LARGEFILE64


1094 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1099 #ifde‡
__USE_GNU


1104 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1105 (
__exãnsi⁄__
 \

1106 ({ 
__ªsu…
; \

1107 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1108 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1109 
__ªsu…
; 
	}
}))

	)

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1121 #ifdef 
__USE_XOPEN


1123 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1124 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1135 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1136 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1142 #ifde‡
__USE_XOPEN


1144 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1149 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1150 
	~<bôs/uni°d.h
>

1153 
__END_DECLS


	@miniupnpc/miniupnpc.h

8 #i‚de‡
__MINIUPNPC_H__


9 
	#__MINIUPNPC_H__


	)

11 
	~"de˛•ec.h
"

12 
	~"igd_desc_∑r£.h
"

14 #ifde‡
__˝lu•lus


19 
	sUPNP¨g
 { c⁄° * 
ñt
; c⁄° * 
vÆ
; };

21 
sim∂eUPnPcomm™d
(, const *, const *,

22 c⁄° *, 
UPNP¨g
 *,

25 
	sUPNPDev
 {

26 
UPNPDev
 * 
pNext
;

27 * 
descURL
;

28 * 
°
;

29 
buf„r
[2];

45 
LIBSPEC
 
UPNPDev
 * 
u≤pDiscovî
(
dñay
, c⁄° * 
mu…iˇ°if
,

46 c⁄° * 
möissdpdsock
, 
ßmï‹t
);

49 
LIBSPEC
 
‰ìUPNPDevli°
(
UPNPDev
 * 
devli°
);

54 
LIBSPEC
 
∑r£roŸdesc
(c⁄° *, , 
IGDd©as
 *);

61 
	sUPNPUæs
 {

62 * 
c⁄åﬁURL
;

63 * 
ùc⁄descURL
;

64 * 
c⁄åﬁURL_CIF
;

79 
LIBSPEC
 

80 
UPNP_GëVÆidIGD
(
UPNPDev
 * 
devli°
,

81 
UPNPUæs
 * 
uæs
,

82 
IGDd©as
 * 
d©a
,

83 * 
œ«ddr
, 
œ«ddæí
);

90 
LIBSPEC
 

91 
UPNP_GëIGDFromUæ
(c⁄° * 
roŸdescuæ
,

92 
UPNPUæs
 * 
uæs
,

93 
IGDd©as
 * 
d©a
,

94 * 
œ«ddr
, 
œ«ddæí
);

96 
LIBSPEC
 
GëUPNPUæs
(
UPNPUæs
 *, 
IGDd©as
 *, const *);

98 
LIBSPEC
 
FªeUPNPUæs
(
UPNPUæs
 *);

103 
Re˚iveD©a
(
sockë
, * 
d©a
, 
Àngth
, 
timeout
);

106 
LIBSPEC
 
UPNPIGD_IsC⁄√˘ed
(
UPNPUæs
 *, 
IGDd©as
 *);

109 #ifde‡
__˝lu•lus


	@miniupnpc/miniwget.h

8 #i‚de‡
__MINIWGET_H__


9 
	#__MINIWGET_H__


	)

11 
	~"de˛•ec.h
"

13 #ifde‡
__˝lu•lus


17 
LIBSPEC
 * 
möiwgë
(const *, *);

19 
LIBSPEC
 * 
möiwgë_gëaddr
(const *, *, *, );

21 
∑r£URL
(const *, *, *, * *);

23 #ifde‡
__˝lu•lus


	@miniupnpc/upnpcommands.h

7 #i‚de‡
__UPNPCOMMANDS_H__


8 
	#__UPNPCOMMANDS_H__


	)

10 
	~"u≤¥ïly∑r£.h
"

11 
	~"de˛•ec.h
"

14 
	#UPNPCOMMAND_SUCCESS
 (0)

	)

15 
	#UPNPCOMMAND_UNKNOWN_ERROR
 (-1)

	)

16 
	#UPNPCOMMAND_INVALID_ARGS
 (-2)

	)

17 
	#UPNPCOMMAND_HTTP_ERROR
 (-3)

	)

19 #ifde‡
__˝lu•lus


23 #i‡(
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

24 
	#UNSIGNED_INTEGER
 

	)

25 
	#STRTOUI
 
°πouŒ


	)

27 
	#UNSIGNED_INTEGER
 

	)

28 
	#STRTOUI
 
°πoul


	)

31 
LIBSPEC
 
UNSIGNED_INTEGER


32 
UPNP_GëTŸÆByãsSít
(c⁄° * 
c⁄åﬁURL
,

33 c⁄° * 
£rvi˚ty≥
);

35 
LIBSPEC
 
UNSIGNED_INTEGER


36 
UPNP_GëTŸÆByãsRe˚ived
(c⁄° * 
c⁄åﬁURL
,

37 c⁄° * 
£rvi˚ty≥
);

39 
LIBSPEC
 
UNSIGNED_INTEGER


40 
UPNP_GëTŸÆPackësSít
(c⁄° * 
c⁄åﬁURL
,

41 c⁄° * 
£rvi˚ty≥
);

43 
LIBSPEC
 
UNSIGNED_INTEGER


44 
UPNP_GëTŸÆPackësRe˚ived
(c⁄° * 
c⁄åﬁURL
,

45 c⁄° * 
£rvi˚ty≥
);

52 
LIBSPEC
 

53 
UPNP_GëSètusInfo
(c⁄° * 
c⁄åﬁURL
,

54 c⁄° * 
£rvi˚ty≥
,

55 * 
°©us
,

56 * 
u±ime
,

57 * 
œ°c⁄√º‹
);

64 
LIBSPEC
 

65 
UPNP_GëC⁄√˘i⁄Ty≥Info
(c⁄° * 
c⁄åﬁURL
,

66 c⁄° * 
£rvi˚ty≥
,

67 * 
c⁄√˘i⁄Ty≥
);

80 
LIBSPEC
 

81 
UPNP_GëExã∫ÆIPAddªss
(c⁄° * 
c⁄åﬁURL
,

82 c⁄° * 
£rvi˚ty≥
,

83 * 
extIpAdd
);

91 
LIBSPEC
 

92 
UPNP_GëLökLayîMaxBôR©es
(c⁄° * 
c⁄åﬁURL
,

93 c⁄° * 
£rvi˚ty≥
,

94 * 
bôøãDown
,

95 * 
bôøãUp
);

122 
LIBSPEC
 

123 
UPNP_AddP‹tM≠pög
(c⁄° * 
c⁄åﬁURL
, c⁄° * 
£rvi˚ty≥
,

124 c⁄° * 
extP‹t
,

125 c⁄° * 
öP‹t
,

126 c⁄° * 
öClõ¡
,

127 c⁄° * 
desc
,

128 c⁄° * 
¥Ÿo
,

129 c⁄° * 
ªmŸeHo°
);

141 
LIBSPEC
 

142 
UPNP_DñëeP‹tM≠pög
(c⁄° * 
c⁄åﬁURL
, c⁄° * 
£rvi˚ty≥
,

143 c⁄° * 
extP‹t
, c⁄° * 
¥Ÿo
,

144 c⁄° * 
ªmŸeHo°
);

148 
LIBSPEC
 

149 
UPNP_GëP‹tM≠pögNumbîOfE¡rõs
(c⁄° * 
c⁄åﬁURL
, c⁄° * 
£rvi˚ty≥
, * 
num
);

158 
LIBSPEC
 

159 
UPNP_GëS≥cificP‹tM≠pögE¡ry
(c⁄° * 
c⁄åﬁURL
,

160 c⁄° * 
£rvi˚ty≥
,

161 c⁄° * 
extP‹t
,

162 c⁄° * 
¥Ÿo
,

163 * 
ötClõ¡
,

164 * 
ötP‹t
);

176 
LIBSPEC
 

177 
UPNP_GëGíîicP‹tM≠pögE¡ry
(c⁄° * 
c⁄åﬁURL
,

178 c⁄° * 
£rvi˚ty≥
,

179 c⁄° * 
ödex
,

180 * 
extP‹t
,

181 * 
ötClõ¡
,

182 * 
ötP‹t
,

183 * 
¥Ÿocﬁ
,

184 * 
desc
,

185 * 
íabÀd
,

186 * 
rHo°
,

187 * 
duøti⁄
);

189 #ifde‡
__˝lu•lus


	@stunc/det_nat.h

1 #i‚de‡
__dë_√t_h__


2 
	#__dë_√t_h__


	)

4 #ifde‡
__˝lu•lus


12 
dëe˘_«t
(c⁄° *
°un_£rvî
);

14 #ifde‡
__˝lu•lus


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/arpa/nameser.h

52 #i‚de‡
_ARPA_NAMESER_H_


53 
	#_ARPA_NAMESER_H_


	)

57 
	#BIND_4_COMPAT


	)

59 
	~<sys/∑øm.h
>

60 #i‡(!
deföed
(
BSD
)) || (BSD < 199306)

61 
	~<sys/bôy≥s.h
>

63 
	~<sys/ty≥s.h
>

65 
	~<sys/cdefs.h
>

75 
	#__NAMESER
 19991006

	)

79 
	#NS_PACKETSZ
 512

	)

80 
	#NS_MAXDNAME
 1025

	)

81 
	#NS_MAXMSG
 65535

	)

82 
	#NS_MAXCDNAME
 255

	)

83 
	#NS_MAXLABEL
 63

	)

84 
	#NS_HFIXEDSZ
 12

	)

85 
	#NS_QFIXEDSZ
 4

	)

86 
	#NS_RRFIXEDSZ
 10

	)

87 
	#NS_INT32SZ
 4

	)

88 
	#NS_INT16SZ
 2

	)

89 
	#NS_INT8SZ
 1

	)

90 
	#NS_INADDRSZ
 4

	)

91 
	#NS_IN6ADDRSZ
 16

	)

92 
	#NS_CMPRSFLGS
 0xc0

	)

93 
	#NS_DEFAULTPORT
 53

	)

98 
	e__ns_£˘
 {

99 
	mns_s_qd
 = 0,

100 
	mns_s_zn
 = 0,

101 
	mns_s_™
 = 1,

102 
	mns_s_¥
 = 1,

103 
	mns_s_ns
 = 2,

104 
	mns_s_ud
 = 2,

105 
	mns_s_¨
 = 3,

106 
	mns_s_max
 = 4

107 } 
	tns_£˘
;

114 
	s__ns_msg
 {

115 c⁄° 
u_ch¨
 *
	m_msg
, *
	m_eom
;

116 
u_öt16_t
 
	m_id
, 
	m_Êags
, 
	m_cou¡s
[
ns_s_max
];

117 c⁄° 
u_ch¨
 *
	m_£˘i⁄s
[
ns_s_max
];

118 
ns_£˘
 
	m_£˘
;

119 
	m_ºnum
;

120 c⁄° 
u_ch¨
 *
	m_msg_±r
;

121 } 
	tns_msg
;

124 
	s_ns_Êagd©a
 { 
	mmask
, 
	mshi·
; };

125 c⁄° 
_ns_Êagd©a
 _ns_flagdata[];

129 
	#ns_msg_id
(
h™dÀ
Ë((h™dÀ).
_id
 + 0)

	)

130 
	#ns_msg_ba£
(
h™dÀ
Ë((h™dÀ).
_msg
 + 0)

	)

131 
	#ns_msg_íd
(
h™dÀ
Ë((h™dÀ).
_eom
 + 0)

	)

132 
	#ns_msg_size
(
h™dÀ
Ë((h™dÀ).
_eom
 - (h™dÀ).
_msg
)

	)

133 
	#ns_msg_cou¡
(
h™dÀ
, 
£˘i⁄
Ë((h™dÀ).
_cou¡s
[£˘i⁄] + 0)

	)

138 
	s__ns_º
 {

139 
	m«me
[
NS_MAXDNAME
];

140 
u_öt16_t
 
	mty≥
;

141 
u_öt16_t
 
	mº_˛ass
;

142 
u_öt32_t
 
	mâl
;

143 
u_öt16_t
 
	mrdÀngth
;

144 c⁄° 
u_ch¨
 * 
	mrd©a
;

145 } 
	tns_º
;

148 
	#ns_º_«me
(
º
Ë((‘r).
«me
[0] !'\0'Ë? (º).«mê: ".")

	)

149 
	#ns_º_ty≥
(
º
Ë((
ns_ty≥
)(‘r).
ty≥
 + 0))

	)

150 
	#ns_º_˛ass
(
º
Ë((
ns_˛ass
)(‘r).
º_˛ass
 + 0))

	)

151 
	#ns_º_âl
(
º
Ë(‘r).
âl
 + 0)

	)

152 
	#ns_º_rdÀn
(
º
Ë(‘r).
rdÀngth
 + 0)

	)

153 
	#ns_º_rd©a
(
º
Ë(‘r).
rd©a
 + 0)

	)

160 
	e__ns_Êag
 {

161 
	mns_f_qr
,

162 
	mns_f_›code
,

163 
	mns_f_Ø
,

164 
	mns_f_tc
,

165 
	mns_f_rd
,

166 
	mns_f_ø
,

167 
	mns_f_z
,

168 
	mns_f_ad
,

169 
	mns_f_cd
,

170 
	mns_f_rcode
,

171 
	mns_f_max


172 } 
	tns_Êag
;

177 
	e__ns_›code
 {

178 
	mns_o_quîy
 = 0,

179 
	mns_o_iquîy
 = 1,

180 
	mns_o_°©us
 = 2,

182 
	mns_o_nŸify
 = 4,

183 
	mns_o_upd©e
 = 5,

184 
	mns_o_max
 = 6

185 } 
	tns_›code
;

190 
	e__ns_rcode
 {

191 
	mns_r_n€º‹
 = 0,

192 
	mns_r_f‹mîr
 = 1,

193 
	mns_r_£rvÁû
 = 2,

194 
	mns_r_nxdomaö
 = 3,

195 
	mns_r_nŸim∂
 = 4,

196 
	mns_r_ªfu£d
 = 5,

198 
	mns_r_yxdomaö
 = 6,

199 
	mns_r_yxº£t
 = 7,

200 
	mns_r_nxº£t
 = 8,

201 
	mns_r_nŸauth
 = 9,

202 
	mns_r_nŸz⁄e
 = 10,

203 
	mns_r_max
 = 11,

205 
	mns_r_badvîs
 = 16,

207 
	mns_r_badsig
 = 16,

208 
	mns_r_badkey
 = 17,

209 
	mns_r_badtime
 = 18

210 } 
	tns_rcode
;

213 
	e__ns_upd©e_›î©i⁄
 {

214 
	mns_u›_dñëe
 = 0,

215 
	mns_u›_add
 = 1,

216 
	mns_u›_max
 = 2

217 } 
	tns_upd©e_›î©i⁄
;

222 
	sns_tsig_key
 {

223 
	m«me
[
NS_MAXDNAME
], 
	mÆg
[NS_MAXDNAME];

224 *
	md©a
;

225 
	mÀn
;

227 
ns_tsig_key
 
	tns_tsig_key
;

232 
	sns_t˝_tsig_°©e
 {

233 
	mcou¡î
;

234 
d°_key
 *
	mkey
;

235 *
	m˘x
;

236 
	msig
[
NS_PACKETSZ
];

237 
	msigÀn
;

239 
ns_t˝_tsig_°©e
 
	tns_t˝_tsig_°©e
;

241 
	#NS_TSIG_FUDGE
 300

	)

242 
	#NS_TSIG_TCP_COUNT
 100

	)

243 
	#NS_TSIG_ALG_HMAC_MD5
 "HMAC-MD5.SIG-ALG.REG.INT"

	)

245 
	#NS_TSIG_ERROR_NO_TSIG
 -10

	)

246 
	#NS_TSIG_ERROR_NO_SPACE
 -11

	)

247 
	#NS_TSIG_ERROR_FORMERR
 -12

	)

252 
	e__ns_ty≥
 {

253 
	mns_t_övÆid
 = 0,

254 
	mns_t_a
 = 1,

255 
	mns_t_ns
 = 2,

256 
	mns_t_md
 = 3,

257 
	mns_t_mf
 = 4,

258 
	mns_t_˙ame
 = 5,

259 
	mns_t_sﬂ
 = 6,

260 
	mns_t_mb
 = 7,

261 
	mns_t_mg
 = 8,

262 
	mns_t_mr
 = 9,

263 
	mns_t_nuŒ
 = 10,

264 
	mns_t_wks
 = 11,

265 
	mns_t_±r
 = 12,

266 
	mns_t_höfo
 = 13,

267 
	mns_t_möfo
 = 14,

268 
	mns_t_mx
 = 15,

269 
	mns_t_txt
 = 16,

270 
	mns_t_Ω
 = 17,

271 
	mns_t_afsdb
 = 18,

272 
	mns_t_x25
 = 19,

273 
	mns_t_isdn
 = 20,

274 
	mns_t_π
 = 21,

275 
	mns_t_nßp
 = 22,

276 
	mns_t_nßp_±r
 = 23,

277 
	mns_t_sig
 = 24,

278 
	mns_t_key
 = 25,

279 
	mns_t_px
 = 26,

280 
	mns_t_gpos
 = 27,

281 
	mns_t_ØØ
 = 28,

282 
	mns_t_loc
 = 29,

283 
	mns_t_nxt
 = 30,

284 
	mns_t_eid
 = 31,

285 
	mns_t_nimloc
 = 32,

286 
	mns_t_§v
 = 33,

287 
	mns_t_©ma
 = 34,

288 
	mns_t_«±r
 = 35,

289 
	mns_t_kx
 = 36,

290 
	mns_t_˚π
 = 37,

291 
	mns_t_a6
 = 38,

292 
	mns_t_d«me
 = 39,

293 
	mns_t_sök
 = 40,

294 
	mns_t_›t
 = 41,

295 
	mns_t_≠l
 = 42,

296 
	mns_t_tkey
 = 249,

297 
	mns_t_tsig
 = 250,

298 
	mns_t_ix‰
 = 251,

299 
	mns_t_ax‰
 = 252,

300 
	mns_t_maûb
 = 253,

301 
	mns_t_maûa
 = 254,

302 
	mns_t_™y
 = 255,

303 
	mns_t_zx‰
 = 256,

304 
	mns_t_max
 = 65536

305 } 
	tns_ty≥
;

308 
	#ns_t_qt_p
(
t
Ë(
	`ns_t_x‰_p
—Ë|| (tË=
ns_t_™y
 || \

309 (
t
Ë=
ns_t_maûb
 || (tË=
ns_t_maûa
)

	)

311 
	#ns_t_mº_p
(
t
Ë(—Ë=
ns_t_tsig
 || (tË=
ns_t_›t
)

	)

313 
	#ns_t_º_p
(
t
Ë(!
	`ns_t_qt_p
—Ë&& !
	`ns_t_mº_p
—))

	)

314 
	#ns_t_udp_p
(
t
Ë(—Ë!
ns_t_ax‰
 && (tË!
ns_t_zx‰
)

	)

315 
	#ns_t_x‰_p
(
t
Ë(—Ë=
ns_t_ax‰
 || (tË=
ns_t_ix‰
 || \

316 (
t
Ë=
ns_t_zx‰
)

	)

321 
	e__ns_˛ass
 {

322 
	mns_c_övÆid
 = 0,

323 
	mns_c_ö
 = 1,

324 
	mns_c_2
 = 2,

325 
	mns_c_chaos
 = 3,

326 
	mns_c_hs
 = 4,

328 
	mns_c_n⁄e
 = 254,

329 
	mns_c_™y
 = 255,

330 
	mns_c_max
 = 65536

331 } 
	tns_˛ass
;

335 
	e__ns_key_ty≥s
 {

336 
	mns_kt_rß
 = 1,

337 
	mns_kt_dh
 = 2,

338 
	mns_kt_dß
 = 3,

339 
	mns_kt_¥iv©e
 = 254

340 } 
	tns_key_ty≥s
;

342 
	e__ns_˚π_ty≥s
 {

343 
	m˚π_t_pkix
 = 1,

344 
	m˚π_t_•ki
 = 2,

345 
	m˚π_t_pgp
 = 3,

346 
	m˚π_t_uæ
 = 253,

347 
	m˚π_t_oid
 = 254

348 } 
	tns_˚π_ty≥s
;

351 
	#NS_KEY_TYPEMASK
 0xC000

	)

352 
	#NS_KEY_TYPE_AUTH_CONF
 0x0000

	)

353 
	#NS_KEY_TYPE_CONF_ONLY
 0x8000

	)

354 
	#NS_KEY_TYPE_AUTH_ONLY
 0x4000

	)

355 
	#NS_KEY_TYPE_NO_KEY
 0xC000

	)

357 
	#NS_KEY_NO_AUTH
 0x8000

	)

358 
	#NS_KEY_NO_CONF
 0x4000

	)

359 
	#NS_KEY_RESERVED2
 0x2000

	)

360 
	#NS_KEY_EXTENDED_FLAGS
 0x1000

	)

361 
	#NS_KEY_RESERVED4
 0x0800

	)

362 
	#NS_KEY_RESERVED5
 0x0400

	)

363 
	#NS_KEY_NAME_TYPE
 0x0300

	)

364 
	#NS_KEY_NAME_USER
 0x0000

	)

365 
	#NS_KEY_NAME_ENTITY
 0x0200

	)

366 
	#NS_KEY_NAME_ZONE
 0x0100

	)

367 
	#NS_KEY_NAME_RESERVED
 0x0300

	)

368 
	#NS_KEY_RESERVED8
 0x0080

	)

369 
	#NS_KEY_RESERVED9
 0x0040

	)

370 
	#NS_KEY_RESERVED10
 0x0020

	)

371 
	#NS_KEY_RESERVED11
 0x0010

	)

372 
	#NS_KEY_SIGNATORYMASK
 0x000F

	)

373 
	#NS_KEY_RESERVED_BITMASK
 ( 
NS_KEY_RESERVED2
 | \

374 
NS_KEY_RESERVED4
 | \

375 
NS_KEY_RESERVED5
 | \

376 
NS_KEY_RESERVED8
 | \

377 
NS_KEY_RESERVED9
 | \

378 
NS_KEY_RESERVED10
 | \

379 
NS_KEY_RESERVED11
 )

	)

380 
	#NS_KEY_RESERVED_BITMASK2
 0xFFFF

	)

382 
	#NS_ALG_MD5RSA
 1

	)

383 
	#NS_ALG_DH
 2

	)

384 
	#NS_ALG_DSA
 3

	)

385 
	#NS_ALG_DSS
 
NS_ALG_DSA


	)

386 
	#NS_ALG_EXPIRE_ONLY
 253

	)

387 
	#NS_ALG_PRIVATE_OID
 254

	)

390 
	#NS_KEY_PROT_TLS
 1

	)

391 
	#NS_KEY_PROT_EMAIL
 2

	)

392 
	#NS_KEY_PROT_DNSSEC
 3

	)

393 
	#NS_KEY_PROT_IPSEC
 4

	)

394 
	#NS_KEY_PROT_ANY
 255

	)

397 
	#NS_MD5RSA_MIN_BITS
 512

	)

398 
	#NS_MD5RSA_MAX_BITS
 4096

	)

400 
	#NS_MD5RSA_MAX_BYTES
 ((
NS_MD5RSA_MAX_BITS
+7/8)*2+3)

	)

402 
	#NS_MD5RSA_MAX_BASE64
 (((
NS_MD5RSA_MAX_BYTES
+2)/3)*4)

	)

403 
	#NS_MD5RSA_MIN_SIZE
 ((
NS_MD5RSA_MIN_BITS
+7)/8)

	)

404 
	#NS_MD5RSA_MAX_SIZE
 ((
NS_MD5RSA_MAX_BITS
+7)/8)

	)

406 
	#NS_DSA_SIG_SIZE
 41

	)

407 
	#NS_DSA_MIN_SIZE
 213

	)

408 
	#NS_DSA_MAX_BYTES
 405

	)

411 
	#NS_SIG_TYPE
 0

	)

412 
	#NS_SIG_ALG
 2

	)

413 
	#NS_SIG_LABELS
 3

	)

414 
	#NS_SIG_OTTL
 4

	)

415 
	#NS_SIG_EXPIR
 8

	)

416 
	#NS_SIG_SIGNED
 12

	)

417 
	#NS_SIG_FOOT
 16

	)

418 
	#NS_SIG_SIGNER
 18

	)

420 
	#NS_NXT_BITS
 8

	)

421 
	#NS_NXT_BIT_SET
–
n
,
p
Ë’[“)/
NS_NXT_BITS
] |(0x80>>(“)%NS_NXT_BITS)))

	)

422 
	#NS_NXT_BIT_CLEAR
(
n
,
p
Ë’[“)/
NS_NXT_BITS
] &~(0x80>>(“)%NS_NXT_BITS)))

	)

423 
	#NS_NXT_BIT_ISSET
(
n
,
p
Ë’[“)/
NS_NXT_BITS
] & (0x80>>(“)%NS_NXT_BITS)))

	)

424 
	#NS_NXT_MAX
 127

	)

429 
	#NS_OPT_DNSSEC_OK
 0x8000U

	)

430 
	#NS_OPT_NSID
 3

	)

435 
	#NS_GET16
(
s
, 
˝
) do { \

436 c⁄° 
u_ch¨
 *
t_˝
 = (c⁄° u_ch¨ *)(
˝
); \

437 (
s
Ë((
u_öt16_t
)
t_˝
[0] << 8) \

438 | ((
u_öt16_t
)
t_˝
[1]) \

440 (
˝
Ë+
NS_INT16SZ
; \

441 } 0)

	)

443 
	#NS_GET32
(
l
, 
˝
) do { \

444 c⁄° 
u_ch¨
 *
t_˝
 = (c⁄° u_ch¨ *)(
˝
); \

445 (
l
Ë((
u_öt32_t
)
t_˝
[0] << 24) \

446 | ((
u_öt32_t
)
t_˝
[1] << 16) \

447 | ((
u_öt32_t
)
t_˝
[2] << 8) \

448 | ((
u_öt32_t
)
t_˝
[3]) \

450 (
˝
Ë+
NS_INT32SZ
; \

451 } 0)

	)

453 
	#NS_PUT16
(
s
, 
˝
) do { \

454 
u_öt16_t
 
t_s
 = (u_öt16_t)(
s
); \

455 
u_ch¨
 *
t_˝
 = (u_ch¨ *)(
˝
); \

456 *
t_˝
++ = 
t_s
 >> 8; \

457 *
t_˝
 = 
t_s
; \

458 (
˝
Ë+
NS_INT16SZ
; \

459 } 0)

	)

461 
	#NS_PUT32
(
l
, 
˝
) do { \

462 
u_öt32_t
 
t_l
 = (u_öt32_t)(
l
); \

463 
u_ch¨
 *
t_˝
 = (u_ch¨ *)(
˝
); \

464 *
t_˝
++ = 
t_l
 >> 24; \

465 *
t_˝
++ = 
t_l
 >> 16; \

466 *
t_˝
++ = 
t_l
 >> 8; \

467 *
t_˝
 = 
t_l
; \

468 (
˝
Ë+
NS_INT32SZ
; \

469 } 0)

	)

471 
__BEGIN_DECLS


472 
	$ns_msg_gëÊag
 (
ns_msg
, Ë
__THROW
;

473 
u_öt
 
	$ns_gë16
 (c⁄° 
u_ch¨
 *Ë
__THROW
;

474 
u_l⁄g
 
	$ns_gë32
 (c⁄° 
u_ch¨
 *Ë
__THROW
;

475 
	$ns_put16
 (
u_öt
, 
u_ch¨
 *Ë
__THROW
;

476 
	$ns_put32
 (
u_l⁄g
, 
u_ch¨
 *Ë
__THROW
;

477 
	$ns_öô∑r£
 (c⁄° 
u_ch¨
 *, , 
ns_msg
 *Ë
__THROW
;

478 
	$ns_skùº
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *, 
ns_£˘
, )

479 
__THROW
;

480 
	$ns_∑r£º
 (
ns_msg
 *, 
ns_£˘
, , 
ns_º
 *Ë
__THROW
;

481 
	$ns_•röår
 (c⁄° 
ns_msg
 *, c⁄° 
ns_º
 *,

482 c⁄° *, c⁄° *, *, 
size_t
)

483 
__THROW
;

484 
	$ns_•röårf
 (c⁄° 
u_ch¨
 *, 
size_t
, const *,

485 
ns_˛ass
, 
ns_ty≥
, 
u_l⁄g
, c⁄° 
u_ch¨
 *,

486 
size_t
, const *, const *,

487 *, 
size_t
Ë
__THROW
;

488 
	$ns_f‹m©_âl
 (
u_l⁄g
, *, 
size_t
Ë
__THROW
;

489 
	$ns_∑r£_âl
 (c⁄° *, 
u_l⁄g
 *Ë
__THROW
;

490 
u_öt32_t
 
	$ns_d©ëo£cs
 (c⁄° *, *Ë
__THROW
;

491 
	$ns_«me_¡ﬁ
 (c⁄° 
u_ch¨
 *, u_ch¨ *, 
size_t
Ë
__THROW
;

492 
	$ns_«me_¡›
 (c⁄° 
u_ch¨
 *, *, 
size_t
Ë
__THROW
;

493 
	$ns_«me_±⁄
 (c⁄° *, 
u_ch¨
 *, 
size_t
Ë
__THROW
;

494 
	$ns_«me_u≈ack
 (c⁄° 
u_ch¨
 *, const u_char *,

495 c⁄° 
u_ch¨
 *, u_ch¨ *, 
size_t
Ë
__THROW
;

496 
	$ns_«me_∑ck
 (c⁄° 
u_ch¨
 *, u_char *, ,

497 c⁄° 
u_ch¨
 **, c⁄° u_ch¨ **Ë
__THROW
;

498 
	$ns_«me_uncom¥ess
 (c⁄° 
u_ch¨
 *, const u_char *,

499 c⁄° 
u_ch¨
 *, *, 
size_t
Ë
__THROW
;

500 
	$ns_«me_com¥ess
 (c⁄° *, 
u_ch¨
 *, 
size_t
,

501 c⁄° 
u_ch¨
 **, c⁄° u_ch¨ **Ë
__THROW
;

502 
	$ns_«me_skù
 (c⁄° 
u_ch¨
 **, c⁄° u_ch¨ *Ë
__THROW
;

503 
	$ns_«me_rﬁlback
 (c⁄° 
u_ch¨
 *, const u_char **,

504 c⁄° 
u_ch¨
 **Ë
__THROW
;

505 
	$ns_sign
 (
u_ch¨
 *, *, , , *,

506 c⁄° 
u_ch¨
 *, , u_ch¨ *, *, 
time_t
Ë
__THROW
;

507 
	$ns_sign2
 (
u_ch¨
 *, *, , , *,

508 c⁄° 
u_ch¨
 *, , u_ch¨ *, *, 
time_t
,

509 
u_ch¨
 **, u_ch¨ **Ë
__THROW
;

510 
	$ns_sign_t˝
 (
u_ch¨
 *, *, , ,

511 
ns_t˝_tsig_°©e
 *, Ë
__THROW
;

512 
	$ns_sign_t˝2
 (
u_ch¨
 *, *, , ,

513 
ns_t˝_tsig_°©e
 *, ,

514 
u_ch¨
 **, u_ch¨ **Ë
__THROW
;

515 
	$ns_sign_t˝_öô
 (*, c⁄° 
u_ch¨
 *, ,

516 
ns_t˝_tsig_°©e
 *Ë
__THROW
;

517 
u_ch¨
 *
	$ns_föd_tsig
 (
u_ch¨
 *, u_ch¨ *Ë
__THROW
;

518 
	$ns_vîify
 (
u_ch¨
 *, *, *, const u_char *, ,

519 
u_ch¨
 *, *, 
time_t
 *, Ë
__THROW
;

520 
	$ns_vîify_t˝
 (
u_ch¨
 *, *, 
ns_t˝_tsig_°©e
 *, )

521 
__THROW
;

522 
	$ns_vîify_t˝_öô
 (*, c⁄° 
u_ch¨
 *, ,

523 
ns_t˝_tsig_°©e
 *Ë
__THROW
;

524 
	$ns_ßmedomaö
 (c⁄° *, c⁄° *Ë
__THROW
;

525 
	$ns_subdomaö
 (c⁄° *, c⁄° *Ë
__THROW
;

526 
	$ns_makeˇn⁄
 (c⁄° *, *, 
size_t
Ë
__THROW
;

527 
	$ns_ßmíame
 (c⁄° *, c⁄° *Ë
__THROW
;

528 
__END_DECLS


530 #ifde‡
BIND_4_COMPAT


531 
	~<¨∑/«me£r_com∑t.h
>

	@/usr/include/bits/byteswap.h

21 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

29 
	#__bsw≠_c⁄°™t_16
(
x
) \

30 ((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8))

	)

32 #ifde‡
__GNUC__


33 #i‡
__GNUC__
 >= 2

34 
	#__bsw≠_16
(
x
) \

35 (
__exãnsi⁄__
 \

36 ({ 
__v
, 
__x
 = (
x
); \

37 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

38 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

40 
	`__asm__
 ("rorw $8, %w0" \

41 : "Ù" (
__v
) \

42 : "0" (
__x
) \

44 
__v
; }))

	)

47 
	#__bsw≠_16
(
x
) \

48 (
__exãnsi⁄__
 \

49 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_16
 (__x); }))

	)

52 
__ölöe
 

53 
	$__bsw≠_16
 (
__bsx
)

55  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

56 
	}
}

60 
	#__bsw≠_c⁄°™t_32
(
x
) \

61 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

62 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

64 #ifde‡
__GNUC__


65 #i‡
__GNUC__
 >= 2

68 #i‡!
deföed
 
__i486__
 && !deföed 
__≥¡ium__
 && !deföed 
__≥¡ium¥o__
 \

69 && !
deföed
 
	g__≥¡ium4__
 && !deföed 
	g__k8__
 && !deföed 
	g__©hl⁄__
 \

70 && !
deföed
 
	g__k6__
 && !deföed 
	g__noc⁄a__
 && !deföed 
	g__c‹e2__
 \

71 && !
deföed
 
	g__geode__
 && !deföed 
	g__amdÁm10__


72 
	#__bsw≠_32
(
x
) \

73 (
__exãnsi⁄__
 \

74 ({ 
__v
, 
__x
 = (
x
); \

75 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

76 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

78 
	`__asm__
 ("rorw $8, %w0;" \

81 : "Ù" (
__v
) \

82 : "0" (
__x
) \

84 
__v
; }))

	)

86 
	#__bsw≠_32
(
x
) \

87 (
__exãnsi⁄__
 \

88 ({ 
__v
, 
__x
 = (
x
); \

89 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

90 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

92 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

93 
__v
; }))

	)

96 
	#__bsw≠_32
(
x
) \

97 (
__exãnsi⁄__
 \

98 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

101 
__ölöe
 

102 
	$__bsw≠_32
 (
__bsx
)

104  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

105 
	}
}

109 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

111 
	#__bsw≠_c⁄°™t_64
(
x
) \

112 ((((
x
) & 0xff00000000000000ull) >> 56) \

113 | (((
x
) & 0x00ff000000000000ull) >> 40) \

114 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

115 | (((
x
) & 0x000000ff00000000ull) >> 8) \

116 | (((
x
) & 0x00000000ff000000ull) << 8) \

117 | (((
x
) & 0x0000000000ff0000ull) << 24) \

118 | (((
x
) & 0x000000000000ff00ull) << 40) \

119 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

121 
	#__bsw≠_64
(
x
) \

122 (
__exãnsi⁄__
 \

123 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

124 
__l
[2]; } 
__w
, 
__r
; \

125 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

126 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

129 
__w
.
__Œ
 = (
x
); \

130 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

131 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

133 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/confname.h

21 #i‚de‡
_UNISTD_H


28 
	m_PC_LINK_MAX
,

29 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

30 
	m_PC_MAX_CANON
,

31 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

32 
	m_PC_MAX_INPUT
,

33 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

34 
	m_PC_NAME_MAX
,

35 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

36 
	m_PC_PATH_MAX
,

37 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

38 
	m_PC_PIPE_BUF
,

39 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

40 
	m_PC_CHOWN_RESTRICTED
,

41 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

42 
	m_PC_NO_TRUNC
,

43 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

44 
	m_PC_VDISABLE
,

45 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

46 
	m_PC_SYNC_IO
,

47 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

48 
	m_PC_ASYNC_IO
,

49 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

50 
	m_PC_PRIO_IO
,

51 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

52 
	m_PC_SOCK_MAXBUF
,

53 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

54 
	m_PC_FILESIZEBITS
,

55 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

56 
	m_PC_REC_INCR_XFER_SIZE
,

57 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

58 
	m_PC_REC_MAX_XFER_SIZE
,

59 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

60 
	m_PC_REC_MIN_XFER_SIZE
,

61 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

62 
	m_PC_REC_XFER_ALIGN
,

63 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

64 
	m_PC_ALLOC_SIZE_MIN
,

65 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

66 
	m_PC_SYMLINK_MAX
,

67 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

68 
	m_PC_2_SYMLINKS


69 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

75 
	m_SC_ARG_MAX
,

76 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

77 
	m_SC_CHILD_MAX
,

78 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

79 
	m_SC_CLK_TCK
,

80 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

81 
	m_SC_NGROUPS_MAX
,

82 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

83 
	m_SC_OPEN_MAX
,

84 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

85 
	m_SC_STREAM_MAX
,

86 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

87 
	m_SC_TZNAME_MAX
,

88 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

89 
	m_SC_JOB_CONTROL
,

90 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

91 
	m_SC_SAVED_IDS
,

92 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

93 
	m_SC_REALTIME_SIGNALS
,

94 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

95 
	m_SC_PRIORITY_SCHEDULING
,

96 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

97 
	m_SC_TIMERS
,

98 
	#_SC_TIMERS
 
_SC_TIMERS


	)

99 
	m_SC_ASYNCHRONOUS_IO
,

100 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

101 
	m_SC_PRIORITIZED_IO
,

102 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

103 
	m_SC_SYNCHRONIZED_IO
,

104 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

105 
	m_SC_FSYNC
,

106 
	#_SC_FSYNC
 
_SC_FSYNC


	)

107 
	m_SC_MAPPED_FILES
,

108 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

109 
	m_SC_MEMLOCK
,

110 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

111 
	m_SC_MEMLOCK_RANGE
,

112 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

113 
	m_SC_MEMORY_PROTECTION
,

114 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

115 
	m_SC_MESSAGE_PASSING
,

116 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

117 
	m_SC_SEMAPHORES
,

118 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

119 
	m_SC_SHARED_MEMORY_OBJECTS
,

120 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

121 
	m_SC_AIO_LISTIO_MAX
,

122 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

123 
	m_SC_AIO_MAX
,

124 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

125 
	m_SC_AIO_PRIO_DELTA_MAX
,

126 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

127 
	m_SC_DELAYTIMER_MAX
,

128 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

129 
	m_SC_MQ_OPEN_MAX
,

130 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

131 
	m_SC_MQ_PRIO_MAX
,

132 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

133 
	m_SC_VERSION
,

134 
	#_SC_VERSION
 
_SC_VERSION


	)

135 
	m_SC_PAGESIZE
,

136 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

137 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

138 
	m_SC_RTSIG_MAX
,

139 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

140 
	m_SC_SEM_NSEMS_MAX
,

141 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

142 
	m_SC_SEM_VALUE_MAX
,

143 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

144 
	m_SC_SIGQUEUE_MAX
,

145 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

146 
	m_SC_TIMER_MAX
,

147 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

151 
	m_SC_BC_BASE_MAX
,

152 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

153 
	m_SC_BC_DIM_MAX
,

154 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

155 
	m_SC_BC_SCALE_MAX
,

156 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

157 
	m_SC_BC_STRING_MAX
,

158 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

159 
	m_SC_COLL_WEIGHTS_MAX
,

160 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

161 
	m_SC_EQUIV_CLASS_MAX
,

162 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

163 
	m_SC_EXPR_NEST_MAX
,

164 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

165 
	m_SC_LINE_MAX
,

166 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

167 
	m_SC_RE_DUP_MAX
,

168 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

169 
	m_SC_CHARCLASS_NAME_MAX
,

170 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

172 
	m_SC_2_VERSION
,

173 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

174 
	m_SC_2_C_BIND
,

175 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

176 
	m_SC_2_C_DEV
,

177 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

178 
	m_SC_2_FORT_DEV
,

179 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

180 
	m_SC_2_FORT_RUN
,

181 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

182 
	m_SC_2_SW_DEV
,

183 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

184 
	m_SC_2_LOCALEDEF
,

185 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

187 
	m_SC_PII
,

188 
	#_SC_PII
 
_SC_PII


	)

189 
	m_SC_PII_XTI
,

190 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

191 
	m_SC_PII_SOCKET
,

192 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

193 
	m_SC_PII_INTERNET
,

194 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

195 
	m_SC_PII_OSI
,

196 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

197 
	m_SC_POLL
,

198 
	#_SC_POLL
 
_SC_POLL


	)

199 
	m_SC_SELECT
,

200 
	#_SC_SELECT
 
_SC_SELECT


	)

201 
	m_SC_UIO_MAXIOV
,

202 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

203 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

204 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

205 
	m_SC_PII_INTERNET_STREAM
,

206 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

207 
	m_SC_PII_INTERNET_DGRAM
,

208 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

209 
	m_SC_PII_OSI_COTS
,

210 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

211 
	m_SC_PII_OSI_CLTS
,

212 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

213 
	m_SC_PII_OSI_M
,

214 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

215 
	m_SC_T_IOV_MAX
,

216 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

219 
	m_SC_THREADS
,

220 
	#_SC_THREADS
 
_SC_THREADS


	)

221 
	m_SC_THREAD_SAFE_FUNCTIONS
,

222 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

223 
	m_SC_GETGR_R_SIZE_MAX
,

224 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

225 
	m_SC_GETPW_R_SIZE_MAX
,

226 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

227 
	m_SC_LOGIN_NAME_MAX
,

228 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

229 
	m_SC_TTY_NAME_MAX
,

230 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

231 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

232 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

233 
	m_SC_THREAD_KEYS_MAX
,

234 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

235 
	m_SC_THREAD_STACK_MIN
,

236 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

237 
	m_SC_THREAD_THREADS_MAX
,

238 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

239 
	m_SC_THREAD_ATTR_STACKADDR
,

240 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

241 
	m_SC_THREAD_ATTR_STACKSIZE
,

242 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

243 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

244 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

245 
	m_SC_THREAD_PRIO_INHERIT
,

246 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

247 
	m_SC_THREAD_PRIO_PROTECT
,

248 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

249 
	m_SC_THREAD_PROCESS_SHARED
,

250 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

252 
	m_SC_NPROCESSORS_CONF
,

253 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

254 
	m_SC_NPROCESSORS_ONLN
,

255 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

256 
	m_SC_PHYS_PAGES
,

257 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

258 
	m_SC_AVPHYS_PAGES
,

259 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

260 
	m_SC_ATEXIT_MAX
,

261 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

262 
	m_SC_PASS_MAX
,

263 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

265 
	m_SC_XOPEN_VERSION
,

266 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

267 
	m_SC_XOPEN_XCU_VERSION
,

268 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

269 
	m_SC_XOPEN_UNIX
,

270 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

271 
	m_SC_XOPEN_CRYPT
,

272 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

273 
	m_SC_XOPEN_ENH_I18N
,

274 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

275 
	m_SC_XOPEN_SHM
,

276 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

278 
	m_SC_2_CHAR_TERM
,

279 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

280 
	m_SC_2_C_VERSION
,

281 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

282 
	m_SC_2_UPE
,

283 
	#_SC_2_UPE
 
_SC_2_UPE


	)

285 
	m_SC_XOPEN_XPG2
,

286 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

287 
	m_SC_XOPEN_XPG3
,

288 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

289 
	m_SC_XOPEN_XPG4
,

290 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

292 
	m_SC_CHAR_BIT
,

293 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

294 
	m_SC_CHAR_MAX
,

295 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

296 
	m_SC_CHAR_MIN
,

297 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

298 
	m_SC_INT_MAX
,

299 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

300 
	m_SC_INT_MIN
,

301 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

302 
	m_SC_LONG_BIT
,

303 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

304 
	m_SC_WORD_BIT
,

305 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

306 
	m_SC_MB_LEN_MAX
,

307 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

308 
	m_SC_NZERO
,

309 
	#_SC_NZERO
 
_SC_NZERO


	)

310 
	m_SC_SSIZE_MAX
,

311 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

312 
	m_SC_SCHAR_MAX
,

313 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

314 
	m_SC_SCHAR_MIN
,

315 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

316 
	m_SC_SHRT_MAX
,

317 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

318 
	m_SC_SHRT_MIN
,

319 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

320 
	m_SC_UCHAR_MAX
,

321 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

322 
	m_SC_UINT_MAX
,

323 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

324 
	m_SC_ULONG_MAX
,

325 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

326 
	m_SC_USHRT_MAX
,

327 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

329 
	m_SC_NL_ARGMAX
,

330 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

331 
	m_SC_NL_LANGMAX
,

332 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

333 
	m_SC_NL_MSGMAX
,

334 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

335 
	m_SC_NL_NMAX
,

336 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

337 
	m_SC_NL_SETMAX
,

338 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

339 
	m_SC_NL_TEXTMAX
,

340 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

342 
	m_SC_XBS5_ILP32_OFF32
,

343 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

344 
	m_SC_XBS5_ILP32_OFFBIG
,

345 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

346 
	m_SC_XBS5_LP64_OFF64
,

347 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

348 
	m_SC_XBS5_LPBIG_OFFBIG
,

349 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

351 
	m_SC_XOPEN_LEGACY
,

352 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

353 
	m_SC_XOPEN_REALTIME
,

354 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

355 
	m_SC_XOPEN_REALTIME_THREADS
,

356 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

358 
	m_SC_ADVISORY_INFO
,

359 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

360 
	m_SC_BARRIERS
,

361 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

362 
	m_SC_BASE
,

363 
	#_SC_BASE
 
_SC_BASE


	)

364 
	m_SC_C_LANG_SUPPORT
,

365 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

366 
	m_SC_C_LANG_SUPPORT_R
,

367 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

368 
	m_SC_CLOCK_SELECTION
,

369 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

370 
	m_SC_CPUTIME
,

371 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

372 
	m_SC_THREAD_CPUTIME
,

373 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

374 
	m_SC_DEVICE_IO
,

375 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

376 
	m_SC_DEVICE_SPECIFIC
,

377 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

378 
	m_SC_DEVICE_SPECIFIC_R
,

379 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

380 
	m_SC_FD_MGMT
,

381 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

382 
	m_SC_FIFO
,

383 
	#_SC_FIFO
 
_SC_FIFO


	)

384 
	m_SC_PIPE
,

385 
	#_SC_PIPE
 
_SC_PIPE


	)

386 
	m_SC_FILE_ATTRIBUTES
,

387 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

388 
	m_SC_FILE_LOCKING
,

389 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

390 
	m_SC_FILE_SYSTEM
,

391 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

392 
	m_SC_MONOTONIC_CLOCK
,

393 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

394 
	m_SC_MULTI_PROCESS
,

395 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

396 
	m_SC_SINGLE_PROCESS
,

397 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

398 
	m_SC_NETWORKING
,

399 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

400 
	m_SC_READER_WRITER_LOCKS
,

401 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

402 
	m_SC_SPIN_LOCKS
,

403 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

404 
	m_SC_REGEXP
,

405 
	#_SC_REGEXP
 
_SC_REGEXP


	)

406 
	m_SC_REGEX_VERSION
,

407 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

408 
	m_SC_SHELL
,

409 
	#_SC_SHELL
 
_SC_SHELL


	)

410 
	m_SC_SIGNALS
,

411 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

412 
	m_SC_SPAWN
,

413 
	#_SC_SPAWN
 
_SC_SPAWN


	)

414 
	m_SC_SPORADIC_SERVER
,

415 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

416 
	m_SC_THREAD_SPORADIC_SERVER
,

417 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

418 
	m_SC_SYSTEM_DATABASE
,

419 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

420 
	m_SC_SYSTEM_DATABASE_R
,

421 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

422 
	m_SC_TIMEOUTS
,

423 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

424 
	m_SC_TYPED_MEMORY_OBJECTS
,

425 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

426 
	m_SC_USER_GROUPS
,

427 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

428 
	m_SC_USER_GROUPS_R
,

429 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

430 
	m_SC_2_PBS
,

431 
	#_SC_2_PBS
 
_SC_2_PBS


	)

432 
	m_SC_2_PBS_ACCOUNTING
,

433 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

434 
	m_SC_2_PBS_LOCATE
,

435 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

436 
	m_SC_2_PBS_MESSAGE
,

437 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

438 
	m_SC_2_PBS_TRACK
,

439 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

440 
	m_SC_SYMLOOP_MAX
,

441 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

442 
	m_SC_STREAMS
,

443 
	#_SC_STREAMS
 
_SC_STREAMS


	)

444 
	m_SC_2_PBS_CHECKPOINT
,

445 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

447 
	m_SC_V6_ILP32_OFF32
,

448 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

449 
	m_SC_V6_ILP32_OFFBIG
,

450 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

451 
	m_SC_V6_LP64_OFF64
,

452 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

453 
	m_SC_V6_LPBIG_OFFBIG
,

454 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

456 
	m_SC_HOST_NAME_MAX
,

457 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

458 
	m_SC_TRACE
,

459 
	#_SC_TRACE
 
_SC_TRACE


	)

460 
	m_SC_TRACE_EVENT_FILTER
,

461 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

462 
	m_SC_TRACE_INHERIT
,

463 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

464 
	m_SC_TRACE_LOG
,

465 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

467 
	m_SC_LEVEL1_ICACHE_SIZE
,

468 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

469 
	m_SC_LEVEL1_ICACHE_ASSOC
,

470 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

471 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

472 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

473 
	m_SC_LEVEL1_DCACHE_SIZE
,

474 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

475 
	m_SC_LEVEL1_DCACHE_ASSOC
,

476 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

477 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

478 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

479 
	m_SC_LEVEL2_CACHE_SIZE
,

480 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

481 
	m_SC_LEVEL2_CACHE_ASSOC
,

482 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

483 
	m_SC_LEVEL2_CACHE_LINESIZE
,

484 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

485 
	m_SC_LEVEL3_CACHE_SIZE
,

486 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

487 
	m_SC_LEVEL3_CACHE_ASSOC
,

488 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

489 
	m_SC_LEVEL3_CACHE_LINESIZE
,

490 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

491 
	m_SC_LEVEL4_CACHE_SIZE
,

492 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

493 
	m_SC_LEVEL4_CACHE_ASSOC
,

494 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

495 
	m_SC_LEVEL4_CACHE_LINESIZE
,

496 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

499 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

500 
	#_SC_IPV6
 
_SC_IPV6


	)

501 
	m_SC_RAW_SOCKETS
,

502 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

504 
	m_SC_V7_ILP32_OFF32
,

505 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

506 
	m_SC_V7_ILP32_OFFBIG
,

507 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

508 
	m_SC_V7_LP64_OFF64
,

509 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

510 
	m_SC_V7_LPBIG_OFFBIG
,

511 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

513 
	m_SC_SS_REPL_MAX
,

514 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

516 
	m_SC_TRACE_EVENT_NAME_MAX
,

517 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

518 
	m_SC_TRACE_NAME_MAX
,

519 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

520 
	m_SC_TRACE_SYS_MAX
,

521 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

522 
	m_SC_TRACE_USER_EVENT_MAX
,

523 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

525 
	m_SC_XOPEN_STREAMS
,

526 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

528 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

529 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

530 
	m_SC_THREAD_ROBUST_PRIO_PROTECT
,

531 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

537 
	m_CS_PATH
,

538 
	#_CS_PATH
 
_CS_PATH


	)

540 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

541 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

544 
	m_CS_GNU_LIBC_VERSION
,

545 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

546 
	m_CS_GNU_LIBPTHREAD_VERSION
,

547 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

549 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

550 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

553 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

554 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

557 
	m_CS_LFS_CFLAGS
 = 1000,

558 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

559 
	m_CS_LFS_LDFLAGS
,

560 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

561 
	m_CS_LFS_LIBS
,

562 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

563 
	m_CS_LFS_LINTFLAGS
,

564 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

565 
	m_CS_LFS64_CFLAGS
,

566 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

567 
	m_CS_LFS64_LDFLAGS
,

568 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

569 
	m_CS_LFS64_LIBS
,

570 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

571 
	m_CS_LFS64_LINTFLAGS
,

572 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

575 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

577 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

579 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

580 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

581 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

588 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

589 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

593 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

594 
	m_CS_XBS5_LP64_OFF64_LIBS
,

595 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

596 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

597 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

604 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

605 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

613 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

621 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

622 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

629 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

630 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

637 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

638 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

646 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

654 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

655 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

662 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

663 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

670 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


671 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

	@/usr/include/bits/environments.h

19 #i‚de‡
_UNISTD_H


43 
	#_POSIX_V7_ILP32_OFF32
 1

	)

44 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

45 
	#_POSIX_V6_ILP32_OFF32
 1

	)

46 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

47 
	#_XBS5_ILP32_OFF32
 1

	)

48 
	#_XBS5_ILP32_OFFBIG
 1

	)

63 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

64 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

65 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

66 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

67 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

68 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

20 #ifde‡
_ERRNO_H


22 #unde‡
EDOM


23 #unde‡
EILSEQ


24 #unde‡
ERANGE


25 
	~<löux/î∫o.h
>

28 
	#ENOTSUP
 
EOPNOTSUPP


	)

31 #i‚de‡
ECANCELED


32 
	#ECANCELED
 125

	)

36 #i‚de‡
EOWNERDEAD


37 
	#EOWNERDEAD
 130

	)

38 
	#ENOTRECOVERABLE
 131

	)

41 #i‚de‡
__ASSEMBLER__


43 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

45 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


47 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

52 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


56 
	#EDOM
 33

	)

57 
	#EILSEQ
 84

	)

58 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

21 #i‚def 
_FCNTL_H


25 
	~<sys/ty≥s.h
>

26 #ifde‡
__USE_GNU


27 
	~<bôs/uio.h
>

33 
	#O_ACCMODE
 0003

	)

34 
	#O_RDONLY
 00

	)

35 
	#O_WRONLY
 01

	)

36 
	#O_RDWR
 02

	)

37 
	#O_CREAT
 0100

	)

38 
	#O_EXCL
 0200

	)

39 
	#O_NOCTTY
 0400

	)

40 
	#O_TRUNC
 01000

	)

41 
	#O_APPEND
 02000

	)

42 
	#O_NONBLOCK
 04000

	)

43 
	#O_NDELAY
 
O_NONBLOCK


	)

44 
	#O_SYNC
 010000

	)

45 
	#O_FSYNC
 
O_SYNC


	)

46 
	#O_ASYNC
 020000

	)

48 #ifde‡
__USE_GNU


49 
	#O_DIRECT
 040000

	)

50 
	#O_DIRECTORY
 0200000

	)

51 
	#O_NOFOLLOW
 0400000

	)

52 
	#O_NOATIME
 01000000

	)

53 
	#O_CLOEXEC
 02000000

	)

59 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


60 
	#O_DSYNC
 
O_SYNC


	)

61 
	#O_RSYNC
 
O_SYNC


	)

64 #ifde‡
__USE_LARGEFILE64


65 
	#O_LARGEFILE
 0100000

	)

69 
	#F_DUPFD
 0

	)

70 
	#F_GETFD
 1

	)

71 
	#F_SETFD
 2

	)

72 
	#F_GETFL
 3

	)

73 
	#F_SETFL
 4

	)

74 #i‚de‡
__USE_FILE_OFFSET64


75 
	#F_GETLK
 5

	)

76 
	#F_SETLK
 6

	)

77 
	#F_SETLKW
 7

	)

79 
	#F_GETLK
 
F_GETLK64


	)

80 
	#F_SETLK
 
F_SETLK64


	)

81 
	#F_SETLKW
 
F_SETLKW64


	)

83 
	#F_GETLK64
 12

	)

84 
	#F_SETLK64
 13

	)

85 
	#F_SETLKW64
 14

	)

87 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


88 
	#F_SETOWN
 8

	)

89 
	#F_GETOWN
 9

	)

92 #ifde‡
__USE_GNU


93 
	#F_SETSIG
 10

	)

94 
	#F_GETSIG
 11

	)

97 #ifde‡
__USE_GNU


98 
	#F_SETLEASE
 1024

	)

99 
	#F_GETLEASE
 1025

	)

100 
	#F_NOTIFY
 1026

	)

101 
	#F_DUPFD_CLOEXEC
 1030

	)

106 
	#FD_CLOEXEC
 1

	)

109 
	#F_RDLCK
 0

	)

110 
	#F_WRLCK
 1

	)

111 
	#F_UNLCK
 2

	)

114 
	#F_EXLCK
 4

	)

115 
	#F_SHLCK
 8

	)

117 #ifde‡
__USE_BSD


119 
	#LOCK_SH
 1

	)

120 
	#LOCK_EX
 2

	)

121 
	#LOCK_NB
 4

	)

123 
	#LOCK_UN
 8

	)

126 #ifde‡
__USE_GNU


127 
	#LOCK_MAND
 32

	)

128 
	#LOCK_READ
 64

	)

129 
	#LOCK_WRITE
 128

	)

130 
	#LOCK_RW
 192

	)

133 #ifde‡
__USE_GNU


135 
	#DN_ACCESS
 0x00000001

	)

136 
	#DN_MODIFY
 0x00000002

	)

137 
	#DN_CREATE
 0x00000004

	)

138 
	#DN_DELETE
 0x00000008

	)

139 
	#DN_RENAME
 0x00000010

	)

140 
	#DN_ATTRIB
 0x00000020

	)

141 
	#DN_MULTISHOT
 0x80000000

	)

144 
	sÊock


146 
	ml_ty≥
;

147 
	ml_whí˚
;

148 #i‚de‡
__USE_FILE_OFFSET64


149 
__off_t
 
	ml_°¨t
;

150 
__off_t
 
	ml_Àn
;

152 
__off64_t
 
	ml_°¨t
;

153 
__off64_t
 
	ml_Àn
;

155 
__pid_t
 
	ml_pid
;

158 #ifde‡
__USE_LARGEFILE64


159 
	sÊock64


161 
	ml_ty≥
;

162 
	ml_whí˚
;

163 
__off64_t
 
	ml_°¨t
;

164 
__off64_t
 
	ml_Àn
;

165 
__pid_t
 
	ml_pid
;

171 #ifdef 
__USE_BSD


172 
	#FAPPEND
 
O_APPEND


	)

173 
	#FFSYNC
 
O_FSYNC


	)

174 
	#FASYNC
 
O_ASYNC


	)

175 
	#FNONBLOCK
 
O_NONBLOCK


	)

176 
	#FNDELAY
 
O_NDELAY


	)

180 #ifde‡
__USE_XOPEN2K


181 
	#POSIX_FADV_NORMAL
 0

	)

182 
	#POSIX_FADV_RANDOM
 1

	)

183 
	#POSIX_FADV_SEQUENTIAL
 2

	)

184 
	#POSIX_FADV_WILLNEED
 3

	)

185 
	#POSIX_FADV_DONTNEED
 4

	)

186 
	#POSIX_FADV_NOREUSE
 5

	)

190 #ifde‡
__USE_GNU


192 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

195 
	#SYNC_FILE_RANGE_WRITE
 2

	)

198 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

203 
	#SPLICE_F_MOVE
 1

	)

204 
	#SPLICE_F_NONBLOCK
 2

	)

207 
	#SPLICE_F_MORE
 4

	)

208 
	#SPLICE_F_GIFT
 8

	)

211 
	g__BEGIN_DECLS


213 #ifde‡
__USE_GNU


216 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

217 
__THROW
;

221 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__‰om
, __off64_à
__to
,

222 
__Êags
);

226 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

227 
size_t
 
__cou¡
, 
__Êags
);

230 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

231 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

232 
__Êags
);

235 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

236 
__Êags
);

239 #i‚de‡
__USE_FILE_OFFSET64


240 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

242 #ifde‡
__REDIRECT


243 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

244 
__off64_t
 
__Àn
),

245 
ÁŒoˇã64
);

247 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

250 #ifde‡
__USE_LARGEFILE64


251 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

252 
__off64_t
 
__Àn
);

257 
__END_DECLS


	@/usr/include/bits/fcntl2.h

20 #i‚def 
_FCNTL_H


26 #i‚de‡
__USE_FILE_OFFSET64


27 
	$__›í_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

28 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

29 
›í
Ë
	`__n⁄nuŒ
 ((1));

31 
	`__REDIRECT
 (
__›í_2
, (
__c⁄°
 *
__∑th
, 
__oÊag
),

32 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

33 
	`__REDIRECT
 (
__›í_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
, ...),

34 
›í64
Ë
	`__n⁄nuŒ
 ((1));

36 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

38 
	`__îr‹de˛
 (
__›í_missög_mode
,

41 
__exã∫_Æways_ölöe
 

42 
	$›í
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

44 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

45 
	`__›í_too_m™y_¨gs
 ();

47 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

49 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

51 
	`__›í_missög_mode
 ();

52  
	`__›í_2
 (
__∑th
, 
__oÊag
);

54  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

57 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

58  
	`__›í_2
 (
__∑th
, 
__oÊag
);

60  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

61 
	}
}

64 #ifde‡
__USE_LARGEFILE64


65 
	$__›í64_2
 (
__c⁄°
 *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

66 
	`__REDIRECT
 (
__›í64_Æüs
, (
__c⁄°
 *
__∑th
, 
__oÊag
,

67 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

68 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

70 
	`__îr‹de˛
 (
__›í64_missög_mode
,

73 
__exã∫_Æways_ölöe
 

74 
	$›í64
 (
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

76 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

77 
	`__›í64_too_m™y_¨gs
 ();

79 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

81 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

83 
	`__›í64_missög_mode
 ();

84  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

86  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

89 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

90  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

92  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

93 
	}
}

97 #ifde‡
__USE_ATFILE


98 #i‚de‡
__USE_FILE_OFFSET64


99 
	$__›í©_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

100 
	`__n⁄nuŒ
 ((2));

101 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

102 
__oÊag
, ...), 
›í©
)

103 
	`__n⁄nuŒ
 ((2));

105 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, 
__c⁄°
 *
__∑th
,

106 
__oÊag
), 
__›í©64_2
)

107 
	`__n⁄nuŒ
 ((2));

108 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

109 
__oÊag
, ...), 
›í©64
)

110 
	`__n⁄nuŒ
 ((2));

112 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

114 
	`__îr‹de˛
 (
__›í©_missög_mode
,

117 
__exã∫_Æways_ölöe
 

118 
	$›í©
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

120 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

121 
	`__›í©_too_m™y_¨gs
 ();

123 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

125 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

127 
	`__›í©_missög_mode
 ();

128  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

130  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

133 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

134  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

136  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

137 
	}
}

140 #ifde‡
__USE_LARGEFILE64


141 
	$__›í©64_2
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
)

142 
	`__n⁄nuŒ
 ((2));

143 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, 
__c⁄°
 *
__∑th
,

144 
__oÊag
, ...), 
›í©64
)

145 
	`__n⁄nuŒ
 ((2));

146 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

148 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

151 
__exã∫_Æways_ölöe
 

152 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__∑th
, 
__oÊag
, ...)

154 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

155 
	`__›í©64_too_m™y_¨gs
 ();

157 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

159 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

161 
	`__›í©64_missög_mode
 ();

162  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

164  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

167 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

168  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

170  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

171 
	}
}

	@/usr/include/bits/in.h

21 #i‚de‡
_NETINET_IN_H


28 
	#IP_OPTIONS
 4

	)

29 
	#IP_HDRINCL
 3

	)

30 
	#IP_TOS
 1

	)

31 
	#IP_TTL
 2

	)

32 
	#IP_RECVOPTS
 6

	)

34 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

35 
	#IP_RETOPTS
 7

	)

36 
	#IP_MULTICAST_IF
 32

	)

37 
	#IP_MULTICAST_TTL
 33

	)

38 
	#IP_MULTICAST_LOOP
 34

	)

39 
	#IP_ADD_MEMBERSHIP
 35

	)

40 
	#IP_DROP_MEMBERSHIP
 36

	)

41 
	#IP_UNBLOCK_SOURCE
 37

	)

42 
	#IP_BLOCK_SOURCE
 38

	)

43 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

44 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

45 
	#IP_MSFILTER
 41

	)

46 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


47 
	#MCAST_JOIN_GROUP
 42

	)

48 
	#MCAST_BLOCK_SOURCE
 43

	)

49 
	#MCAST_UNBLOCK_SOURCE
 44

	)

50 
	#MCAST_LEAVE_GROUP
 45

	)

51 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

52 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

53 
	#MCAST_MSFILTER
 48

	)

55 
	#MCAST_EXCLUDE
 0

	)

56 
	#MCAST_INCLUDE
 1

	)

59 
	#IP_ROUTER_ALERT
 5

	)

60 
	#IP_PKTINFO
 8

	)

61 
	#IP_PKTOPTIONS
 9

	)

62 
	#IP_PMTUDISC
 10

	)

63 
	#IP_MTU_DISCOVER
 10

	)

64 
	#IP_RECVERR
 11

	)

65 
	#IP_RECVTTL
 12

	)

66 
	#IP_RECVTOS
 13

	)

70 
	#IP_PMTUDISC_DONT
 0

	)

71 
	#IP_PMTUDISC_WANT
 1

	)

72 
	#IP_PMTUDISC_DO
 2

	)

73 
	#IP_PMTUDISC_PROBE
 3

	)

76 
	#SOL_IP
 0

	)

78 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

79 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

80 
	#IP_MAX_MEMBERSHIPS
 20

	)

82 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


86 
	sù_›ts


88 
ö_addr
 
	mù_d°
;

89 
	mù_›ts
[40];

93 
	sù_mªqn


95 
ö_addr
 
	mimr_mu…üddr
;

96 
ö_addr
 
	mimr_addªss
;

97 
	mimr_ifödex
;

101 
	sö_pktöfo


103 
	mùi_ifödex
;

104 
ö_addr
 
	mùi_•ec_d°
;

105 
ö_addr
 
	mùi_addr
;

112 
	#IPV6_ADDRFORM
 1

	)

113 
	#IPV6_2292PKTINFO
 2

	)

114 
	#IPV6_2292HOPOPTS
 3

	)

115 
	#IPV6_2292DSTOPTS
 4

	)

116 
	#IPV6_2292RTHDR
 5

	)

117 
	#IPV6_2292PKTOPTIONS
 6

	)

118 
	#IPV6_CHECKSUM
 7

	)

119 
	#IPV6_2292HOPLIMIT
 8

	)

121 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

123 
	#IPV6_NEXTHOP
 9

	)

124 
	#IPV6_AUTHHDR
 10

	)

125 
	#IPV6_UNICAST_HOPS
 16

	)

126 
	#IPV6_MULTICAST_IF
 17

	)

127 
	#IPV6_MULTICAST_HOPS
 18

	)

128 
	#IPV6_MULTICAST_LOOP
 19

	)

129 
	#IPV6_JOIN_GROUP
 20

	)

130 
	#IPV6_LEAVE_GROUP
 21

	)

131 
	#IPV6_ROUTER_ALERT
 22

	)

132 
	#IPV6_MTU_DISCOVER
 23

	)

133 
	#IPV6_MTU
 24

	)

134 
	#IPV6_RECVERR
 25

	)

135 
	#IPV6_V6ONLY
 26

	)

136 
	#IPV6_JOIN_ANYCAST
 27

	)

137 
	#IPV6_LEAVE_ANYCAST
 28

	)

138 
	#IPV6_IPSEC_POLICY
 34

	)

139 
	#IPV6_XFRM_POLICY
 35

	)

141 
	#IPV6_RECVPKTINFO
 49

	)

142 
	#IPV6_PKTINFO
 50

	)

143 
	#IPV6_RECVHOPLIMIT
 51

	)

144 
	#IPV6_HOPLIMIT
 52

	)

145 
	#IPV6_RECVHOPOPTS
 53

	)

146 
	#IPV6_HOPOPTS
 54

	)

147 
	#IPV6_RTHDRDSTOPTS
 55

	)

148 
	#IPV6_RECVRTHDR
 56

	)

149 
	#IPV6_RTHDR
 57

	)

150 
	#IPV6_RECVDSTOPTS
 58

	)

151 
	#IPV6_DSTOPTS
 59

	)

153 
	#IPV6_RECVTCLASS
 66

	)

154 
	#IPV6_TCLASS
 67

	)

157 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

158 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

159 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

160 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

163 
	#IPV6_PMTUDISC_DONT
 0

	)

164 
	#IPV6_PMTUDISC_WANT
 1

	)

165 
	#IPV6_PMTUDISC_DO
 2

	)

166 
	#IPV6_PMTUDISC_PROBE
 3

	)

169 
	#SOL_IPV6
 41

	)

170 
	#SOL_ICMPV6
 58

	)

173 
	#IPV6_RTHDR_LOOSE
 0

	)

174 
	#IPV6_RTHDR_STRICT
 1

	)

176 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/ioctl-types.h

20 #i‚de‡
_SYS_IOCTL_H


25 
	~<asm/io˘ls.h
>

28 
	swösize


30 
	mws_row
;

31 
	mws_cﬁ
;

32 
	mws_xpixñ
;

33 
	mws_ypixñ
;

36 
	#NCC
 8

	)

37 
	sãrmio


39 
	mc_iÊag
;

40 
	mc_oÊag
;

41 
	mc_cÊag
;

42 
	mc_lÊag
;

43 
	mc_löe
;

44 
	mc_cc
[
NCC
];

48 
	#TIOCM_LE
 0x001

	)

49 
	#TIOCM_DTR
 0x002

	)

50 
	#TIOCM_RTS
 0x004

	)

51 
	#TIOCM_ST
 0x008

	)

52 
	#TIOCM_SR
 0x010

	)

53 
	#TIOCM_CTS
 0x020

	)

54 
	#TIOCM_CAR
 0x040

	)

55 
	#TIOCM_RNG
 0x080

	)

56 
	#TIOCM_DSR
 0x100

	)

57 
	#TIOCM_CD
 
TIOCM_CAR


	)

58 
	#TIOCM_RI
 
TIOCM_RNG


	)

63 
	#N_TTY
 0

	)

64 
	#N_SLIP
 1

	)

65 
	#N_MOUSE
 2

	)

66 
	#N_PPP
 3

	)

67 
	#N_STRIP
 4

	)

68 
	#N_AX25
 5

	)

69 
	#N_X25
 6

	)

70 
	#N_6PACK
 7

	)

71 
	#N_MASC
 8

	)

72 
	#N_R3964
 9

	)

73 
	#N_PROFIBUS_FDL
 10

	)

74 
	#N_IRDA
 11

	)

75 
	#N_SMSBLOCK
 12

	)

76 
	#N_HDLC
 13

	)

77 
	#N_SYNC_PPP
 14

	)

78 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	#SIOCADDRT
 0x890B

	)

28 
	#SIOCDELRT
 0x890C

	)

29 
	#SIOCRTMSG
 0x890D

	)

32 
	#SIOCGIFNAME
 0x8910

	)

33 
	#SIOCSIFLINK
 0x8911

	)

34 
	#SIOCGIFCONF
 0x8912

	)

35 
	#SIOCGIFFLAGS
 0x8913

	)

36 
	#SIOCSIFFLAGS
 0x8914

	)

37 
	#SIOCGIFADDR
 0x8915

	)

38 
	#SIOCSIFADDR
 0x8916

	)

39 
	#SIOCGIFDSTADDR
 0x8917

	)

40 
	#SIOCSIFDSTADDR
 0x8918

	)

41 
	#SIOCGIFBRDADDR
 0x8919

	)

42 
	#SIOCSIFBRDADDR
 0x891®

	)

43 
	#SIOCGIFNETMASK
 0x891b

	)

44 
	#SIOCSIFNETMASK
 0x891¯

	)

45 
	#SIOCGIFMETRIC
 0x891d

	)

46 
	#SIOCSIFMETRIC
 0x891ê

	)

47 
	#SIOCGIFMEM
 0x891‡

	)

48 
	#SIOCSIFMEM
 0x8920

	)

49 
	#SIOCGIFMTU
 0x8921

	)

50 
	#SIOCSIFMTU
 0x8922

	)

51 
	#SIOCSIFNAME
 0x8923

	)

52 
	#SIOCSIFHWADDR
 0x8924

	)

53 
	#SIOCGIFENCAP
 0x8925

	)

54 
	#SIOCSIFENCAP
 0x8926

	)

55 
	#SIOCGIFHWADDR
 0x8927

	)

56 
	#SIOCGIFSLAVE
 0x8929

	)

57 
	#SIOCSIFSLAVE
 0x8930

	)

58 
	#SIOCADDMULTI
 0x8931

	)

59 
	#SIOCDELMULTI
 0x8932

	)

60 
	#SIOCGIFINDEX
 0x8933

	)

61 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

62 
	#SIOCSIFPFLAGS
 0x8934

	)

63 
	#SIOCGIFPFLAGS
 0x8935

	)

64 
	#SIOCDIFADDR
 0x8936

	)

65 
	#SIOCSIFHWBROADCAST
 0x8937

	)

66 
	#SIOCGIFCOUNT
 0x8938

	)

68 
	#SIOCGIFBR
 0x8940

	)

69 
	#SIOCSIFBR
 0x8941

	)

71 
	#SIOCGIFTXQLEN
 0x8942

	)

72 
	#SIOCSIFTXQLEN
 0x8943

	)

77 
	#SIOCDARP
 0x8953

	)

78 
	#SIOCGARP
 0x8954

	)

79 
	#SIOCSARP
 0x8955

	)

82 
	#SIOCDRARP
 0x8960

	)

83 
	#SIOCGRARP
 0x8961

	)

84 
	#SIOCSRARP
 0x8962

	)

88 
	#SIOCGIFMAP
 0x8970

	)

89 
	#SIOCSIFMAP
 0x8971

	)

93 
	#SIOCADDDLCI
 0x8980

	)

94 
	#SIOCDELDLCI
 0x8981

	)

103 
	#SIOCDEVPRIVATE
 0x89F0

	)

109 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/netdb.h

19 #i‚de‡
_NETDB_H


27 
	s√ã¡


29 *
	mn_«me
;

30 **
	mn_Æü£s
;

31 
	mn_addπy≥
;

32 
uöt32_t
 
	mn_√t
;

	@/usr/include/bits/posix_opt.h

20 #i‚def 
_BITS_POSIX_OPT_H


21 
	#_BITS_POSIX_OPT_H
 1

	)

24 
	#_POSIX_JOB_CONTROL
 1

	)

27 
	#_POSIX_SAVED_IDS
 1

	)

30 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

33 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

36 
	#_POSIX_FSYNC
 200809L

	)

39 
	#_POSIX_MAPPED_FILES
 200809L

	)

42 
	#_POSIX_MEMLOCK
 200809L

	)

45 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

48 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

51 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

55 
	#_POSIX_VDISABLE
 '\0'

	)

58 
	#_POSIX_NO_TRUNC
 1

	)

61 
	#_XOPEN_REALTIME
 1

	)

64 
	#_XOPEN_REALTIME_THREADS
 1

	)

67 
	#_XOPEN_SHM
 1

	)

70 
	#_POSIX_THREADS
 200809L

	)

73 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

74 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

77 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

80 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

83 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

86 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

90 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

92 #ifde‡
__USE_XOPEN2K8


94 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

97 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

101 
	#_POSIX_SEMAPHORES
 200809L

	)

104 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

107 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

108 
	#_POSIX_ASYNC_IO
 1

	)

110 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

112 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

115 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

118 
	#_LFS_LARGEFILE
 1

	)

119 
	#_LFS64_LARGEFILE
 1

	)

120 
	#_LFS64_STDIO
 1

	)

123 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

126 
	#_POSIX_CPUTIME
 0

	)

129 
	#_POSIX_THREAD_CPUTIME
 0

	)

132 
	#_POSIX_REGEXP
 1

	)

135 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

138 
	#_POSIX_SHELL
 1

	)

141 
	#_POSIX_TIMEOUTS
 200809L

	)

144 
	#_POSIX_SPIN_LOCKS
 200809L

	)

147 
	#_POSIX_SPAWN
 200809L

	)

150 
	#_POSIX_TIMERS
 200809L

	)

153 
	#_POSIX_BARRIERS
 200809L

	)

156 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

159 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

162 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

165 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

168 
	#_POSIX_ADVISORY_INFO
 200809L

	)

171 
	#_POSIX_IPV6
 200809L

	)

174 
	#_POSIX_RAW_SOCKETS
 200809L

	)

177 
	#_POSIX2_CHAR_TERM
 200809L

	)

180 
	#_POSIX_SPORADIC_SERVER
 -1

	)

181 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

184 
	#_POSIX_TRACE
 -1

	)

185 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

186 
	#_POSIX_TRACE_INHERIT
 -1

	)

187 
	#_POSIX_TRACE_LOG
 -1

	)

190 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

193 
	#_XOPEN_STREAMS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

19 #i‚de‡
_BITS_PTHREADTYPES_H


20 
	#_BITS_PTHREADTYPES_H
 1

	)

22 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

23 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

24 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

25 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

26 
	#__SIZEOF_PTHREAD_COND_COMPAT_T
 12

	)

27 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

29 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

30 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

31 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	t±hªad_t
;

41 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

42 
	m__Æign
;

43 } 
	t±hªad_©å_t
;

46 
	s__±hªad_öã∫Æ_¶i°


48 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

49 } 
	t__±hªad_¶i°_t
;

56 
	s__±hªad_muãx_s


58 
	m__lock
;

59 
	m__cou¡
;

60 
	m__ow√r
;

63 
	m__köd
;

64 
	m__nu£rs
;

65 
__exãnsi⁄__
 union

67 
	m__•ös
;

68 
__±hªad_¶i°_t
 
	m__li°
;

70 } 
	m__d©a
;

71 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

72 
	m__Æign
;

73 } 
	t±hªad_muãx_t
;

77 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

78 
	m__Æign
;

79 } 
	t±hªad_muãx©å_t
;

88 
	m__lock
;

89 
	m__fuãx
;

90 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

91 
__exãnsi⁄__
 
	m__wakeup_£q
;

92 
__exãnsi⁄__
 
	m__wokí_£q
;

93 *
	m__muãx
;

94 
	m__nwaôîs
;

95 
	m__brﬂdˇ°_£q
;

96 } 
	m__d©a
;

97 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

98 
__exãnsi⁄__
 
	m__Æign
;

99 } 
	t±hªad_c⁄d_t
;

103 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

104 
	m__Æign
;

105 } 
	t±hªad_c⁄d©å_t
;

109 
	t±hªad_key_t
;

113 
	t±hªad_⁄˚_t
;

116 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


123 
	m__lock
;

124 
	m__ƒ_ªadîs
;

125 
	m__ªadîs_wakeup
;

126 
	m__wrôî_wakeup
;

127 
	m__ƒ_ªadîs_queued
;

128 
	m__ƒ_wrôîs_queued
;

131 
	m__Êags
;

132 
	m__sh¨ed
;

133 
	m__∑d1
;

134 
	m__∑d2
;

135 
	m__wrôî
;

136 } 
	m__d©a
;

137 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

138 
	m__Æign
;

139 } 
	t±hªad_rwlock_t
;

143 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

144 
	m__Æign
;

145 } 
	t±hªad_rwlock©å_t
;

149 #ifde‡
__USE_XOPEN2K


151 vﬁ©ûê
	t±hªad_•ölock_t
;

158 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

159 
	m__Æign
;

160 } 
	t±hªad_b¨rõr_t
;

164 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

165 
	m__Æign
;

166 } 
	t±hªad_b¨rõøâr_t
;

171 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


24 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

26 
	#__FD_ZERO
(
fd•
) \

28 
__d0
, 
__d1
; \

29 
__asm__
 
	`__vﬁ©ûe__
 ("cld;Ñep; stosl" \

30 : "=c" (
__d0
), "=D" (
__d1
) \

31 : "a" (0), "0" ( (
fd_£t
) \

32 /  (
__fd_mask
)), \

33 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

35 } 0)

	)

37 
	#__FD_SET
(
fd
, 
fd•
) \

38 
__asm__
 
	`__vﬁ©ûe__
 ("btsl %1,%0" \

39 : "=m" (
	`__FDS_BITS
 (
fd•
)[
	`__FDELT
 (
fd
)]) \

40 : "r" (((Ë(
fd
)Ë% 
__NFDBITS
) \

41 : "cc","mem‹y")

	)

42 
	#__FD_CLR
(
fd
, 
fd•
) \

43 
__asm__
 
	`__vﬁ©ûe__
 ("btrl %1,%0" \

44 : "=m" (
	`__FDS_BITS
 (
fd•
)[
	`__FDELT
 (
fd
)]) \

45 : "r" (((Ë(
fd
)Ë% 
__NFDBITS
) \

46 : "cc","mem‹y")

	)

47 
	#__FD_ISSET
(
fd
, 
fd•
) \

48 (
__exãnsi⁄__
 \

49 ({
__ªsu…
; \

50 
__asm__
 
	`__vﬁ©ûe__
 ("btl %1,%2 ; setcb %b0" \

51 : "=q" (
__ªsu…
) \

52 : "r" (((Ë(
fd
)Ë% 
__NFDBITS
), \

53 "m" (
	`__FDS_BITS
 (
fd•
)[
	`__FDELT
 (
fd
)]) \

55 
__ªsu…
; }))

	)

61 
	#__FD_ZERO
(
£t
) \

63 
__i
; \

64 
fd_£t
 *
__¨r
 = (
£t
); \

65 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

66 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

67 } 0)

	)

68 
	#__FD_SET
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] |
	`__FDMASK
 (d))

	)

69 
	#__FD_CLR
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] &~
	`__FDMASK
 (d))

	)

70 
	#__FD_ISSET
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] & 
	`__FDMASK
 (d))

	)

	@/usr/include/bits/semaphore.h

20 #i‚de‡
_SEMAPHORE_H


25 
	#__SIZEOF_SEM_T
 16

	)

29 
	#SEM_FAILED
 ((
£m_t
 *Ë0)

	)

34 
	m__size
[
__SIZEOF_SEM_T
];

35 
	m__Æign
;

36 } 
	t£m_t
;

	@/usr/include/bits/setjmp.h

21 #i‚de‡
_BITS_SETJMP_H


22 
	#_BITS_SETJMP_H
 1

	)

24 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


28 #i‚def 
_ASM


29 
	t__jmp_buf
[6];

	@/usr/include/bits/siginfo.h

20 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

21 && !
deföed
 
	g__√ed_sigevít_t


25 
	~<bôs/w‹dsize.h
>

27 #i‡(!
deföed
 
__have_sigvÆ_t
 \

28 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

29 || 
deföed
 
	g__√ed_sigevít_t
))

30 
	#__have_sigvÆ_t
 1

	)

33 
	usigvÆ


35 
	msivÆ_öt
;

36 *
	msivÆ_±r
;

37 } 
	tsigvÆ_t
;

40 #i‡(!
deföed
 
__have_sigöfo_t
 \

41 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

42 
	#__have_sigöfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #i‡
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

51 
	ssigöfo


53 
	msi_signo
;

54 
	msi_î∫o
;

56 
	msi_code
;

60 
	m_∑d
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kûl
;

72 
	msi_tid
;

73 
	msi_ovîrun
;

74 
sigvÆ_t
 
	msi_sigvÆ
;

75 } 
	m_timî
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvÆ_t
 
	msi_sigvÆ
;

83 } 
	m_π
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__˛ock_t
 
	msi_utime
;

92 
__˛ock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigÁu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpﬁl
;

107 } 
	m_sifõlds
;

108 } 
	tsigöfo_t
;

112 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

113 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

114 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

115 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

116 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

120 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

121 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

122 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

123 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

124 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #unde‡
__√ed_sigöfo_t


261 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

262 && !
deföed
 
	g__have_sigevít_t


263 
	#__have_sigevít_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #i‡
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

273 
	ssigevít


275 
sigvÆ_t
 
	msigev_vÆue
;

276 
	msigev_signo
;

277 
	msigev_nŸify
;

281 
	m_∑d
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

290 *
	m_©åibuã
;

291 } 
	m_sigev_thªad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevít_t
;

296 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

297 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/sigset.h

21 #i‚def 
_SIGSET_H_ty≥s


22 
	#_SIGSET_H_ty≥s
 1

	)

24 
	t__sig_©omic_t
;

28 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

31 
	m__vÆ
[
_SIGSET_NWORDS
];

32 } 
	t__sig£t_t
;

43 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


44 
	#_SIGSET_H_‚s
 1

	)

46 #i‚de‡
_EXTERN_INLINE


47 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

51 
	#__sigmask
(
sig
) \

52 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

55 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

57 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

58 
	#__sigem±y£t
(
£t
) \

59 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

60 
sig£t_t
 *
__£t
 = (
£t
); \

61 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

62 0; }))

	)

63 
	#__sigfûl£t
(
£t
) \

64 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

65 
sig£t_t
 *
__£t
 = (
£t
); \

66 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

67 0; }))

	)

69 #ifde‡
__USE_GNU


73 
	#__sigi£m±y£t
(
£t
) \

74 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

75 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

76 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

77 !
__ªt
 && --
__˙t
 >= 0) \

78 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

79 
__ªt
 =0; }))

	)

80 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

81 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

82 
sig£t_t
 *
__de°
 = (
de°
); \

83 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

84 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

85 --
__˙t
 >= 0) \

86 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

87 & 
__right
->
__vÆ
[
__˙t
]); \

88 0; }))

	)

89 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

90 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

91 
sig£t_t
 *
__de°
 = (
de°
); \

92 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

93 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

94 --
__˙t
 >= 0) \

95 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

96 | 
__right
->
__vÆ
[
__˙t
]); \

97 0; }))

	)

104 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

105 
__sigadd£t
 (
__sig£t_t
 *, );

106 
__sigdñ£t
 (
__sig£t_t
 *, );

108 #ifde‡
__USE_EXTERN_INLINES


109 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

110 
_EXTERN_INLINE
 \

111 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

113 
__mask
 = 
	`__sigmask
 (
__sig
); \

114 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

115  
BODY
; \

116 }

	)

118 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

119 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

120 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

122 #unde‡
__SIGSETFN


	@/usr/include/bits/socket.h

21 #i‚de‡
__BITS_SOCKET_H


22 
	#__BITS_SOCKET_H


	)

24 #i‚de‡
_SYS_SOCKET_H


28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	~<sys/ty≥s.h
>

34 #i‚de‡
__sockÀn_t_deföed


35 
__sockÀn_t
 
	tsockÀn_t
;

36 
	#__sockÀn_t_deföed


	)

40 
	e__sockë_ty≥


42 
	mSOCK_STREAM
 = 1,

44 
	#SOCK_STREAM
 
SOCK_STREAM


	)

45 
	mSOCK_DGRAM
 = 2,

47 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

48 
	mSOCK_RAW
 = 3,

49 
	#SOCK_RAW
 
SOCK_RAW


	)

50 
	mSOCK_RDM
 = 4,

51 
	#SOCK_RDM
 
SOCK_RDM


	)

52 
	mSOCK_SEQPACKET
 = 5,

54 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

55 
	mSOCK_DCCP
 = 6,

56 
	#SOCK_DCCP
 
SOCK_DCCP


	)

57 
	mSOCK_PACKET
 = 10,

60 
	#SOCK_PACKET
 
SOCK_PACKET


	)

65 
	mSOCK_CLOEXEC
 = 02000000,

67 
	#SOCK_CLOEXEC
 
SOCK_CLOEXEC


	)

68 
	mSOCK_NONBLOCK
 = 04000

70 
	#SOCK_NONBLOCK
 
SOCK_NONBLOCK


	)

74 
	#PF_UNSPEC
 0

	)

75 
	#PF_LOCAL
 1

	)

76 
	#PF_UNIX
 
PF_LOCAL


	)

77 
	#PF_FILE
 
PF_LOCAL


	)

78 
	#PF_INET
 2

	)

79 
	#PF_AX25
 3

	)

80 
	#PF_IPX
 4

	)

81 
	#PF_APPLETALK
 5

	)

82 
	#PF_NETROM
 6

	)

83 
	#PF_BRIDGE
 7

	)

84 
	#PF_ATMPVC
 8

	)

85 
	#PF_X25
 9

	)

86 
	#PF_INET6
 10

	)

87 
	#PF_ROSE
 11

	)

88 
	#PF_DEC√t
 12

	)

89 
	#PF_NETBEUI
 13

	)

90 
	#PF_SECURITY
 14

	)

91 
	#PF_KEY
 15

	)

92 
	#PF_NETLINK
 16

	)

93 
	#PF_ROUTE
 
PF_NETLINK


	)

94 
	#PF_PACKET
 17

	)

95 
	#PF_ASH
 18

	)

96 
	#PF_ECONET
 19

	)

97 
	#PF_ATMSVC
 20

	)

98 
	#PF_RDS
 21

	)

99 
	#PF_SNA
 22

	)

100 
	#PF_IRDA
 23

	)

101 
	#PF_PPPOX
 24

	)

102 
	#PF_WANPIPE
 25

	)

103 
	#PF_LLC
 26

	)

104 
	#PF_CAN
 29

	)

105 
	#PF_TIPC
 30

	)

106 
	#PF_BLUETOOTH
 31

	)

107 
	#PF_IUCV
 32

	)

108 
	#PF_RXRPC
 33

	)

109 
	#PF_ISDN
 34

	)

110 
	#PF_PHONET
 35

	)

111 
	#PF_IEEE802154
 36

	)

112 
	#PF_MAX
 37

	)

115 
	#AF_UNSPEC
 
PF_UNSPEC


	)

116 
	#AF_LOCAL
 
PF_LOCAL


	)

117 
	#AF_UNIX
 
PF_UNIX


	)

118 
	#AF_FILE
 
PF_FILE


	)

119 
	#AF_INET
 
PF_INET


	)

120 
	#AF_AX25
 
PF_AX25


	)

121 
	#AF_IPX
 
PF_IPX


	)

122 
	#AF_APPLETALK
 
PF_APPLETALK


	)

123 
	#AF_NETROM
 
PF_NETROM


	)

124 
	#AF_BRIDGE
 
PF_BRIDGE


	)

125 
	#AF_ATMPVC
 
PF_ATMPVC


	)

126 
	#AF_X25
 
PF_X25


	)

127 
	#AF_INET6
 
PF_INET6


	)

128 
	#AF_ROSE
 
PF_ROSE


	)

129 
	#AF_DEC√t
 
PF_DEC√t


	)

130 
	#AF_NETBEUI
 
PF_NETBEUI


	)

131 
	#AF_SECURITY
 
PF_SECURITY


	)

132 
	#AF_KEY
 
PF_KEY


	)

133 
	#AF_NETLINK
 
PF_NETLINK


	)

134 
	#AF_ROUTE
 
PF_ROUTE


	)

135 
	#AF_PACKET
 
PF_PACKET


	)

136 
	#AF_ASH
 
PF_ASH


	)

137 
	#AF_ECONET
 
PF_ECONET


	)

138 
	#AF_ATMSVC
 
PF_ATMSVC


	)

139 
	#AF_RDS
 
PF_RDS


	)

140 
	#AF_SNA
 
PF_SNA


	)

141 
	#AF_IRDA
 
PF_IRDA


	)

142 
	#AF_PPPOX
 
PF_PPPOX


	)

143 
	#AF_WANPIPE
 
PF_WANPIPE


	)

144 
	#AF_LLC
 
PF_LLC


	)

145 
	#AF_CAN
 
PF_CAN


	)

146 
	#AF_TIPC
 
PF_TIPC


	)

147 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

148 
	#AF_IUCV
 
PF_IUCV


	)

149 
	#AF_RXRPC
 
PF_RXRPC


	)

150 
	#AF_ISDN
 
PF_ISDN


	)

151 
	#AF_PHONET
 
PF_PHONET


	)

152 
	#AF_IEEE802154
 
PF_IEEE802154


	)

153 
	#AF_MAX
 
PF_MAX


	)

159 
	#SOL_RAW
 255

	)

160 
	#SOL_DECNET
 261

	)

161 
	#SOL_X25
 262

	)

162 
	#SOL_PACKET
 263

	)

163 
	#SOL_ATM
 264

	)

164 
	#SOL_AAL
 265

	)

165 
	#SOL_IRDA
 266

	)

168 
	#SOMAXCONN
 128

	)

171 
	~<bôs/sockaddr.h
>

174 
	ssockaddr


176 
__SOCKADDR_COMMON
 (
ß_
);

177 
	mß_d©a
[14];

183 
	#__ss_Æig¡y≥
 

	)

184 
	#_SS_SIZE
 128

	)

185 
	#_SS_PADSIZE
 (
_SS_SIZE
 - (2 *  (
__ss_Æig¡y≥
)))

	)

187 
	ssockaddr_°‹age


189 
__SOCKADDR_COMMON
 (
ss_
);

190 
__ss_Æig¡y≥
 
	m__ss_Æign
;

191 
	m__ss_∑ddög
[
_SS_PADSIZE
];

198 
	mMSG_OOB
 = 0x01,

199 
	#MSG_OOB
 
MSG_OOB


	)

200 
	mMSG_PEEK
 = 0x02,

201 
	#MSG_PEEK
 
MSG_PEEK


	)

202 
	mMSG_DONTROUTE
 = 0x04,

203 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

204 #ifde‡
__USE_GNU


206 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

207 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

209 
	mMSG_CTRUNC
 = 0x08,

210 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

211 
	mMSG_PROXY
 = 0x10,

212 
	#MSG_PROXY
 
MSG_PROXY


	)

213 
	mMSG_TRUNC
 = 0x20,

214 
	#MSG_TRUNC
 
MSG_TRUNC


	)

215 
	mMSG_DONTWAIT
 = 0x40,

216 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

217 
	mMSG_EOR
 = 0x80,

218 
	#MSG_EOR
 
MSG_EOR


	)

219 
	mMSG_WAITALL
 = 0x100,

220 
	#MSG_WAITALL
 
MSG_WAITALL


	)

221 
	mMSG_FIN
 = 0x200,

222 
	#MSG_FIN
 
MSG_FIN


	)

223 
	mMSG_SYN
 = 0x400,

224 
	#MSG_SYN
 
MSG_SYN


	)

225 
	mMSG_CONFIRM
 = 0x800,

226 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

227 
	mMSG_RST
 = 0x1000,

228 
	#MSG_RST
 
MSG_RST


	)

229 
	mMSG_ERRQUEUE
 = 0x2000,

230 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

231 
	mMSG_NOSIGNAL
 = 0x4000,

232 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

233 
	mMSG_MORE
 = 0x8000,

234 
	#MSG_MORE
 
MSG_MORE


	)

236 
	mMSG_CMSG_CLOEXEC
 = 0x40000000

239 
	#MSG_CMSG_CLOEXEC
 
MSG_CMSG_CLOEXEC


	)

245 
	smsghdr


247 *
	mmsg_«me
;

248 
sockÀn_t
 
	mmsg_«mñí
;

250 
iovec
 *
	mmsg_iov
;

251 
size_t
 
	mmsg_iovÀn
;

253 *
	mmsg_c⁄åﬁ
;

254 
size_t
 
	mmsg_c⁄åﬁÀn
;

259 
	mmsg_Êags
;

263 
	scmsghdr


265 
size_t
 
	mcmsg_Àn
;

270 
	mcmsg_Àvñ
;

271 
	mcmsg_ty≥
;

272 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

273 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

278 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

279 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

281 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

283 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

284 
	#CMSG_FIRSTHDR
(
mhdr
) \

285 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

286 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë0)

	)

287 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

288 & (
size_t
Ë~( (size_tË- 1))

	)

289 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

290 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

291 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

293 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

294 
cmsghdr
 *
__cmsg
Ë
__THROW
;

295 #ifde‡
__USE_EXTERN_INLINES


296 #i‚de‡
_EXTERN_INLINE


297 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

299 
_EXTERN_INLINE
 
cmsghdr
 *

300 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

302 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

306 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

307 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

308 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


309 + 
__mhdr
->
msg_c⁄åﬁÀn
)

310 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

311 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

314  
__cmsg
;

315 
	}
}

322 
	mSCM_RIGHTS
 = 0x01

323 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

324 #ifde‡
__USE_GNU


325 , 
	mSCM_CREDENTIALS
 = 0x02

326 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

330 #ifde‡
__USE_GNU


332 
	su¸ed


334 
pid_t
 
	mpid
;

335 
uid_t
 
	muid
;

336 
gid_t
 
	mgid
;

341 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


342 #i‚de‡
FIOGETOWN


343 
	#__SYS_SOCKET_H_undef_FIOGETOWN


	)

345 #i‚de‡
FIOSETOWN


346 
	#__SYS_SOCKET_H_undef_FIOSETOWN


	)

348 #i‚de‡
SIOCATMARK


349 
	#__SYS_SOCKET_H_undef_SIOCATMARK


	)

351 #i‚de‡
SIOCGPGRP


352 
	#__SYS_SOCKET_H_undef_SIOCGPGRP


	)

354 #i‚de‡
SIOCGSTAMP


355 
	#__SYS_SOCKET_H_undef_SIOCGSTAMP


	)

357 #i‚de‡
SIOCGSTAMPNS


358 
	#__SYS_SOCKET_H_undef_SIOCGSTAMPNS


	)

360 #i‚de‡
SIOCSPGRP


361 
	#__SYS_SOCKET_H_undef_SIOCSPGRP


	)

366 
	~<asm/sockë.h
>

368 #i‡!
deföed
 
__USE_MISC
 && !deföed 
__USE_GNU


369 #ifde‡
__SYS_SOCKET_H_undef_FIOGETOWN


370 #unde‡
__SYS_SOCKET_H_undef_FIOGETOWN


371 #unde‡
FIOGETOWN


373 #ifde‡
__SYS_SOCKET_H_undef_FIOSETOWN


374 #unde‡
__SYS_SOCKET_H_undef_FIOSETOWN


375 #unde‡
FIOSETOWN


377 #ifde‡
__SYS_SOCKET_H_undef_SIOCATMARK


378 #unde‡
__SYS_SOCKET_H_undef_SIOCATMARK


379 #unde‡
SIOCATMARK


381 #ifde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


382 #unde‡
__SYS_SOCKET_H_undef_SIOCGPGRP


383 #unde‡
SIOCGPGRP


385 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


386 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMP


387 #unde‡
SIOCGSTAMP


389 #ifde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


390 #unde‡
__SYS_SOCKET_H_undef_SIOCGSTAMPNS


391 #unde‡
SIOCGSTAMPNS


393 #ifde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


394 #unde‡
__SYS_SOCKET_H_undef_SIOCSPGRP


395 #unde‡
SIOCSPGRP


400 
	slögî


402 
	ml_⁄off
;

403 
	ml_lögî
;

	@/usr/include/bits/socket2.h

20 #i‚de‡
_SYS_SOCKET_H


24 
ssize_t
 
__ªcv_chk
 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

25 
__Êags
);

26 
ssize_t
 
__REDIRECT
 (
__ªcv_Æüs
, (
__fd
, *
__buf
, 
size_t
 
__n
,

27 
__Êags
), 
ªcv
);

28 
ssize_t
 
__REDIRECT
 (
__ªcv_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__n
, size_à
__buÊí
,

30 
__Êags
), 
__ªcv_chk
)

31 
__w¨«âr
 ("recv called with biggerÜengthÅhan size of destination "

34 
__exã∫_Æways_ölöe
 
ssize_t


35 
	$ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

40  
	`__ªcv_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

42 i‡(
__n
 > 
	`__bos0
 (
__buf
))

43  
	`__ªcv_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
);

45  
	`__ªcv_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
);

46 
	}
}

48 
ssize_t
 
__ªcv‰om_chk
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

49 
size_t
 
__buÊí
, 
__Êags
,

50 
__SOCKADDR_ARG
 
__addr
,

51 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

52 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_Æüs
,

53 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

54 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

55 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
ªcv‰om
);

56 
ssize_t
 
__REDIRECT
 (
__ªcv‰om_chk_w¨n
,

57 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

58 
size_t
 
__buÊí
, 
__Êags
,

59 
__SOCKADDR_ARG
 
__addr
,

60 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
), 
__ªcv‰om_chk
)

61 
__w¨«âr
 ("recvfrom called with biggerÜengthÅhan size of "

64 
__exã∫_Æways_ölöe
 
ssize_t


65 
	$ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
, 
__Êags
,

66 
__SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
)

68 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

70 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

71  
	`__ªcv‰om_chk
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

72 
__addr
, 
__addr_Àn
);

73 i‡(
__n
 > 
	`__bos0
 (
__buf
))

74  
	`__ªcv‰om_chk_w¨n
 (
__fd
, 
__buf
, 
__n
, 
	`__bos0
 (__buf), 
__Êags
,

75 
__addr
, 
__addr_Àn
);

77  
	`__ªcv‰om_Æüs
 (
__fd
, 
__buf
, 
__n
, 
__Êags
, 
__addr
, 
__addr_Àn
);

78 
	}
}

	@/usr/include/bits/stat.h

19 #i‚de‡
_SYS_STAT_H


24 
	#_STAT_VER_LINUX_OLD
 1

	)

25 
	#_STAT_VER_KERNEL
 1

	)

26 
	#_STAT_VER_SVR4
 2

	)

27 
	#_STAT_VER_LINUX
 3

	)

28 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

31 
	#_MKNOD_VER_LINUX
 1

	)

32 
	#_MKNOD_VER_SVR4
 2

	)

33 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

36 
	s°©


38 
__dev_t
 
	m°_dev
;

39 
	m__∑d1
;

40 #i‚de‡
__USE_FILE_OFFSET64


41 
__öo_t
 
	m°_öo
;

43 
__öo_t
 
	m__°_öo
;

45 
__mode_t
 
	m°_mode
;

46 
__∆ök_t
 
	m°_∆ök
;

47 
__uid_t
 
	m°_uid
;

48 
__gid_t
 
	m°_gid
;

49 
__dev_t
 
	m°_rdev
;

50 
	m__∑d2
;

51 #i‚de‡
__USE_FILE_OFFSET64


52 
__off_t
 
	m°_size
;

54 
__off64_t
 
	m°_size
;

56 
__blksize_t
 
	m°_blksize
;

58 #i‚de‡
__USE_FILE_OFFSET64


59 
__blk˙t_t
 
	m°_blocks
;

61 
__blk˙t64_t
 
	m°_blocks
;

63 #ifde‡
__USE_MISC


70 
time•ec
 
	m°_©im
;

71 
time•ec
 
	m°_mtim
;

72 
time•ec
 
	m°_˘im
;

73 
	#°_©ime
 
°_©im
.
tv_£c


	)

74 
	#°_mtime
 
°_mtim
.
tv_£c


	)

75 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

77 
__time_t
 
	m°_©ime
;

78 
	m°_©imí£c
;

79 
__time_t
 
	m°_mtime
;

80 
	m°_mtimí£c
;

81 
__time_t
 
	m°_˘ime
;

82 
	m°_˘imí£c
;

84 #i‚de‡
__USE_FILE_OFFSET64


85 
	m__unu£d4
;

86 
	m__unu£d5
;

88 
__öo64_t
 
	m°_öo
;

92 #ifde‡
__USE_LARGEFILE64


93 
	s°©64


95 
__dev_t
 
	m°_dev
;

96 
	m__∑d1
;

98 
__öo_t
 
	m__°_öo
;

99 
__mode_t
 
	m°_mode
;

100 
__∆ök_t
 
	m°_∆ök
;

101 
__uid_t
 
	m°_uid
;

102 
__gid_t
 
	m°_gid
;

103 
__dev_t
 
	m°_rdev
;

104 
	m__∑d2
;

105 
__off64_t
 
	m°_size
;

106 
__blksize_t
 
	m°_blksize
;

108 
__blk˙t64_t
 
	m°_blocks
;

109 #ifde‡
__USE_MISC


116 
time•ec
 
	m°_©im
;

117 
time•ec
 
	m°_mtim
;

118 
time•ec
 
	m°_˘im
;

120 
__time_t
 
	m°_©ime
;

121 
	m°_©imí£c
;

122 
__time_t
 
	m°_mtime
;

123 
	m°_mtimí£c
;

124 
__time_t
 
	m°_˘ime
;

125 
	m°_˘imí£c
;

127 
__öo64_t
 
	m°_öo
;

132 
	#_STATBUF_ST_BLKSIZE


	)

133 
	#_STATBUF_ST_RDEV


	)

135 
	#_STATBUF_ST_NSEC


	)

139 
	#__S_IFMT
 0170000

	)

142 
	#__S_IFDIR
 0040000

	)

143 
	#__S_IFCHR
 0020000

	)

144 
	#__S_IFBLK
 0060000

	)

145 
	#__S_IFREG
 0100000

	)

146 
	#__S_IFIFO
 0010000

	)

147 
	#__S_IFLNK
 0120000

	)

148 
	#__S_IFSOCK
 0140000

	)

152 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

153 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

154 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

158 
	#__S_ISUID
 04000

	)

159 
	#__S_ISGID
 02000

	)

160 
	#__S_ISVTX
 01000

	)

161 
	#__S_IREAD
 0400

	)

162 
	#__S_IWRITE
 0200

	)

163 
	#__S_IEXEC
 0100

	)

165 #ifde‡
__USE_ATFILE


166 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

167 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

20 #i‚de‡
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

26 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

27 
	$__LDBL_REDIR_DECL
 (
•rötf
)

28 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

29 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

30 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
__REDIRECT
 \

33 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

40 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

42 
__END_NAMESPACE_STD


44 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


45 
__BEGIN_NAMESPACE_C99


46 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

47 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

48 
__END_NAMESPACE_C99


51 #ifdef 
__USE_ISOC99


52 
__BEGIN_NAMESPACE_C99


53 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

54 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

55 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

57 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

61 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

63 
__END_NAMESPACE_C99


66 #ifde‡
__USE_GNU


67 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

68 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

69 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

70 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

71 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

73 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

76 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


77 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


80 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

84 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

85 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

88 #ifde‡
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

93 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

94 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #i‚de‡
__exã∫_ölöe


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


34 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
)

36 
__STDIO_INLINE
 

37 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

39  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

40 
	}
}

44 
__STDIO_INLINE
 

45 
	$gëch¨
 ()

47  
	`_IO_gëc
 (
°dö
);

48 
	}
}

51 #ifde‡
__USE_MISC


53 
__STDIO_INLINE
 

54 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

56  
	`_IO_gëc_u∆ocked
 (
__Â
);

57 
	}
}

61 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


63 
__STDIO_INLINE
 

64 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

66  
	`_IO_gëc_u∆ocked
 (
__Â
);

67 
	}
}

70 
__STDIO_INLINE
 

71 
	$gëch¨_u∆ocked
 ()

73  
	`_IO_gëc_u∆ocked
 (
°dö
);

74 
	}
}

79 
__STDIO_INLINE
 

80 
	$putch¨
 (
__c
)

82  
	`_IO_putc
 (
__c
, 
°dout
);

83 
	}
}

86 #ifde‡
__USE_MISC


88 
__STDIO_INLINE
 

89 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

91  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

92 
	}
}

96 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


98 
__STDIO_INLINE
 

99 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

101  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

102 
	}
}

105 
__STDIO_INLINE
 

106 
	$putch¨_u∆ocked
 (
__c
)

108  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

109 
	}
}

113 #ifdef 
__USE_GNU


115 
__STDIO_INLINE
 
_IO_ssize_t


116 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

118  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

119 
	}
}

123 #ifde‡
__USE_MISC


125 
__STDIO_INLINE
 

126 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

128  
	`_IO_„of_u∆ocked
 (
__°ªam
);

129 
	}
}

132 
__STDIO_INLINE
 

133 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

135  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

136 
	}
}

142 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

143 && !
deföed
 
	g__˝lu•lus


145 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

146 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

147 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

148 && (
size_t
Ë(
size
) != 0) \

149 ? ({ *
__±r
 = (*Ë(
±r
); \

150 
FILE
 *
__°ªam
 = (
°ªam
); \

151 
size_t
 
__˙t
; \

152 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

153 
__˙t
 > 0; --__cnt) \

155 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

156 i‡(
__c
 =
EOF
) \

158 *
__±r
++ = 
__c
; \

160 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

161 / (
size_t
Ë(
size
); }) \

162 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

163 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

165 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

166 (Ë(
n
), (
size_t
) 0) \

167 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

169 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

170 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

171 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

172 && (
size_t
Ë(
size
) != 0) \

173 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

174 
FILE
 *
__°ªam
 = (
°ªam
); \

175 
size_t
 
__˙t
; \

176 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

177 
__˙t
 > 0; --__cnt) \

178 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

180 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

181 / (
size_t
Ë(
size
); }) \

182 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

183 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

185 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

186 (Ë(
n
), (
size_t
) 0) \

187 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

191 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 #ifde‡
__va_¨g_∑ck


31 
__exã∫_Æways_ölöe
 

32 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

34  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

35 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

36 
	}
}

37 #ñi‡!
deföed
 
__˝lu•lus


38 
	#•rötf
(
°r
, ...) \

39 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

40 
__VA_ARGS__
)

	)

43 
__exã∫_Æways_ölöe
 

44 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

45 
_G_va_li°
 
__≠
))

47  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

48 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

49 
	}
}

51 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


53 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

54 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

55 ...Ë
__THROW
;

56 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

57 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

58 
_G_va_li°
 
__≠
Ë
__THROW
;

60 #ifde‡
__va_¨g_∑ck


61 
__exã∫_Æways_ölöe
 

62 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

63 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

65  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

66 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

67 
	}
}

68 #ñi‡!
deföed
 
__˝lu•lus


69 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

70 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

71 
__VA_ARGS__
)

	)

74 
__exã∫_Æways_ölöe
 

75 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

76 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

78  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

79 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

80 
	}
}

84 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

87 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

88 
__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

89 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

90 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

91 
__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

92 
_G_va_li°
 
__≠
);

94 #ifde‡
__va_¨g_∑ck


95 
__exã∫_Æways_ölöe
 

96 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...)

98  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

99 
	`__va_¨g_∑ck
 ());

100 
	}
}

102 
__exã∫_Æways_ölöe
 

103 
	$¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

105  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

106 
	}
}

107 #ñi‡!
deföed
 
__˝lu•lus


108 
	#¥ötf
(...) \

109 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

110 
	#Ârötf
(
°ªam
, ...) \

111 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

114 
__exã∫_Æways_ölöe
 

115 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

117 #ifde‡
__USE_EXTERN_INLINES


118  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

120  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

122 
	}
}

124 
__exã∫_Æways_ölöe
 

125 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

126 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

128  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

131 #ifde‡
__USE_GNU


133 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

134 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

135 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

136 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

137 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

138 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

139 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

140 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

141 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

142 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

143 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

144 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

145 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

147 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

148 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

149 
__Êag
,

150 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

151 
_G_va_li°
 
__¨gs
)

152 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

154 #ifde‡
__va_¨g_∑ck


155 
__exã∫_Æways_ölöe
 

156 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

158  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

159 
	`__va_¨g_∑ck
 ());

160 
	}
}

162 
__exã∫_Æways_ölöe
 

163 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

166  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

167 
	`__va_¨g_∑ck
 ());

168 
	}
}

170 
__exã∫_Æways_ölöe
 

171 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

173  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

174 
	`__va_¨g_∑ck
 ());

175 
	}
}

177 
__exã∫_Æways_ölöe
 

178 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

179 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

181  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_¨g_∑ck
 ());

183 
	}
}

184 #ñi‡!
deföed
 
__˝lu•lus


185 
	#a•rötf
(
±r
, ...) \

186 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

187 
	#__a•rötf
(
±r
, ...) \

188 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

189 
	#d¥ötf
(
fd
, ...) \

190 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

191 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

192 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

195 
__exã∫_Æways_ölöe
 

196 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

197 
_G_va_li°
 
__≠
))

199  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

200 
	}
}

202 
__exã∫_Æways_ölöe
 

203 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

205  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

206 
	}
}

208 
__exã∫_Æways_ölöe
 

209 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

210 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

212  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

213 
__≠
);

214 
	}
}

220 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

221 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

222 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

225 
__exã∫_Æways_ölöe
 
__wur
 *

226 
	$gës
 (*
__°r
)

228 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

229  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

230  
	`__gës_w¨n
 (
__°r
);

231 
	}
}

233 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

234 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

235 *
	`__REDIRECT
 (
__fgës_Æüs
,

236 (*
__ª°ri˘
 
__s
, 
__n
,

237 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

238 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

239 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

241 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

244 
__exã∫_Æways_ölöe
 
__wur
 *

245 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

247 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

249 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

250  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

252 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

253  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

255  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

256 
	}
}

258 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

259 
size_t
 
__size
, size_à
__n
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

261 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

262 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

263 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

264 
‰ód
Ë
__wur
;

265 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

266 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
),

269 
__‰ód_chk
)

270 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

273 
__exã∫_Æways_ölöe
 
__wur
 
size_t


274 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
)

277 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

279 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

280 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

281 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

282  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

284 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

285  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

287  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

288 
	}
}

290 #ifde‡
__USE_GNU


291 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

292 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

293 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

294 (*
__ª°ri˘
 
__s
, 
__n
,

295 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

296 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

297 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

299 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

302 
__exã∫_Æways_ölöe
 
__wur
 *

303 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

305 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

307 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

308  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

310 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

311  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

313  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

314 
	}
}

317 #ifde‡
__USE_MISC


318 #unde‡
‰ód_u∆ocked


319 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

320 
size_t
 
__size
, size_à
__n
,

321 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

322 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

323 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

324 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

325 
‰ód_u∆ocked
Ë
__wur
;

326 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

327 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
),

330 
__‰ód_u∆ocked_chk
)

331 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

334 
__exã∫_Æways_ölöe
 
__wur
 
size_t


335 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

336 
FILE
 *
__ª°ri˘
 
__°ªam
)

338 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

340 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

341 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

342 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

343  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

344 
__°ªam
);

346 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

347  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

348 
__°ªam
);

351 #ifde‡
__USE_EXTERN_INLINES


352 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

353 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

354 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

355 && 
__size
 * 
__n
 <= 8)

357 
size_t
 
__˙t
 = 
__size
 * 
__n
;

358 *
__˝å
 = (*Ë
__±r
;

359 i‡(
__˙t
 == 0)

362 ; 
__˙t
 > 0; --__cnt)

364 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

365 i‡(
__c
 =
EOF
)

367 *
__˝å
++ = 
__c
;

369  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

372  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

373 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


31 
	#L_cu£rid
 9

	)

36 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


37 #unde‡
FOPEN_MAX


38 
	#FOPEN_MAX
 16

	)

41 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


42 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-ldbl.h

20 #i‚de‡
_STDLIB_H


24 #ifdef 
__USE_ISOC99


25 
__BEGIN_NAMESPACE_C99


26 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

27 
__END_NAMESPACE_C99


30 #ifde‡
__USE_GNU


31 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

34 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


35 #ifde‡
__USE_MISC


36 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

38 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

39 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

40 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

20 #i‚de‡
_STDLIB_H


24 *
	$__ªÆ∑th_chk
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

25 *
__ª°ri˘
 
__ªsﬁved
,

26 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

27 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

28 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

29 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

30 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

31 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

32 *
__ª°ri˘
 
__ªsﬁved
,

33 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


34 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

37 
__exã∫_Æways_ölöe
 
__wur
 *

38 
	`__NTH
 (
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

40 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

42 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


43 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

44  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

46  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

49  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

50 
	}
}

53 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

54 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

55 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

56 
size_t
 
__buÊí
), 
±¢ame_r
)

57 
	`__n⁄nuŒ
 ((2));

58 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

60 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

61 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

64 
__exã∫_Æways_ölöe
 

65 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

67 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

69 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

70  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

71 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

72  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

74  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

75 
	}
}

78 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

79 
__THROW
 
__wur
;

80 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

81 
w˘omb
Ë
__wur
;

83 
__exã∫_Æways_ölöe
 
__wur
 

84 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

89 
	#__STDLIB_MB_LEN_MAX
 16

	)

90 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


93 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

94  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

95  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

96 
	}
}

99 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

100 
__c⁄°
 *
__ª°ri˘
 
__§c
,

101 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

102 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

103 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

104 
__c⁄°
 *
__ª°ri˘
 
__§c
,

105 
size_t
 
__Àn
), 
mb°owcs
);

106 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

107 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

108 
__c⁄°
 *
__ª°ri˘
 
__§c
,

109 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

110 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

113 
__exã∫_Æways_ölöe
 
size_t


114 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

115 
size_t
 
__Àn
))

117 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

119 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

120  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

121 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

123 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

124  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

125 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

127  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

128 
	}
}

131 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

132 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

133 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

134 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

135 (*
__ª°ri˘
 
__d°
,

136 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

137 
size_t
 
__Àn
), 
wc°ombs
);

138 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

139 (*
__ª°ri˘
 
__d°
,

140 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

141 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

142 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

144 
__exã∫_Æways_ölöe
 
size_t


145 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__§c
,

146 
size_t
 
__Àn
))

148 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

150 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

151  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

152 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

153  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

155  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

156 
	}
}

	@/usr/include/bits/string.h

21 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

31 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

32 && 
deföed
 
	g__GNUC__
 && __GNUC__ >2 && !
__BOUNDED_POINTERS__


34 #i‚de‡
__STRING_INLINE


35 #i‚de‡
__exã∫_ölöe


36 
	#__STRING_INLINE
 
ölöe


	)

38 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

43 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

44 ((((
__c⁄°
 *Ë(
§c
))[
idx
 + 1] << 8) \

45 | ((
__c⁄°
 *Ë(
§c
))[
idx
])

	)

46 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

47 (((((
__c⁄°
 *Ë(
§c
))[
idx
 + 3] << 8 \

48 | ((
__c⁄°
 *Ë(
§c
))[
idx
 + 2]) << 8 \

49 | ((
__c⁄°
 *Ë(
§c
))[
idx
 + 1]) << 8 \

50 | ((
__c⁄°
 *Ë(
§c
))[
idx
])

	)

54 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

55 
	#mem˝y
(
de°
, 
§c
, 
n
) \

56 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

57 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

58 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

59 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

60 ((
n
) == 0 \

61 ? (
de°
) \

62 : (((
n
) % 4 == 0) \

63 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

64 : (((
n
) % 2 == 0) \

65 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

66 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

68 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, 
__c⁄°
 *
__§c
,

69 
size_t
 
__n
);

71 
__STRING_INLINE
 *

72 
	$__mem˝y_by4
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

74 
__d0
, 
__d1
;

75 *
__tmp
 = 
__de°
;

76 
__asm__
 
__vﬁ©ûe__


84 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

85 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

87  
__de°
;

88 
	}
}

90 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, 
__c⁄°
 *
__§c
,

91 
size_t
 
__n
);

93 
__STRING_INLINE
 *

94 
	$__mem˝y_by2
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

96 
__d0
, 
__d1
;

97 *
__tmp
 = 
__de°
;

98 
__asm__
 
__vﬁ©ûe__


111 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

112 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

114  
__de°
;

115 
	}
}

117 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, 
__c⁄°
 *
__§c
,

118 
size_t
 
__n
);

120 
__STRING_INLINE
 *

121 
	$__mem˝y_g
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

123 
__d0
, 
__d1
, 
__d2
;

124 *
__tmp
 = 
__de°
;

125 
__asm__
 
__vﬁ©ûe__


136 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

137 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

138 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

139 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

141  
__de°
;

142 
	}
}

144 
	#_HAVE_STRING_ARCH_memmove
 1

	)

145 #i‚de‡
_FORCE_INLINES


148 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

150 
__STRING_INLINE
 *
	$__memmove_g
 (*, 
__c⁄°
 *, 
size_t
)

151 
	`__asm__
 ("memmove");

153 
__STRING_INLINE
 *

154 
	$__memmove_g
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

156 
__d0
, 
__d1
, 
__d2
;

157 *
__tmp
 = 
__de°
;

158 i‡(
__de°
 < 
__§c
)

159 
__asm__
 
__vﬁ©ûe__


162 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

163 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

164 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

165 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

167 
__asm__
 
__vﬁ©ûe__


171 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

172 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

173 : "0" (
__n
), "1" (__¿- 1 + (
__c⁄°
 *Ë
__§c
),

174 "2" (
__n
 - 1 + (*Ë
__tmp
),

175 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

176  
__de°
;

177 
	}
}

181 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

182 #i‚de‡
_FORCE_INLINES


183 #i‚de‡
__PIC__


185 
__STRING_INLINE
 

186 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

188 
__d0
, 
__d1
, 
__d2
;

189 
__ªs
;

190 
__asm__
 
__vﬁ©ûe__


198 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

199 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

200 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

201 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

203  
__ªs
;

204 
	}
}

209 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

210 
	#_USE_STRING_ARCH_mem£t
 1

	)

211 
	#mem£t
(
s
, 
c
, 
n
) \

212 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

213 ? ((
n
) == 1 \

214 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

215 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

216 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

217 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

218 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

219 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

220 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

221 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

222 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

224 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

225 *((*Ë
__s
Ë(Ë(
c
); \

226 
__s
; })

	)

228 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

229 ({ *
__s
 = (
s
); \

231 
__ui
; \

232 
__usi
; \

233 
__uc
; \

234 } *
__u
 = 
__s
; \

235 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

241 i‡((
n
) == 3 || (n) >= 5) \

242 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

245 
n
) \

248 
__u
->
__ui
 = 
__c
; \

249 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

251 
__u
->
__ui
 = 
__c
; \

252 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

254 
__u
->
__ui
 = 
__c
; \

255 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

257 
__u
->
__usi
 = (Ë
__c
; \

258 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

259 
__u
->
__uc
 = (Ë
__c
; \

263 
__u
->
__ui
 = 
__c
; \

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

266 
__u
->
__ui
 = 
__c
; \

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

269 
__u
->
__ui
 = 
__c
; \

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

272 
__u
->
__usi
 = (Ë
__c
; \

276 
__u
->
__ui
 = 
__c
; \

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

279 
__u
->
__ui
 = 
__c
; \

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__uc
 = (Ë
__c
; \

289 
__u
->
__ui
 = 
__c
; \

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

292 
__u
->
__ui
 = 
__c
; \

293 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

303 
__s
; })

	)

305 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

306 (((
n
) % 4 == 0) \

307 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

308 
n
) \

309 : (((
n
) % 2 == 0) \

310 ? 
	`__mem£t_c˙_by2
 (
s
, \

311 ((Ë((Ë(
c
))) * 0x01010101,\

312 
n
) \

313 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

315 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

316 
size_t
 
__n
);

318 
__STRING_INLINE
 *

319 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

321 *
__tmp
 = 
__s
;

322 
__d0
;

323 #ifde‡
__i686__


324 
__asm__
 
__vﬁ©ûe__


327 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

328 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

329 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

332 
__asm__
 
__vﬁ©ûe__


338 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

339 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

340 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

343  
__s
;

344 
	}
}

346 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

347 
size_t
 
__n
);

349 
__STRING_INLINE
 *

350 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

352 
__d0
, 
__d1
;

353 *
__tmp
 = 
__s
;

354 #ifde‡
__i686__


355 
__asm__
 
__vﬁ©ûe__


359 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

360 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

361 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

364 
__asm__
 
__vﬁ©ûe__


370 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

371 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

372 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

375  
__s
;

376 
	}
}

378 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

379 (((
n
) % 4 == 0) \

380 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

381 : (((
n
) % 2 == 0) \

382 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

383 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

385 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

387 
__STRING_INLINE
 *

388 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

390 *
__tmp
 = 
__s
;

391 
__d0
;

392 
__asm__
 
__vﬁ©ûe__


402 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

403 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

404 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

406  
__s
;

407 
	}
}

409 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

411 
__STRING_INLINE
 *

412 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

414 
__d0
, 
__d1
;

415 *
__tmp
 = 
__s
;

416 
__asm__
 
__vﬁ©ûe__


427 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

428 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

429 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

431  
__s
;

432 
	}
}

436 
	#_HAVE_STRING_ARCH_memchr
 1

	)

437 #i‚de‡
_FORCE_INLINES


438 
__STRING_INLINE
 *

439 
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

441 
__d0
;

442 #ifde‡
__i686__


443 
__d1
;

445 *
__ªs
;

446 i‡(
__n
 == 0)

447  
NULL
;

448 #ifde‡
__i686__


449 
__asm__
 
__vﬁ©ûe__


453 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

454 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

455 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

458 
__asm__
 
__vﬁ©ûe__


464 : "=D" (
__ªs
), "=&c" (
__d0
)

465 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

466 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

469  
__ªs
 - 1;

470 
	}
}

473 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

474 #i‚de‡
_FORCE_INLINES


475 
__STRING_INLINE
 *
__memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
);

477 
__STRING_INLINE
 *

478 
	$__memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

480 
__d0
;

481 #ifde‡
__i686__


482 
__d1
;

484 *
__ªs
;

485 i‡(
__n
 == 0)

486  
NULL
;

487 #ifde‡
__i686__


488 
__asm__
 
__vﬁ©ûe__


494 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

495 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

496 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

499 
__asm__
 
__vﬁ©ûe__


506 : "=D" (
__ªs
), "=&c" (
__d0
)

507 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

508 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

511  
__ªs
;

512 
	}
}

513 #ifde‡
__USE_GNU


514 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

519 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

520 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

522 #i‚de‡
_FORCE_INLINES


523 
__STRING_INLINE
 *

524 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

526 
__d0
;

527 *
__ªs
;

528 
__asm__
 
__vﬁ©ûe__


531 : "=D" (
__ªs
), "=&c" (
__d0
)

532 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

533 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

535  
__ªs
 - 1;

536 
	}
}

537 #ifde‡
__USE_GNU


538 
__STRING_INLINE
 *

539 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

541  
	`__øwmemchr
 (
__s
, 
__c
);

542 
	}
}

548 
	#_HAVE_STRING_ARCH_°æí
 1

	)

549 
	#°æí
(
°r
) \

550 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

551 ? 
	`__buûtö_°æí
 (
°r
) \

552 : 
	`__°æí_g
 (
°r
)))

	)

553 
__STRING_INLINE
 
size_t
 
__°æí_g
 (
__c⁄°
 *
__°r
);

555 
__STRING_INLINE
 
size_t


556 
	$__°æí_g
 (
__c⁄°
 *
__°r
)

558 
__dummy
;

559 
__c⁄°
 *
__tmp
 = 
__°r
;

560 
__asm__
 
__vﬁ©ûe__


566 : "Ù" (
__tmp
), "=&q" (
__dummy
)

567 : "0" (
__°r
),

568 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

570  
__tmp
 - 
__°r
 - 1;

571 
	}
}

575 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

576 
	#°r˝y
(
de°
, 
§c
) \

577 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

578 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

579 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

580 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

581 (
__c⁄°
 *Ë(
§c
), \

582 
	`°æí
 (
§c
) + 1)) \

583 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

585 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

586 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

588 
__ui
; \

589 
__usi
; \

590 
__uc
; \

591 
__c
; \

592 } *
__u
 = (*Ë
__de°
; \

593 
§˛í
) \

596 
__u
->
__uc
 = '\0'; \

599 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

602 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

603 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

604 
__u
->
__uc
 = '\0'; \

607 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

610 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

611 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

612 
__u
->
__uc
 = '\0'; \

615 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

616 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

617 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

620 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

621 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

622 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

623 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

624 
__u
->
__uc
 = '\0'; \

627 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

628 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

629 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

632 (*Ë
__de°
; }))

	)

634 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, 
__c⁄°
 *
__§c
);

636 
__STRING_INLINE
 *

637 
	$__°r˝y_g
 (*
__de°
, 
__c⁄°
 *
__§c
)

639 *
__tmp
 = 
__de°
;

640 
__dummy
;

641 
__asm__
 
__vﬁ©ûe__


650 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

651 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

652 : "0" (
__§c
), "1" (
__tmp
),

653 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

655  
__de°
;

656 
	}
}

659 #ifde‡
__USE_GNU


660 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

662 
	#__°p˝y
(
de°
, 
§c
) \

663 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

664 ? (
	`°æí
 (
§c
) + 1 <= 8 \

665 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

666 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

667 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

668 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

669 ((
§˛í
) % 4 == 0 \

670 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

671 : ((
§˛í
) % 2 == 0 \

672 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

673 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

676 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

678 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

679 (
	`__exãnsi⁄__
 ({ union { \

680 
__ui
; \

681 
__usi
; \

682 
__uc
; \

683 
__c
; \

684 } *
__u
 = (*Ë(
de°
); \

685 
§˛í
) \

688 
__u
->
__uc
 = '\0'; \

691 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

692 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

695 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

696 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

697 
__u
->
__uc
 = '\0'; \

700 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

701 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

704 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

705 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

706 
__u
->
__uc
 = '\0'; \

709 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

710 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

711 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

712 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

715 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

716 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

717 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

718 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

719 
__u
->
__uc
 = '\0'; \

722 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

723 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

724 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

725 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

728 (*Ë
__u
; }))

	)

730 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, 
__c⁄°
 *
__§c
,

731 
size_t
 
__§˛í
);

733 
__STRING_INLINE
 *

734 
	$__memp˝y_by4
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__§˛í
)

736 *
__tmp
 = 
__de°
;

737 
__d0
, 
__d1
;

738 
__asm__
 
__vﬁ©ûe__


746 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

747 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

749  
__tmp
;

750 
	}
}

752 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, 
__c⁄°
 *
__§c
,

753 
size_t
 
__§˛í
);

755 
__STRING_INLINE
 *

756 
	$__memp˝y_by2
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__§˛í
)

758 *
__tmp
 = 
__de°
;

759 
__d0
, 
__d1
;

760 
__asm__
 
__vﬁ©ûe__


773 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

774 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

775 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

776 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

778  
__tmp
 + 2;

779 
	}
}

781 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, 
__c⁄°
 *
__§c
,

782 
size_t
 
__§˛í
);

784 
__STRING_INLINE
 *

785 
	$__memp˝y_byn
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__§˛í
)

787 
__d0
, 
__d1
;

788 *
__tmp
 = 
__de°
;

789 
__asm__
 
__vﬁ©ûe__


800 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

801 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

802 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

803 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

805  
__tmp
;

806 
	}
}

808 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, 
__c⁄°
 *
__§c
);

810 
__STRING_INLINE
 *

811 
	$__°p˝y_g
 (*
__de°
, 
__c⁄°
 *
__§c
)

813 *
__tmp
 = 
__de°
;

814 
__dummy
;

815 
__asm__
 
__vﬁ©ûe__


824 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

825 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

826 : "0" (
__§c
), "1" (
__tmp
),

827 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

829  
__tmp
 - 1;

830 
	}
}

835 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

836 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

837 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

838 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

839 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

840 (
__c⁄°
 *Ë(
§c
), 
n
) \

841 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

842 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

843 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

844 (((
§˛í
) % 4 == 0) \

845 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

846 : (((
§˛í
) % 2 == 0) \

847 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

848 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

850 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, 
__c⁄°
 
__§c
[],

851 
size_t
 
__§˛í
, size_à
__n
);

853 
__STRING_INLINE
 *

854 
	$__°∫˝y_by4
 (*
__de°
, 
__c⁄°
 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

856 *
__tmp
 = 
__de°
;

857 
__dummy1
, 
__dummy2
;

858 
__asm__
 
__vﬁ©ûe__


866 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

867 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

868 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

869 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

871 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

872  
__de°
;

873 
	}
}

875 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, 
__c⁄°
 
__§c
[],

876 
size_t
 
__§˛í
, size_à
__n
);

878 
__STRING_INLINE
 *

879 
	$__°∫˝y_by2
 (*
__de°
, 
__c⁄°
 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

881 *
__tmp
 = 
__de°
;

882 
__dummy1
, 
__dummy2
;

883 
__asm__
 
__vﬁ©ûe__


896 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

897 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

898 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

899 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

901 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

902  
__de°
;

903 
	}
}

905 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, 
__c⁄°
 
__§c
[],

906 
size_t
 
__§˛í
, size_à
__n
);

908 
__STRING_INLINE
 *

909 
	$__°∫˝y_byn
 (*
__de°
, 
__c⁄°
 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

911 
__d0
, 
__d1
;

912 *
__tmp
 = 
__de°
;

913 
__asm__
 
__vﬁ©ûe__


924 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

925 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

926 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

927 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

929 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

930  
__de°
;

931 
	}
}

933 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, 
__c⁄°
 *
__§c
,

934 
size_t
 
__n
);

936 
__STRING_INLINE
 *

937 
	$__°∫˝y_gg
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

939 *
__tmp
 = 
__de°
;

940 
__dummy
;

941 i‡(
__n
 > 0)

942 
__asm__
 
__vﬁ©ûe__


958 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

959 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

962  
__de°
;

963 
	}
}

967 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

968 
	#°rˇt
(
de°
, 
§c
) \

969 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

970 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

971 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

973 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, 
__c⁄°
 
__§c
[],

974 
size_t
 
__§˛í
);

976 
__STRING_INLINE
 *

977 
	$__°rˇt_c
 (*
__de°
, 
__c⁄°
 
__§c
[], 
size_t
 
__§˛í
)

979 #ifde‡
__i686__


980 
__d0
;

981 *
__tmp
;

982 
__asm__
 
__vﬁ©ûe__


984 : "=D" (
__tmp
), "=&c" (
__d0
),

985 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

986 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

987 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

989 --
__tmp
;

991 *
__tmp
 = 
__de°
 - 1;

992 
__asm__
 
__vﬁ©ûe__


997 : "Ù" (
__tmp
),

998 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

999 : "0" (
__tmp
),

1000 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1003 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1004  
__de°
;

1005 
	}
}

1007 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, 
__c⁄°
 *
__§c
);

1009 
__STRING_INLINE
 *

1010 
	$__°rˇt_g
 (*
__de°
, 
__c⁄°
 *
__§c
)

1012 *
__tmp
 = 
__de°
 - 1;

1013 
__dummy
;

1014 
__asm__
 
__vﬁ©ûe__


1026 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1027 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1028 : "1" (
__tmp
), "2" (
__§c
),

1029 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1031  
__de°
;

1032 
	}
}

1036 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1037 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1038 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1039 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1040 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1041 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1042 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1043 (
__c⁄°
 *Ë(
§c
), \

1044 (
n
)Ë0, 
__de°
)) \

1045 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1047 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, 
__c⁄°
 
__§c
[],

1048 
size_t
 
__n
);

1050 
__STRING_INLINE
 *

1051 
	$__°∫ˇt_g
 (*
__de°
, 
__c⁄°
 
__§c
[], 
size_t
 
__n
)

1053 *
__tmp
 = 
__de°
;

1054 
__dummy
;

1055 #ifde‡
__i686__


1056 
__asm__
 
__vﬁ©ûe__


1070 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1071 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1074 --
__tmp
;

1075 
__asm__
 
__vﬁ©ûe__


1092 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1093 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
)

1096  
__de°
;

1097 
	}
}

1101 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1102 
	#°rcmp
(
s1
, 
s2
) \

1103 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1104 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1105 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1106 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

1107 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1108 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1109 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1110 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1111 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1112 ? 
	`__°rcmp_cc
 ((
__c⁄°
 *Ë(
s1
), \

1113 (
__c⁄°
 *Ë(
s2
), \

1114 
	`°æí
 (
s1
)) \

1115 : 
	`__°rcmp_cg
 ((
__c⁄°
 *Ë(
s1
), \

1116 (
__c⁄°
 *Ë(
s2
), \

1117 
	`°æí
 (
s1
))) \

1118 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1119 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1120 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1121 ? 
	`__°rcmp_cc
 ((
__c⁄°
 *Ë(
s1
), \

1122 (
__c⁄°
 *Ë(
s2
), \

1123 
	`°æí
 (
s2
)) \

1124 : 
	`__°rcmp_gc
 ((
__c⁄°
 *Ë(
s1
), \

1125 (
__c⁄°
 *Ë(
s2
), \

1126 
	`°æí
 (
s2
))) \

1127 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1129 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1130 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1131 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1133 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1134 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1136 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1137 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1138 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1141 
__ªsu…
; }))

	)

1143 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1144 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = (
s2
); \

1145 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1146 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1148 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1149 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1151 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1152 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1153 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1156 
__ªsu…
; }))

	)

1158 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1159 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = (
s1
); \

1160 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1161 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1163 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1164 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1166 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1167 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1168 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1171 
__ªsu…
; }))

	)

1173 
__STRING_INLINE
 
__°rcmp_gg
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
);

1175 
__STRING_INLINE
 

1176 
	$__°rcmp_gg
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

1178 
__ªs
;

1179 
__asm__
 
__vﬁ©ûe__


1195 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1196 : "1" (
__s1
), "2" (
__s2
),

1197 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1198 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1200  
__ªs
;

1201 
	}
}

1205 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1206 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1207 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1208 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1209 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1210 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1211 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1213 
__STRING_INLINE
 
__°∫cmp_g
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

1214 
size_t
 
__n
);

1216 
__STRING_INLINE
 

1217 
	$__°∫cmp_g
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

1219 
__ªs
;

1220 
__asm__
 
__vﬁ©ûe__


1239 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1240 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1241 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1242 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1244  
__ªs
;

1245 
	}
}

1249 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1250 
	#_USE_STRING_ARCH_°rchr
 1

	)

1251 
	#°rchr
(
s
, 
c
) \

1252 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1253 ? ((
c
) == '\0' \

1254 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1255 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1256 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1258 
__STRING_INLINE
 *
__°rchr_c
 (
__c⁄°
 *
__s
, 
__c
);

1260 
__STRING_INLINE
 *

1261 
	$__°rchr_c
 (
__c⁄°
 *
__s
, 
__c
)

1263 
__d0
;

1264 *
__ªs
;

1265 
__asm__
 
__vﬁ©ûe__


1275 : "Ù" (
__ªs
), "=&a" (
__d0
)

1276 : "0" (
__s
), "1" (
__c
),

1277 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1279  
__ªs
;

1280 
	}
}

1282 
__STRING_INLINE
 *
__°rchr_g
 (
__c⁄°
 *
__s
, 
__c
);

1284 
__STRING_INLINE
 *

1285 
	$__°rchr_g
 (
__c⁄°
 *
__s
, 
__c
)

1287 
__d0
;

1288 *
__ªs
;

1289 
__asm__
 
__vﬁ©ûe__


1300 : "Ù" (
__ªs
), "=&a" (
__d0
)

1301 : "0" (
__s
), "1" (
__c
),

1302 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1304  
__ªs
;

1305 
	}
}

1309 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1310 
	#__°rch∫ul
(
s
, 
c
) \

1311 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1312 ? ((
c
) == '\0' \

1313 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1314 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1315 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1317 
__STRING_INLINE
 *
__°rch∫ul_c
 (
__c⁄°
 *
__s
, 
__c
);

1319 
__STRING_INLINE
 *

1320 
	$__°rch∫ul_c
 (
__c⁄°
 *
__s
, 
__c
)

1322 
__d0
;

1323 *
__ªs
;

1324 
__asm__
 
__vﬁ©ûe__


1334 : "Ù" (
__ªs
), "=&a" (
__d0
)

1335 : "0" (
__s
), "1" (
__c
),

1336 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1338  
__ªs
;

1339 
	}
}

1341 
__STRING_INLINE
 *
__°rch∫ul_g
 (
__c⁄°
 *
__s
, 
__c
);

1343 
__STRING_INLINE
 *

1344 
	$__°rch∫ul_g
 (
__c⁄°
 *
__s
, 
__c
)

1346 
__d0
;

1347 *
__ªs
;

1348 
__asm__
 
__vﬁ©ûe__


1359 : "Ù" (
__ªs
), "=&a" (
__d0
)

1360 : "0" (
__s
), "1" (
__c
),

1361 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1363  
__ªs
;

1364 
	}
}

1365 #ifde‡
__USE_GNU


1366 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1370 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1372 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1373 
	#ödex
(
s
, 
c
) \

1374 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1375 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1376 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1381 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1382 
	#°ºchr
(
s
, 
c
) \

1383 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1384 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1385 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1387 #ifde‡
__i686__


1388 
__STRING_INLINE
 *
__°ºchr_c
 (
__c⁄°
 *
__s
, 
__c
);

1390 
__STRING_INLINE
 *

1391 
	$__°ºchr_c
 (
__c⁄°
 *
__s
, 
__c
)

1393 
__d0
, 
__d1
;

1394 *
__ªs
;

1395 
__asm__
 
__vﬁ©ûe__


1403 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1404 : "0" (1), "1" (
__s
), "2" (
__c
),

1405 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1407  
__ªs
 - 1;

1408 
	}
}

1410 
__STRING_INLINE
 *
__°ºchr_g
 (
__c⁄°
 *
__s
, 
__c
);

1412 
__STRING_INLINE
 *

1413 
	$__°ºchr_g
 (
__c⁄°
 *
__s
, 
__c
)

1415 
__d0
, 
__d1
;

1416 *
__ªs
;

1417 
__asm__
 
__vﬁ©ûe__


1426 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1427 : "0" (1), "1" (
__s
), "2" (
__c
),

1428 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1430  
__ªs
 - 1;

1431 
	}
}

1433 
__STRING_INLINE
 *
__°ºchr_c
 (
__c⁄°
 *
__s
, 
__c
);

1435 
__STRING_INLINE
 *

1436 
	$__°ºchr_c
 (
__c⁄°
 *
__s
, 
__c
)

1438 
__d0
, 
__d1
;

1439 *
__ªs
;

1440 
__asm__
 
__vﬁ©ûe__


1450 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1451 : "0" (0), "1" (
__s
), "2" (
__c
),

1452 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1454  
__ªs
;

1455 
	}
}

1457 
__STRING_INLINE
 *
__°ºchr_g
 (
__c⁄°
 *
__s
, 
__c
);

1459 
__STRING_INLINE
 *

1460 
	$__°ºchr_g
 (
__c⁄°
 *
__s
, 
__c
)

1462 
__d0
, 
__d1
;

1463 *
__ªs
;

1464 
__asm__
 
__vﬁ©ûe__


1475 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1476 : "0" (0), "1" (
__s
), "2" (
__c
),

1477 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1479  
__ªs
;

1480 
	}
}

1484 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1486 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1487 
	#rödex
(
s
, 
c
) \

1488 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1489 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1490 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1496 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1497 
	#°rc•n
(
s
, 
ªje˘
) \

1498 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1499 ? ((
ªje˘
)[0] == '\0' \

1500 ? 
	`°æí
 (
s
) \

1501 : ((
ªje˘
)[1] == '\0' \

1502 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1503 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1504 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1506 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

1508 #i‚de‡
_FORCE_INLINES


1509 
__STRING_INLINE
 
size_t


1510 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

1512 
__d0
;

1513 *
__ªs
;

1514 
__asm__
 
__vﬁ©ûe__


1523 : "Ù" (
__ªs
), "=&a" (
__d0
)

1524 : "0" (
__s
), "1" (
__ªje˘
),

1525 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1527  (
__ªs
 - 1Ë- 
__s
;

1528 
	}
}

1531 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (
__c⁄°
 *
__s
, __c⁄° 
__ªje˘
[],

1532 
size_t
 
__ªje˘_Àn
);

1534 
__STRING_INLINE
 
size_t


1535 
	$__°rc•n_cg
 (
__c⁄°
 *
__s
, __c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1537 
__d0
, 
__d1
, 
__d2
;

1538 
__c⁄°
 *
__ªs
;

1539 
__asm__
 
__vﬁ©ûe__


1550 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1551 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1553  (
__ªs
 - 1Ë- 
__s
;

1554 
	}
}

1556 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
);

1557 #ifde‡
__PIC__


1559 
__STRING_INLINE
 
size_t


1560 
	$__°rc•n_g
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

1562 
__d0
, 
__d1
, 
__d2
;

1563 
__c⁄°
 *
__ªs
;

1564 
__asm__
 
__vﬁ©ûe__


1581 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1582 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1584  (
__ªs
 - 1Ë- 
__s
;

1585 
	}
}

1587 
__STRING_INLINE
 
size_t


1588 
	$__°rc•n_g
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

1590 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1591 
__c⁄°
 *
__ªs
;

1592 
__asm__
 
__vﬁ©ûe__


1606 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1607 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1610  (
__ªs
 - 1Ë- 
__s
;

1611 
	}
}

1617 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1618 
	#°r•n
(
s
, 
ac˚±
) \

1619 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1620 ? ((
ac˚±
)[0] == '\0' \

1621 ? ((Ë(
s
), 0) \

1622 : ((
ac˚±
)[1] == '\0' \

1623 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1624 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1625 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1627 #i‚de‡
_FORCE_INLINES


1628 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1630 
__STRING_INLINE
 
size_t


1631 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1633 
__d0
;

1634 *
__ªs
;

1636 
__asm__
 
__vﬁ©ûe__


1642 : "Ù" (
__ªs
), "=&q" (
__d0
)

1643 : "0" (
__s
), "1" (
__ac˚±
),

1644 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1646  (
__ªs
 - 1Ë- 
__s
;

1647 
	}
}

1650 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (
__c⁄°
 *
__s
, __c⁄° 
__ac˚±
[],

1651 
size_t
 
__ac˚±_Àn
);

1653 
__STRING_INLINE
 
size_t


1654 
	$__°r•n_cg
 (
__c⁄°
 *
__s
, __c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1656 
__d0
, 
__d1
, 
__d2
;

1657 
__c⁄°
 *
__ªs
;

1658 
__asm__
 
__vﬁ©ûe__


1669 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1670 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1673 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1674 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1676  (
__ªs
 - 1Ë- 
__s
;

1677 
	}
}

1679 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
);

1680 #ifde‡
__PIC__


1682 
__STRING_INLINE
 
size_t


1683 
	$__°r•n_g
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

1685 
__d0
, 
__d1
, 
__d2
;

1686 
__c⁄°
 *
__ªs
;

1687 
__asm__
 
__vﬁ©ûe__


1703 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1704 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1706  (
__ªs
 - 1Ë- 
__s
;

1707 
	}
}

1709 
__STRING_INLINE
 
size_t


1710 
	$__°r•n_g
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

1712 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1713 
__c⁄°
 *
__ªs
;

1714 
__asm__
 
__vﬁ©ûe__


1728 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1729 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1731  (
__ªs
 - 1Ë- 
__s
;

1732 
	}
}

1737 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1738 
	#°Ωbrk
(
s
, 
ac˚±
) \

1739 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1740 ? ((
ac˚±
)[0] == '\0' \

1741 ? ((Ë(
s
), (*) 0) \

1742 : ((
ac˚±
)[1] == '\0' \

1743 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1744 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1745 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1747 
__STRING_INLINE
 *
__°Ωbrk_cg
 (
__c⁄°
 *
__s
, __c⁄° 
__ac˚±
[],

1748 
size_t
 
__ac˚±_Àn
);

1750 
__STRING_INLINE
 *

1751 
	$__°Ωbrk_cg
 (
__c⁄°
 *
__s
, __c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1753 
__d0
, 
__d1
, 
__d2
;

1754 *
__ªs
;

1755 
__asm__
 
__vﬁ©ûe__


1770 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1771 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1773  
__ªs
;

1774 
	}
}

1776 
__STRING_INLINE
 *
__°Ωbrk_g
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
);

1777 #ifde‡
__PIC__


1779 
__STRING_INLINE
 *

1780 
	$__°Ωbrk_g
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

1782 
__d0
, 
__d1
, 
__d2
;

1783 *
__ªs
;

1784 
__asm__
 
__vﬁ©ûe__


1805 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1806 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1808  
__ªs
;

1809 
	}
}

1811 
__STRING_INLINE
 *

1812 
	$__°Ωbrk_g
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

1814 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1815 *
__ªs
;

1816 
__asm__
 
__vﬁ©ûe__


1835 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1836 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1838  
__ªs
;

1839 
	}
}

1844 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1845 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1846 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1847 ? ((
√edÀ
)[0] == '\0' \

1848 ? (
hay°ack
) \

1849 : ((
√edÀ
)[1] == '\0' \

1850 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1851 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1852 
	`°æí
 (
√edÀ
)))) \

1853 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1857 
__STRING_INLINE
 *
__°r°r_cg
 (
__c⁄°
 *
__hay°ack
, __c⁄° 
__√edÀ
[],

1858 
size_t
 
__√edÀ_Àn
);

1860 
__STRING_INLINE
 *

1861 
	$__°r°r_cg
 (
__c⁄°
 *
__hay°ack
, __c⁄° 
__√edÀ
[],

1862 
size_t
 
__√edÀ_Àn
)

1864 
__d0
, 
__d1
, 
__d2
;

1865 *
__ªs
;

1866 
__asm__
 
__vﬁ©ûe__


1879 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1880 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1882  
__ªs
;

1883 
	}
}

1885 
__STRING_INLINE
 *
__°r°r_g
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
);

1886 #ifde‡
__PIC__


1888 
__STRING_INLINE
 *

1889 
	$__°r°r_g
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

1891 
__d0
, 
__d1
, 
__d2
;

1892 *
__ªs
;

1893 
__asm__
 
__vﬁ©ûe__


1912 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1913 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1914 "d" (
__√edÀ
)

1916  
__ªs
;

1917 
	}
}

1919 
__STRING_INLINE
 *

1920 
	$__°r°r_g
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

1922 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1923 *
__ªs
;

1924 
__asm__
 
__vﬁ©ûe__


1941 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1942 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1943 "b" (
__√edÀ
)

1945  
__ªs
;

1946 
	}
}

1952 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1953 #ifde‡
__i686__


1954 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1955 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1956 ? 
	`__buûtö_ffs
 (
w‹d
) \

1957 : ({ 
__˙t
, 
__tmp
; \

1958 
__asm__
 
__vﬁ©ûe__
 \

1961 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1962 : "rm" (
w‹d
), "1" (-1)); \

1963 
__˙t
 + 1; }))

	)

1965 #i‚de‡
ff¶


1966 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1971 #i‚de‡
_FORCE_INLINES


1972 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 && ((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1172 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1173 
__STRING_INLINE
 *

1174 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1176 *
__ªsu…
;

1177 i‡(
__s
 =
NULL
)

1178 
__s
 = *
__√xç
;

1179 *
__s
 =
__£p
)

1180 ++
__s
;

1181 
__ªsu…
 = 
NULL
;

1182 i‡(*
__s
 != '\0')

1184 
__ªsu…
 = 
__s
++;

1185 *
__s
 != '\0')

1186 i‡(*
__s
++ =
__£p
)

1188 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1193  
__ªsu…
;

1194 
	}
}

1195 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1196 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1201 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1202 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1204 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1205 
	#__°r£p
(
s
, 
ªje˘
) \

1206 
__exãnsi⁄__
 \

1207 ({ 
__r0
, 
__r1
, 
__r2
; \

1208 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1209 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1210 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1211 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1212 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1213 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1214 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1215 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1216 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1217 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1218 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1222 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1223 
__STRING_INLINE
 *

1224 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1226 *
__ªtvÆ
 = *
__s
;

1227 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1228 *(*
__s
)++ = '\0';

1229  
__ªtvÆ
;

1230 
	}
}

1232 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1233 
__STRING_INLINE
 *

1234 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1236 *
__ªtvÆ
 = *
__s
;

1237 i‡(
__ªtvÆ
 !
NULL
)

1239 *
__˝
 = 
__ªtvÆ
;

1242 i‡(*
__˝
 == '\0')

1244 
__˝
 = 
NULL
;

1247 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1249 *
__˝
++ = '\0';

1252 ++
__˝
;

1254 *
__s
 = 
__˝
;

1256  
__ªtvÆ
;

1257 
	}
}

1259 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1260 
__ªje˘3
);

1261 
__STRING_INLINE
 *

1262 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1264 *
__ªtvÆ
 = *
__s
;

1265 i‡(
__ªtvÆ
 !
NULL
)

1267 *
__˝
 = 
__ªtvÆ
;

1270 i‡(*
__˝
 == '\0')

1272 
__˝
 = 
NULL
;

1275 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1277 *
__˝
++ = '\0';

1280 ++
__˝
;

1282 *
__s
 = 
__˝
;

1284  
__ªtvÆ
;

1285 
	}
}

1286 #ifde‡
__USE_BSD


1287 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1294 #ifde‡
__USE_MISC


1296 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1297 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1298 
	~<°dlib.h
>

1301 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1303 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1304 
	#__°rdup
(
s
) \

1305 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1306 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1307 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1308 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1309 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1310 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1312 
__ªtvÆ
; 
	}
})) \

1313 : 
	`__°rdup
 (
s
)))

	)

1315 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1316 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1320 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1322 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1323 
__THROW
 
__©åibuã_mÆloc__
;

1324 
	#__°∫dup
(
s
, 
n
) \

1325 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1326 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1327 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1328 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1329 
size_t
 
__n
 = (
n
); \

1330 *
__ªtvÆ
; \

1331 i‡(
__n
 < 
__Àn
) \

1332 
__Àn
 = 
__n
 + 1; \

1333 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1334 i‡(
__ªtvÆ
 !
NULL
) \

1336 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1337 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1338 
__Àn
 - 1); \

1340 
__ªtvÆ
; 
	}
})) \

1341 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1343 #ifde‡
__USE_GNU


1344 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1350 #i‚de‡
_FORCE_INLINES


1351 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

26 #i‚de‡
__˝lu•lus


30 #unde‡
mem˝y


31 #unde‡
memmove


32 #unde‡
mem£t


33 #unde‡
°rˇt


34 #unde‡
°r˝y


35 #unde‡
°∫ˇt


36 #unde‡
°∫˝y


37 #ifde‡
__USE_GNU


38 #unde‡
memp˝y


39 #unde‡
°p˝y


41 #ifde‡
__USE_BSD


42 #unde‡
bc›y


43 #unde‡
bzîo


48 
__exã∫_Æways_ölöe
 *

49 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
))

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

55 
__exã∫_Æways_ölöe
 *

56 
__NTH
 (
	$memmove
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

57 
size_t
 
__Àn
))

59  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

60 
	}
}

62 #ifde‡
__USE_GNU


63 
__exã∫_Æways_ölöe
 *

64 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

65 
size_t
 
__Àn
))

67  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

68 
	}
}

77 
__exã∫_Æways_ölöe
 *

78 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

80 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0)

82 
	`__w¨n_mem£t_zîo_Àn
 ();

83  
__de°
;

85  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

86 
	}
}

88 #ifde‡
__USE_BSD


89 
__exã∫_Æways_ölöe
 

90 
__NTH
 (
	$bc›y
 (
__c⁄°
 *
__ª°ri˘
 
__§c
, *__ª°ri˘ 
__de°
,

91 
size_t
 
__Àn
))

93 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

94 
	}
}

96 
__exã∫_Æways_ölöe
 

97 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

99 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

100 
	}
}

103 
__exã∫_Æways_ölöe
 *

104 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

106  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

107 
	}
}

109 #ifde‡
__USE_GNU


110 
__exã∫_Æways_ölöe
 *

111 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

113  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

114 
	}
}

118 
__exã∫_Æways_ölöe
 *

119 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

120 
size_t
 
__Àn
))

122  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

123 
	}
}

126 *
	$__°≤˝y_chk
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

127 
size_t
 
__de°Àn
Ë
__THROW
;

128 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
,

129 
__c⁄°
 *
__§c
,

130 
size_t
 
__n
), 
°≤˝y
);

132 
__exã∫_Æways_ölöe
 *

133 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
))

135 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

136 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

137  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

138  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

139 
	}
}

142 
__exã∫_Æways_ölöe
 *

143 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
))

145  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

146 
	}
}

149 
__exã∫_Æways_ölöe
 *

150 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

151 
size_t
 
__Àn
))

153  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

154 
	}
}

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

55 
	#TIMER_ABSTIME
 1

	)

61 #ifde‡
__√ed_timevÆ


62 #unde‡
__√ed_timevÆ


63 #i‚de‡
_STRUCT_TIMEVAL


64 
	#_STRUCT_TIMEVAL
 1

	)

65 
	~<bôs/ty≥s.h
>

69 
	stimevÆ


71 
__time_t
 
	mtv_£c
;

72 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/bits/uio.h

19 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


23 #i‚de‡
_BITS_UIO_H


24 
	#_BITS_UIO_H
 1

	)

26 
	~<sys/ty≥s.h
>

40 
	#UIO_MAXIOV
 1024

	)

44 
	siovec


46 *
	miov_ba£
;

47 
size_t
 
	miov_Àn
;

	@/usr/include/bits/unistd.h

20 #i‚de‡
_UNISTD_H


24 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

25 
size_t
 
__buÊí
Ë
__wur
;

26 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

27 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

28 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

29 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

30 
size_t
 
__buÊí
), 
__ªad_chk
)

31 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

34 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


35 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

37 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

39 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

40  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

42 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

43  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

45  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

46 
	}
}

48 #ifde‡
__USE_UNIX98


49 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

50 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

51 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

52 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

53 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

54 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

55 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

56 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

57 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

58 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

59 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

60 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

61 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

62 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

64 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

65 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

66 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

67 
__¥ód64_chk
)

68 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

71 #i‚de‡
__USE_FILE_OFFSET64


72 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


73 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

75 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

77 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

78  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

80 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

81  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

82 
	`__bos0
 (
__buf
));

84  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

85 
	}
}

87 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


88 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

90 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

92 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

93  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

95 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

96  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

97 
	`__bos0
 (
__buf
));

100  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

101 
	}
}

104 #ifde‡
__USE_LARGEFILE64


105 
__exã∫_Æways_ölöe
 
__wur
 
ssize_t


106 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

108 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

110 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

111  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

113 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

114  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

115 
	`__bos0
 (
__buf
));

118  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

119 
	}
}

123 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


124 
ssize_t
 
	$__ªadlök_chk
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

125 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

126 
size_t
 
__buÊí
)

127 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

128 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

129 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

130 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

131 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

132 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

133 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

134 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

135 
size_t
 
__buÊí
), 
__ªadlök_chk
)

136 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

139 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


140 
	`__NTH
 (
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

141 
size_t
 
__Àn
))

143 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

145 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

146  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

148 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

149  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

151  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

152 
	}
}

155 #ifde‡
__USE_ATFILE


156 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

157 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

158 
size_t
 
__buÊí
)

159 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

160 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

161 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

162 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

163 
ªadlök©
)

164 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

165 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

166 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

167 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

168 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

169 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

173 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


174 
	`__NTH
 (
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

177 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

179 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

180  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

182 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

183  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

184 
	`__bos
 (
__buf
));

186  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

187 
	}
}

190 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

191 
__THROW
 
__wur
;

192 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

193 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

194 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

195 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

196 
__gëcwd_chk
)

197 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

200 
__exã∫_Æways_ölöe
 
__wur
 *

201 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

203 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

205 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

206  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

208 i‡(
__size
 > 
	`__bos
 (
__buf
))

209  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

211  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

212 
	}
}

214 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


215 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

217 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

218 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

221 
__exã∫_Æways_ölöe
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

222 
	`__NTH
 (
	$gëwd
 (*
__buf
))

224 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

225  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

226  
	`__gëwd_w¨n
 (
__buf
);

227 
	}
}

230 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

231 
size_t
 
__buÊí
Ë
__THROW
;

232 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

233 
size_t
 
__Àn
), 
c⁄f°r
);

234 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

235 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

236 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

237 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

240 
__exã∫_Æways_ölöe
 
size_t


241 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

243 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

245 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

246  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

248 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

249  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

251  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

252 
	}
}

255 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

256 
__THROW
 
__wur
;

257 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

258 
gëgroups
Ë
__wur
;

259 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

260 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

261 
__gëgroups_chk
)

262 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

265 
__exã∫_Æways_ölöe
 

266 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

268 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

270 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

271  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

273 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

274  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

276  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

277 
	}
}

280 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

281 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

282 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

283 
size_t
 
__buÊí
), 
ây«me_r
)

284 
	`__n⁄nuŒ
 ((2));

285 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

286 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

287 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

288 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

291 
__exã∫_Æways_ölöe
 

292 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

294 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

296 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

297  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

299 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

300  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

302  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

303 
	}
}

306 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


307 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

308 
	`__n⁄nuŒ
 ((1));

309 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

310 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

311 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

312 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

313 
__gëlogö_r_chk
)

314 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

317 
__exã∫_Æways_ölöe
 

318 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

320 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

322 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

323  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

325 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

326  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

328  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

329 
	}
}

333 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


334 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

335 
__THROW
 
	`__n⁄nuŒ
 ((1));

336 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

337 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

338 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

339 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

340 
__gëho°«me_chk
)

341 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

344 
__exã∫_Æways_ölöe
 

345 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

347 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

349 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

350  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

352 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

353  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

355  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

356 
	}
}

360 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

361 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

363 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

364 
size_t
 
__buÊí
),

365 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

366 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

367 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

368 
__gëdomaö«me_chk
)

369 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

373 
__exã∫_Æways_ölöe
 

374 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

376 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

378 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

379  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

381 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

382  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

384  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

385 
	}
}

	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WNOTHREAD
 0x20000000

	)

37 
	#__WALL
 0x40000000

	)

38 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

23 
	#__WCHAR_MIN
 (-2147483647»- 1l)

	)

24 
	#__WCHAR_MAX
 (2147483647l)

	)

	@/usr/include/bits/wordsize.h

19 
	#__WORDSIZE
 32

	)

	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

19 #i‚def 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

95 #unde‡
__USE_ISOC99


96 #unde‡
__USE_ISOC95


97 #unde‡
__USE_POSIX


98 #unde‡
__USE_POSIX2


99 #unde‡
__USE_POSIX199309


100 #unde‡
__USE_POSIX199506


101 #unde‡
__USE_XOPEN


102 #unde‡
__USE_XOPEN_EXTENDED


103 #unde‡
__USE_UNIX98


104 #unde‡
__USE_XOPEN2K


105 #unde‡
__USE_XOPEN2K8


106 #unde‡
__USE_LARGEFILE


107 #unde‡
__USE_LARGEFILE64


108 #unde‡
__USE_FILE_OFFSET64


109 #unde‡
__USE_BSD


110 #unde‡
__USE_SVID


111 #unde‡
__USE_MISC


112 #unde‡
__USE_ATFILE


113 #unde‡
__USE_GNU


114 #unde‡
__USE_REENTRANT


115 #unde‡
__USE_FORTIFY_LEVEL


116 #unde‡
__FAVOR_BSD


117 #unde‡
__KERNEL_STRICT_NAMES


121 #i‚de‡
_LOOSE_KERNEL_NAMES


122 
	#__KERNEL_STRICT_NAMES


	)

126 
	#__USE_ANSI
 1

	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

144 #i‡
deföed
 
_BSD_SOURCE
 && \

145 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

146 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_XOPEN_SOURCE_EXTENDED
 || \

147 
deföed
 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

148 
	#__FAVOR_BSD
 1

	)

152 #ifde‡
_GNU_SOURCE


153 #unde‡
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #unde‡
_POSIX_SOURCE


156 
	#_POSIX_SOURCE
 1

	)

157 #unde‡
_POSIX_C_SOURCE


158 
	#_POSIX_C_SOURCE
 200809L

	)

159 #unde‡
_XOPEN_SOURCE


160 
	#_XOPEN_SOURCE
 700

	)

161 #unde‡
_XOPEN_SOURCE_EXTENDED


162 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

163 #unde‡
_LARGEFILE64_SOURCE


164 
	#_LARGEFILE64_SOURCE
 1

	)

165 #unde‡
_BSD_SOURCE


166 
	#_BSD_SOURCE
 1

	)

167 #unde‡
_SVID_SOURCE


168 
	#_SVID_SOURCE
 1

	)

169 #unde‡
_ATFILE_SOURCE


170 
	#_ATFILE_SOURCE
 1

	)

175 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

176 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

177 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_XOPEN_SOURCE_EXTENDED
 && \

178 !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

179 
	#_BSD_SOURCE
 1

	)

180 
	#_SVID_SOURCE
 1

	)

187 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

188 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

189 
	#__USE_ISOC99
 1

	)

193 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

194 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

195 
	#__USE_ISOC95
 1

	)

200 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

201 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

202 
	#_POSIX_SOURCE
 1

	)

203 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

204 
	#_POSIX_C_SOURCE
 2

	)

205 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

206 
	#_POSIX_C_SOURCE
 199506L

	)

207 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

208 
	#_POSIX_C_SOURCE
 200112L

	)

210 
	#_POSIX_C_SOURCE
 200809L

	)

212 
	#__USE_POSIX_IMPLICITLY
 1

	)

215 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


216 
	#__USE_POSIX
 1

	)

219 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


220 
	#__USE_POSIX2
 1

	)

223 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

224 
	#__USE_POSIX199309
 1

	)

227 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

228 
	#__USE_POSIX199506
 1

	)

231 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

232 
	#__USE_XOPEN2K
 1

	)

233 #unde‡
__USE_ISOC99


234 
	#__USE_ISOC99
 1

	)

237 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

238 
	#__USE_XOPEN2K8
 1

	)

239 #unde‡
_ATFILE_SOURCE


240 
	#_ATFILE_SOURCE
 1

	)

243 #ifdef 
_XOPEN_SOURCE


244 
	#__USE_XOPEN
 1

	)

245 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

246 
	#__USE_XOPEN_EXTENDED
 1

	)

247 
	#__USE_UNIX98
 1

	)

248 #unde‡
_LARGEFILE_SOURCE


249 
	#_LARGEFILE_SOURCE
 1

	)

250 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

251 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

252 
	#__USE_XOPEN2K8
 1

	)

254 
	#__USE_XOPEN2K
 1

	)

255 #unde‡
__USE_ISOC99


256 
	#__USE_ISOC99
 1

	)

259 #ifde‡
_XOPEN_SOURCE_EXTENDED


260 
	#__USE_XOPEN_EXTENDED
 1

	)

265 #ifde‡
_LARGEFILE_SOURCE


266 
	#__USE_LARGEFILE
 1

	)

269 #ifde‡
_LARGEFILE64_SOURCE


270 
	#__USE_LARGEFILE64
 1

	)

273 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

274 
	#__USE_FILE_OFFSET64
 1

	)

277 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


278 
	#__USE_MISC
 1

	)

281 #ifdef 
_BSD_SOURCE


282 
	#__USE_BSD
 1

	)

285 #ifdef 
_SVID_SOURCE


286 
	#__USE_SVID
 1

	)

289 #ifdef 
_ATFILE_SOURCE


290 
	#__USE_ATFILE
 1

	)

293 #ifdef 
_GNU_SOURCE


294 
	#__USE_GNU
 1

	)

297 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


298 
	#__USE_REENTRANT
 1

	)

301 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

302 && 
deföed
 
__OPTIMIZE__
 && __OPTIMIZE__ > 0

303 #i‡!
__GNUC_PREREQ
 (4, 1)

304 #ifde‡
__GNUC_RH_RELEASE__


305 #w¨nög 
_FORTIFY_SOURCE
 
suµ‹ãd
 
⁄ly
 
wôh
 
GCC
 4.1 
™d
 
œãr


307 
	#__USE_FORTIFY_LEVEL
 0

	)

308 #ñi‡
_FORTIFY_SOURCE
 > 1

309 
	#__USE_FORTIFY_LEVEL
 2

	)

311 
	#__USE_FORTIFY_LEVEL
 1

	)

314 
	#__USE_FORTIFY_LEVEL
 0

	)

318 
	#__STDC_IEC_559__
 1

	)

319 
	#__STDC_IEC_559_COMPLEX__
 1

	)

322 
	#__STDC_ISO_10646__
 200009L

	)

330 #unde‡
__GNU_LIBRARY__


331 
	#__GNU_LIBRARY__
 6

	)

335 
	#__GLIBC__
 2

	)

336 
	#__GLIBC_MINOR__
 11

	)

338 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

339 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

342 #i‡
deföed
 
__GNUC__
 \

343 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

344 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

345 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

346 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

350 #i‚de‡
__ASSEMBLER__


351 #i‚de‡
_SYS_CDEFS_H


352 
	~<sys/cdefs.h
>

357 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


358 
	#__USE_LARGEFILE
 1

	)

359 
	#__USE_LARGEFILE64
 1

	)

365 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

366 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

367 && 
deföed
 
	g__exã∫_ölöe


368 
	#__USE_EXTERN_INLINES
 1

	)

376 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
Ë
__THROW
;

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde‡
_IO_MTSAFE_IO


174 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bôs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m¨kî
 {

187 
_IO_m¨kî
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

196 
	mpublic
:

197 
°ªamm¨kî
(
°ªambuf
 *
sb
);

198 ~
°ªamm¨kî
();

199 
ßvög
(Ë{  
	m_•os
 == -2; }

200 
dñè
(
°ªamm¨kî
&);

201 
dñè
();

206 
	e__codecvt_ªsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_∑πül
,

210 
	m__codecvt_îr‹
,

211 
	m__codecvt_noc⁄v


214 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

220 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 c⁄° 
	mwch¨_t
 *,

223 c⁄° 
	mwch¨_t
 *,

224 c⁄° 
	mwch¨_t
 **, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 c⁄° **, 
	mwch¨_t
 *,

233 
	mwch¨_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 c⁄° *, c⁄° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

240 
_IO_ic⁄v_t
 
	m__cd_ö
;

241 
_IO_ic⁄v_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wch¨_t
 *
	m_IO_ªad_±r
;

248 
wch¨_t
 *
	m_IO_ªad_íd
;

249 
wch¨_t
 *
	m_IO_ªad_ba£
;

250 
wch¨_t
 *
	m_IO_wrôe_ba£
;

251 
wch¨_t
 *
	m_IO_wrôe_±r
;

252 
wch¨_t
 *
	m_IO_wrôe_íd
;

253 
wch¨_t
 *
	m_IO_buf_ba£
;

254 
wch¨_t
 *
	m_IO_buf_íd
;

256 
wch¨_t
 *
	m_IO_ßve_ba£
;

257 
wch¨_t
 *
	m_IO_backup_ba£
;

259 
wch¨_t
 *
	m_IO_ßve_íd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_œ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch¨_t
 
	m_sh‹tbuf
[1];

267 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

271 
	s_IO_FILE
 {

272 
	m_Êags
;

273 
	#_IO_fûe_Êags
 
_Êags


	)

277 * 
	m_IO_ªad_±r
;

278 * 
	m_IO_ªad_íd
;

279 * 
	m_IO_ªad_ba£
;

280 * 
	m_IO_wrôe_ba£
;

281 * 
	m_IO_wrôe_±r
;

282 * 
	m_IO_wrôe_íd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_íd
;

286 *
	m_IO_ßve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_ßve_íd
;

290 
_IO_m¨kî
 *
	m_m¨kîs
;

292 
_IO_FILE
 *
	m_chaö
;

294 
	m_fûío
;

296 
	m_blksize
;

298 
	m_Êags2
;

300 
_IO_off_t
 
	m_ﬁd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cﬁumn
;

305 sig√d 
	m_vèbÀ_off£t
;

306 
	m_sh‹tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde‡
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com∂ëe


316 
_IO_FILE
 
	m_fûe
;

318 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_‰ìªs_li°
;

325 *
	m_‰ìªs_buf
;

326 
size_t
 
	m_‰ìªs_size
;

328 *
	m__∑d1
;

329 *
	m__∑d2
;

330 *
	m__∑d3
;

331 *
	m__∑d4
;

332 
size_t
 
	m__∑d5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

340 #i‚de‡
__˝lu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_∂us
;

346 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

347 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

349 #i‚de‡
_LIBC


350 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

354 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

355 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

356 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

364 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

372 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_˛o£_‚
 (*
	t__cookõ
);

387 #ifde‡
_GNU_SOURCE


389 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

390 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

391 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

392 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

397 
__io_ªad_‚
 *
	mªad
;

398 
__io_wrôe_‚
 *
	mwrôe
;

399 
__io_£ek_‚
 *
	m£ek
;

400 
__io_˛o£_‚
 *
	m˛o£
;

401 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

402 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

404 
	g_IO_cookõ_fûe
;

407 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

408 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

412 #ifde‡
__˝lu•lus


416 
__undîÊow
 (
_IO_FILE
 *);

417 
__uÊow
 (
_IO_FILE
 *);

418 
__ovîÊow
 (
_IO_FILE
 *, );

419 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

421 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

422 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i‡ 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

431 
	#_IO_gëc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

433 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

435 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

436 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

437 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

440 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

441 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

443 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gëwc_u∆ocked
(
_Â
) \

445 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 >(_Â)->_wide_d©a->
_IO_ªad_íd
,\

447 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

448 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

449 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

450 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
, 0) \

451 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

452 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

455 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

456 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

458 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

459 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

460 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

461 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

463 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

466 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

467 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

469 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

470 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

471 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

473 #ifde‡
_IO_MTSAFE_IO


474 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

475 
	#_IO_Êockfûe
(
_Â
) \

476 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

477 
	#_IO_fu∆ockfûe
(
_Â
) \

478 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

480 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

481 
	#_IO_Êockfûe
(
_Â
Ë

	)

482 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

483 
	#_IO_·rylockfûe
(
_Â
Ë

	)

484 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

485 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

488 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

489 
_IO_va_li°
, *
__ª°ri˘
);

490 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

491 
_IO_va_li°
);

492 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

493 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

495 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

496 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

498 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

500 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


501 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

502 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

503 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

504 #i‡
__GNUC__
 >= 2

507 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


508 
	~<shlib-com∑t.h
>

509 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

510 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

511 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

512 c⁄° 
_IO_°dö_u£d
;

513 
wók_exã∫
 (
_IO_°dö_u£d
);

516 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


517 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

521 
	#_IO_fwide
(
__Â
, 
__mode
) \

522 ({ 
__ªsu…
 = (
__mode
); \

523 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

525 i‡((
__Â
)->
_mode
 == 0) \

527 (
__Â
)->
_mode
 = -1; \

528 
__ªsu…
 = (
__Â
)->
_mode
; \

530 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

531 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

533 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

534 
__ªsu…
; })

	)

537 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

538 
_IO_va_li°
, *
__ª°ri˘
);

539 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

540 
_IO_va_li°
);

541 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

542 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

545 #ifde‡
__LDBL_COMPAT


546 
	~<bôs/libio-ldbl.h
>

549 #ifde‡
__˝lu•lus


	@/usr/include/linux/hdlc/ioctl.h

1 #i‚de‡
__HDLC_IOCTL_H__


2 
	#__HDLC_IOCTL_H__


	)

5 
	#GENERIC_HDLC_VERSION
 4

	)

7 
	#CLOCK_DEFAULT
 0

	)

8 
	#CLOCK_EXT
 1

	)

9 
	#CLOCK_INT
 2

	)

10 
	#CLOCK_TXINT
 3

	)

11 
	#CLOCK_TXFROMRX
 4

	)

14 
	#ENCODING_DEFAULT
 0

	)

15 
	#ENCODING_NRZ
 1

	)

16 
	#ENCODING_NRZI
 2

	)

17 
	#ENCODING_FM_MARK
 3

	)

18 
	#ENCODING_FM_SPACE
 4

	)

19 
	#ENCODING_MANCHESTER
 5

	)

22 
	#PARITY_DEFAULT
 0

	)

23 
	#PARITY_NONE
 1

	)

24 
	#PARITY_CRC16_PR0
 2

	)

25 
	#PARITY_CRC16_PR1
 3

	)

26 
	#PARITY_CRC16_PR0_CCITT
 4

	)

27 
	#PARITY_CRC16_PR1_CCITT
 5

	)

28 
	#PARITY_CRC32_PR0_CCITT
 6

	)

29 
	#PARITY_CRC32_PR1_CCITT
 7

	)

31 
	#LMI_DEFAULT
 0

	)

32 
	#LMI_NONE
 1

	)

33 
	#LMI_ANSI
 2

	)

34 
	#LMI_CCITT
 3

	)

35 
	#LMI_CISCO
 4

	)

38 
	m˛ock_øã
;

39 
	m˛ock_ty≥
;

40 
	mlo›back
;

41 } 
	tsync_£rül_£âögs
;

44 
	m˛ock_øã
;

45 
	m˛ock_ty≥
;

46 
	mlo›back
;

47 
	m¶Ÿ_m≠
;

48 } 
	tã1_£âögs
;

51 
	mícodög
;

52 
	m∑rôy
;

53 } 
	tøw_hdlc_¥Ÿo
;

56 
	mt391
;

57 
	mt392
;

58 
	mn391
;

59 
	mn392
;

60 
	mn393
;

61 
	mlmi
;

62 
	md˚
;

63 } 
	t‰_¥Ÿo
;

66 
	mdlci
;

67 } 
	t‰_¥Ÿo_pvc
;

70 
	mdlci
;

71 
	mma°î
[
IFNAMSIZ
];

72 }
	t‰_¥Ÿo_pvc_öfo
;

75 
	möãrvÆ
;

76 
	mtimeout
;

77 } 
	tcisco_¥Ÿo
;

	@/usr/include/linux/socket.h

1 #i‚de‡
_LINUX_SOCKET_H


2 
	#_LINUX_SOCKET_H


	)

7 
	#_K_SS_MAXSIZE
 128

	)

8 
	#_K_SS_ALIGNSIZE
 (
	`__Æignof__
 (
sockaddr
 *))

	)

11 
	s__kî√l_sockaddr_°‹age
 {

12 
	mss_Ámûy
;

14 
	m__d©a
[
_K_SS_MAXSIZE
 - ()];

17 } 
__©åibuã__
 ((
Æig√d
(
_K_SS_ALIGNSIZE
)));

19 #i‡
deföed
(
__KERNEL__
Ë|| !deföed(
__GLIBC__
) || (__GLIBC__ < 2)

21 
	~<asm/sockë.h
>

22 
	~<löux/sockios.h
>

23 
	~<löux/uio.h
>

24 
	~<löux/ty≥s.h
>

28 
	tß_Ámûy_t
;

34 
	ssockaddr
 {

35 
ß_Ámûy_t
 
	mß_Ámûy
;

36 
	mß_d©a
[14];

39 
	slögî
 {

40 
	ml_⁄off
;

41 
	ml_lögî
;

44 
	#sockaddr_°‹age
 
__kî√l_sockaddr_°‹age


	)

52 
	smsghdr
 {

53 * 
	mmsg_«me
;

54 
	mmsg_«mñí
;

55 
iovec
 * 
	mmsg_iov
;

56 
__kî√l_size_t
 
	mmsg_iovÀn
;

57 * 
	mmsg_c⁄åﬁ
;

58 
__kî√l_size_t
 
	mmsg_c⁄åﬁÀn
;

59 
	mmsg_Êags
;

68 
	scmsghdr
 {

69 
__kî√l_size_t
 
	mcmsg_Àn
;

70 
	mcmsg_Àvñ
;

71 
	mcmsg_ty≥
;

79 
	#__CMSG_NXTHDR
(
˘l
, 
Àn
, 
cmsg
Ë
	`__cmsg_nxthdr
((˘l),÷í),(cmsg))

	)

80 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`cmsg_nxthdr
((mhdr), (cmsg))

	)

82 
	#CMSG_ALIGN
(
Àn
Ë–(÷í)+()-1Ë& ~(()-1Ë)

	)

84 
	#CMSG_DATA
(
cmsg
Ë((*)((*)(cmsgË+ 
	`CMSG_ALIGN
((
cmsghdr
))))

	)

85 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
((
cmsghdr
)Ë+ CMSG_ALIGN÷í))

	)

86 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
((
cmsghdr
)Ë+ (Àn))

	)

88 
	#__CMSG_FIRSTHDR
(
˘l
,
Àn
Ë(÷íË>(
cmsghdr
) ? \

89 (
cmsghdr
 *)(
˘l
) : \

90 (
cmsghdr
 *)
NULL
)

	)

91 
	#CMSG_FIRSTHDR
(
msg
Ë
	`__CMSG_FIRSTHDR
((msg)->
msg_c⁄åﬁ
, (msg)->
msg_c⁄åﬁÀn
)

	)

92 
	#CMSG_OK
(
mhdr
, 
cmsg
Ë((cmsg)->
cmsg_Àn
 >(
cmsghdr
) && \

93 (
cmsg
)->
cmsg_Àn
 <= () \

94 ((
mhdr
)->
msg_c⁄åﬁÀn
 - \

95 ((*)(
cmsg
Ë- (*)(
mhdr
)->
msg_c⁄åﬁ
)))

	)

101 #i‡ 
deföed
(
__GNUC__
)

102 
	#__KINLINE
 
__ölöe__


	)

103 #ñi‡
deföed
(
__˝lu•lus
)

104 
	#__KINLINE
 
__ölöe__


	)

106 
	#__KINLINE
 

	)

123 
__KINLINE
 
cmsghdr
 * 
	$__cmsg_nxthdr
(*
__˘l
, 
__kî√l_size_t
 
__size
,

124 
cmsghdr
 *
__cmsg
)

126 
cmsghdr
 * 
__±r
;

128 
__±r
 = (
cmsghdr
*)(((*Ë
__cmsg
Ë+ 
	`CMSG_ALIGN
(__cmsg->
cmsg_Àn
));

129 i‡(()((*)(
__±r
+1Ë- (*Ë
__˘l
Ë> 
__size
)

130  (
cmsghdr
 *)0;

132  
__±r
;

133 
	}
}

135 
__KINLINE
 
cmsghdr
 * 
	$cmsg_nxthdr
 (
msghdr
 *
__msg
, 
cmsghdr
 *
__cmsg
)

137  
	`__cmsg_nxthdr
(
__msg
->
msg_c⁄åﬁ
, __msg->
msg_c⁄åﬁÀn
, 
__cmsg
);

138 
	}
}

142 
	#SCM_RIGHTS
 0x01

	)

143 
	#SCM_CREDENTIALS
 0x02

	)

144 
	#SCM_SECURITY
 0x03

	)

146 
	su¸ed
 {

147 
__u32
 
	mpid
;

148 
__u32
 
	muid
;

149 
__u32
 
	mgid
;

153 
	#AF_UNSPEC
 0

	)

154 
	#AF_UNIX
 1

	)

155 
	#AF_LOCAL
 1

	)

156 
	#AF_INET
 2

	)

157 
	#AF_AX25
 3

	)

158 
	#AF_IPX
 4

	)

159 
	#AF_APPLETALK
 5

	)

160 
	#AF_NETROM
 6

	)

161 
	#AF_BRIDGE
 7

	)

162 
	#AF_ATMPVC
 8

	)

163 
	#AF_X25
 9

	)

164 
	#AF_INET6
 10

	)

165 
	#AF_ROSE
 11

	)

166 
	#AF_DEC√t
 12

	)

167 
	#AF_NETBEUI
 13

	)

168 
	#AF_SECURITY
 14

	)

169 
	#AF_KEY
 15

	)

170 
	#AF_NETLINK
 16

	)

171 
	#AF_ROUTE
 
AF_NETLINK


	)

172 
	#AF_PACKET
 17

	)

173 
	#AF_ASH
 18

	)

174 
	#AF_ECONET
 19

	)

175 
	#AF_ATMSVC
 20

	)

176 
	#AF_RDS
 21

	)

177 
	#AF_SNA
 22

	)

178 
	#AF_IRDA
 23

	)

179 
	#AF_PPPOX
 24

	)

180 
	#AF_WANPIPE
 25

	)

181 
	#AF_LLC
 26

	)

182 
	#AF_CAN
 29

	)

183 
	#AF_TIPC
 30

	)

184 
	#AF_BLUETOOTH
 31

	)

185 
	#AF_IUCV
 32

	)

186 
	#AF_RXRPC
 33

	)

187 
	#AF_ISDN
 34

	)

188 
	#AF_PHONET
 35

	)

189 
	#AF_IEEE802154
 36

	)

190 
	#AF_MAX
 37

	)

193 
	#PF_UNSPEC
 
AF_UNSPEC


	)

194 
	#PF_UNIX
 
AF_UNIX


	)

195 
	#PF_LOCAL
 
AF_LOCAL


	)

196 
	#PF_INET
 
AF_INET


	)

197 
	#PF_AX25
 
AF_AX25


	)

198 
	#PF_IPX
 
AF_IPX


	)

199 
	#PF_APPLETALK
 
AF_APPLETALK


	)

200 
	#PF_NETROM
 
AF_NETROM


	)

201 
	#PF_BRIDGE
 
AF_BRIDGE


	)

202 
	#PF_ATMPVC
 
AF_ATMPVC


	)

203 
	#PF_X25
 
AF_X25


	)

204 
	#PF_INET6
 
AF_INET6


	)

205 
	#PF_ROSE
 
AF_ROSE


	)

206 
	#PF_DEC√t
 
AF_DEC√t


	)

207 
	#PF_NETBEUI
 
AF_NETBEUI


	)

208 
	#PF_SECURITY
 
AF_SECURITY


	)

209 
	#PF_KEY
 
AF_KEY


	)

210 
	#PF_NETLINK
 
AF_NETLINK


	)

211 
	#PF_ROUTE
 
AF_ROUTE


	)

212 
	#PF_PACKET
 
AF_PACKET


	)

213 
	#PF_ASH
 
AF_ASH


	)

214 
	#PF_ECONET
 
AF_ECONET


	)

215 
	#PF_ATMSVC
 
AF_ATMSVC


	)

216 
	#PF_RDS
 
AF_RDS


	)

217 
	#PF_SNA
 
AF_SNA


	)

218 
	#PF_IRDA
 
AF_IRDA


	)

219 
	#PF_PPPOX
 
AF_PPPOX


	)

220 
	#PF_WANPIPE
 
AF_WANPIPE


	)

221 
	#PF_LLC
 
AF_LLC


	)

222 
	#PF_CAN
 
AF_CAN


	)

223 
	#PF_TIPC
 
AF_TIPC


	)

224 
	#PF_BLUETOOTH
 
AF_BLUETOOTH


	)

225 
	#PF_IUCV
 
AF_IUCV


	)

226 
	#PF_RXRPC
 
AF_RXRPC


	)

227 
	#PF_ISDN
 
AF_ISDN


	)

228 
	#PF_PHONET
 
AF_PHONET


	)

229 
	#PF_IEEE802154
 
AF_IEEE802154


	)

230 
	#PF_MAX
 
AF_MAX


	)

233 
	#SOMAXCONN
 128

	)

239 
	#MSG_OOB
 1

	)

240 
	#MSG_PEEK
 2

	)

241 
	#MSG_DONTROUTE
 4

	)

242 
	#MSG_TRYHARD
 4

	)

243 
	#MSG_CTRUNC
 8

	)

244 
	#MSG_PROBE
 0x10

	)

245 
	#MSG_TRUNC
 0x20

	)

246 
	#MSG_DONTWAIT
 0x40

	)

247 
	#MSG_EOR
 0x80

	)

248 
	#MSG_WAITALL
 0x100

	)

249 
	#MSG_FIN
 0x200

	)

250 
	#MSG_SYN
 0x400

	)

251 
	#MSG_CONFIRM
 0x800

	)

252 
	#MSG_RST
 0x1000

	)

253 
	#MSG_ERRQUEUE
 0x2000

	)

254 
	#MSG_NOSIGNAL
 0x4000

	)

255 
	#MSG_MORE
 0x8000

	)

257 
	#MSG_EOF
 
MSG_FIN


	)

259 
	#MSG_CMSG_CLOEXEC
 0x40000000

	)

262 #i‡
deföed
(
CONFIG_COMPAT
)

263 
	#MSG_CMSG_COMPAT
 0x80000000

	)

265 
	#MSG_CMSG_COMPAT
 0

	)

270 
	#SOL_IP
 0

	)

272 
	#SOL_TCP
 6

	)

273 
	#SOL_UDP
 17

	)

274 
	#SOL_IPV6
 41

	)

275 
	#SOL_ICMPV6
 58

	)

276 
	#SOL_SCTP
 132

	)

277 
	#SOL_UDPLITE
 136

	)

278 
	#SOL_RAW
 255

	)

279 
	#SOL_IPX
 256

	)

280 
	#SOL_AX25
 257

	)

281 
	#SOL_ATALK
 258

	)

282 
	#SOL_NETROM
 259

	)

283 
	#SOL_ROSE
 260

	)

284 
	#SOL_DECNET
 261

	)

285 
	#SOL_X25
 262

	)

286 
	#SOL_PACKET
 263

	)

287 
	#SOL_ATM
 264

	)

288 
	#SOL_AAL
 265

	)

289 
	#SOL_IRDA
 266

	)

290 
	#SOL_NETBEUI
 267

	)

291 
	#SOL_LLC
 268

	)

292 
	#SOL_DCCP
 269

	)

293 
	#SOL_NETLINK
 270

	)

294 
	#SOL_TIPC
 271

	)

295 
	#SOL_RXRPC
 272

	)

296 
	#SOL_PPPOL2TP
 273

	)

297 
	#SOL_BLUETOOTH
 274

	)

298 
	#SOL_PNPIPE
 275

	)

299 
	#SOL_RDS
 276

	)

300 
	#SOL_IUCV
 277

	)

303 
	#IPX_TYPE
 1

	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (
__c⁄°
 *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (
__c⁄°
 *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/sched.h

20 #i‚def 
_SCHED_H


21 
	#_SCHED_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

35 
	~<bôs/sched.h
>

37 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

40 
__BEGIN_DECLS


43 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

44 
__THROW
;

47 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

50 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

51 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

54 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

57 
	$sched_yõld
 (Ë
__THROW
;

60 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

63 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

66 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

69 #ifde‡
__USE_GNU


71 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

72 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

73 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

74 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

75 
˝u£ç
)

	)

76 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

77 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

79 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

80 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

81 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

82 
˝u£ç
)

	)

83 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

84 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

86 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

87 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

88 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

89 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

91 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

92 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

93 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

94 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

95 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

96 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

97 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

98 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

99 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

101 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

104 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

105 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

106 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

110 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

111 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

114 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

115 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

118 
__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #ifde‡
__USE_XOPEN


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3) \

136 || (
deföed
 
	g__GNUC_RH_RELEASE__
 && 
	g__GNUC__
 == 4 \

137 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

138 && 
__GNUC_RH_RELEASE__
 >= 31)

139 
	#__w¨nde˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

141 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

142 
	#__îr‹de˛
(
«me
, 
msg
) \

143 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

145 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

146 
	#__w¨«âr
(
msg
)

	)

147 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

151 #i‡
__GNUC_PREREQ
 (2,97)

153 
	#__Êex¨r
 []

	)

155 #ifde‡
__GNUC__


156 
	#__Êex¨r
 [0]

	)

158 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

159 
	#__Êex¨r
 []

	)

162 
	#__Êex¨r
 [1]

	)

178 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

180 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

181 #ifde‡
__˝lu•lus


182 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

185 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

186 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

188 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

189 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

202 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

203 
	#__©åibuã__
(
xyz
Ë

	)

209 #i‡
__GNUC_PREREQ
 (2,96)

210 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

212 
	#__©åibuã_mÆloc__


	)

218 #i‡
__GNUC_PREREQ
 (2,96)

219 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

221 
	#__©åibuã_puª__


	)

227 #i‡
__GNUC_PREREQ
 (3,1)

228 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

229 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

231 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

232 
	#__©åibuã_noölöe__


	)

236 #i‡
__GNUC_PREREQ
 (3,2)

237 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

239 
	#__©åibuã_dïªˇãd__


	)

248 #i‡
__GNUC_PREREQ
 (2,8)

249 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

251 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

258 #i‡
__GNUC_PREREQ
 (2,97)

259 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

260 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

262 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

267 #i‡
__GNUC_PREREQ
 (3,3)

268 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

270 
	#__n⁄nuŒ
(
∑øms
)

	)

275 #i‡
__GNUC_PREREQ
 (3,4)

276 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

277 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

278 #i‡
__USE_FORTIFY_LEVEL
 > 0

279 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

282 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

284 #i‚de‡
__wur


285 
	#__wur


	)

289 #i‡
__GNUC_PREREQ
 (3,2)

290 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

292 
	#__Æways_ölöe
 
__ölöe


	)

297 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

298 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

299 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

300 && 
__GNUC_RH_RELEASE__
 >= 31)

301 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


302 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

303 #i‡
__GNUC_PREREQ
 (4,3) \

304 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

305 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

306 && 
__GNUC_RH_RELEASE__
 >= 31)

307 
	#__exã∫_Æways_ölöe
 \

308 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

310 
	#__exã∫_Æways_ölöe
 \

311 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

314 
	#__exã∫_ölöe
 
__ölöe


	)

315 #i‡
__GNUC_PREREQ
 (4,3)

316 
	#__exã∫_Æways_ölöe
 \

317 
__Æways_ölöe
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

319 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

326 #i‡
__GNUC_PREREQ
 (4,3) \

327 || (
deföed
 
__GNUC_RH_RELEASE__
 && 
__GNUC__
 == 4 \

328 && 
__GNUC_MINOR__
 =1 && 
__GNUC_PATCHLEVEL__
 == 2 \

329 && 
__GNUC_RH_RELEASE__
 >= 31)

330 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

331 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

338 #i‡!
__GNUC_PREREQ
 (2,8)

339 
	#__exãnsi⁄__


	)

343 #i‡!
__GNUC_PREREQ
 (2,92)

344 
	#__ª°ri˘


	)

350 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


351 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

353 #ifde‡
__GNUC__


354 
	#__ª°ri˘_¨r


	)

356 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

357 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

360 
	#__ª°ri˘_¨r


	)

365 
	~<bôs/w‹dsize.h
>

367 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


368 
	#__LDBL_COMPAT
 1

	)

369 #ifde‡
__REDIRECT


370 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

371 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

372 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

373 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

374 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

375 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

376 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

377 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

378 
	#__LDBL_REDIR_DECL
(
«me
) \

379 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

380 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

381 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

382 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

383 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

386 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


387 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

388 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

389 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

390 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

391 
	#__LDBL_REDIR_DECL
(
«me
)

	)

392 #ifde‡
__REDIRECT


393 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

394 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

395 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/sys/param.h

19 #i‚de‡
_SYS_PARAM_H


20 
	#_SYS_PARAM_H
 1

	)

22 #i‚de‡
ARG_MAX


23 
	#__undef_ARG_MAX


	)

26 
	~<limôs.h
>

27 
	~<löux/limôs.h
>

28 
	~<löux/∑øm.h
>

31 #i‚de‡
__undef_ARG_MAX


32 #unde‡
ARG_MAX


33 #unde‡
__undef_ARG_MAX


38 
	#NBBY
 
CHAR_BIT


	)

39 #i‚def 
NGROUPS


40 
	#NGROUPS
 
NGROUPS_MAX


	)

42 
	#MAXSYMLINKS
 20

	)

43 
	#CANBSIZ
 
MAX_CANON


	)

44 
	#MAXPATHLEN
 
PATH_MAX


	)

48 
	#NOFILE
 256

	)

49 
	#NCARGS
 131072

	)

52 
	~<sys/ty≥s.h
>

55 
	#£tbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] |1<<((i)%NBBY))

	)

56 
	#˛rbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] &~(1<<((i)%NBBY)))

	)

57 
	#is£t
(
a
,
i
Ë(◊)[(i)/
NBBY
] & (1<<((i)%NBBY)))

	)

58 
	#is˛r
(
a
,
i
Ë((◊)[(i)/
NBBY
] & (1<<((i)%NBBY))Ë=0)

	)

61 #i‚de‡
howm™y


62 
	#howm™y
(
x
, 
y
Ë(((xË+ ((yË- 1)Ë/ (y))

	)

64 #ifde‡
__GNUC__


65 
	#roundup
(
x
, 
y
Ë(
	`__buûtö_c⁄°™t_p
 (yË&& 
	`powîof2
 (y) \

66 ? (((
x
Ë+ (
y
) - 1) & ~((y) - 1)) \

67 : ((((
x
Ë+ ((
y
Ë- 1)Ë/ (y)Ë* (y)))

	)

69 
	#roundup
(
x
, 
y
Ë((((xË+ ((yË- 1)Ë/ (y)Ë* (y))

	)

71 
	#powîof2
(
x
Ë((((xË- 1Ë& (x)Ë=0)

	)

74 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

75 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

79 
	#DEV_BSIZE
 512

	)

	@/usr/include/sys/syslog.h

32 #i‚de‡
_SYS_SYSLOG_H


33 
	#_SYS_SYSLOG_H
 1

	)

35 
	~<„©uªs.h
>

36 
	#__√ed___va_li°


	)

37 
	~<°d¨g.h
>

40 
	~<bôs/sy¶og-∑th.h
>

51 
	#LOG_EMERG
 0

	)

52 
	#LOG_ALERT
 1

	)

53 
	#LOG_CRIT
 2

	)

54 
	#LOG_ERR
 3

	)

55 
	#LOG_WARNING
 4

	)

56 
	#LOG_NOTICE
 5

	)

57 
	#LOG_INFO
 6

	)

58 
	#LOG_DEBUG
 7

	)

60 
	#LOG_PRIMASK
 0x07

	)

62 
	#LOG_PRI
(
p
Ë(’Ë& 
LOG_PRIMASK
)

	)

63 
	#LOG_MAKEPRI
(
Ác
, 
¥i
Ë(((ÁcË<< 3Ë| (¥i))

	)

65 #ifde‡
SYSLOG_NAMES


66 
	#INTERNAL_NOPRI
 0x10

	)

68 
	#INTERNAL_MARK
 
	`LOG_MAKEPRI
(
LOG_NFACILITIES
, 0)

	)

69 
	s_code
 {

70 *
	mc_«me
;

71 
	mc_vÆ
;

72 } 
	tCODE
;

74 
CODE
 
	g¥i‹ôy«mes
[] =

76 { "Æît", 
LOG_ALERT
 },

77 { "¸ô", 
LOG_CRIT
 },

78 { "debug", 
LOG_DEBUG
 },

79 { "emîg", 
LOG_EMERG
 },

80 { "îr", 
LOG_ERR
 },

81 { "îr‹", 
LOG_ERR
 },

82 { "öfo", 
LOG_INFO
 },

83 { "n⁄e", 
INTERNAL_NOPRI
 },

84 { "nŸi˚", 
LOG_NOTICE
 },

85 { "∑nic", 
LOG_EMERG
 },

86 { "w¨n", 
LOG_WARNING
 },

87 { "w¨nög", 
LOG_WARNING
 },

88 { 
NULL
, -1 }

93 
	#LOG_KERN
 (0<<3Ë

	)

94 
	#LOG_USER
 (1<<3Ë

	)

95 
	#LOG_MAIL
 (2<<3Ë

	)

96 
	#LOG_DAEMON
 (3<<3Ë

	)

97 
	#LOG_AUTH
 (4<<3Ë

	)

98 
	#LOG_SYSLOG
 (5<<3Ë

	)

99 
	#LOG_LPR
 (6<<3Ë

	)

100 
	#LOG_NEWS
 (7<<3Ë

	)

101 
	#LOG_UUCP
 (8<<3Ë

	)

102 
	#LOG_CRON
 (9<<3Ë

	)

103 
	#LOG_AUTHPRIV
 (10<<3Ë

	)

104 
	#LOG_FTP
 (11<<3Ë

	)

107 
	#LOG_LOCAL0
 (16<<3Ë

	)

108 
	#LOG_LOCAL1
 (17<<3Ë

	)

109 
	#LOG_LOCAL2
 (18<<3Ë

	)

110 
	#LOG_LOCAL3
 (19<<3Ë

	)

111 
	#LOG_LOCAL4
 (20<<3Ë

	)

112 
	#LOG_LOCAL5
 (21<<3Ë

	)

113 
	#LOG_LOCAL6
 (22<<3Ë

	)

114 
	#LOG_LOCAL7
 (23<<3Ë

	)

116 
	#LOG_NFACILITIES
 24

	)

117 
	#LOG_FACMASK
 0x03f8

	)

119 
	#LOG_FAC
(
p
Ë((’Ë& 
LOG_FACMASK
Ë>> 3)

	)

121 #ifde‡
SYSLOG_NAMES


122 
CODE
 
	gÁcûôy«mes
[] =

124 { "auth", 
LOG_AUTH
 },

125 { "auth¥iv", 
LOG_AUTHPRIV
 },

126 { "¸⁄", 
LOG_CRON
 },

127 { "d´m⁄", 
LOG_DAEMON
 },

128 { "·p", 
LOG_FTP
 },

129 { "kîn", 
LOG_KERN
 },

130 { "Õr", 
LOG_LPR
 },

131 { "maû", 
LOG_MAIL
 },

132 { "m¨k", 
INTERNAL_MARK
 },

133 { "√ws", 
LOG_NEWS
 },

134 { "£curôy", 
LOG_AUTH
 },

135 { "sy¶og", 
LOG_SYSLOG
 },

136 { "u£r", 
LOG_USER
 },

137 { "uu˝", 
LOG_UUCP
 },

138 { "loˇl0", 
LOG_LOCAL0
 },

139 { "loˇl1", 
LOG_LOCAL1
 },

140 { "loˇl2", 
LOG_LOCAL2
 },

141 { "loˇl3", 
LOG_LOCAL3
 },

142 { "loˇl4", 
LOG_LOCAL4
 },

143 { "loˇl5", 
LOG_LOCAL5
 },

144 { "loˇl6", 
LOG_LOCAL6
 },

145 { "loˇl7", 
LOG_LOCAL7
 },

146 { 
NULL
, -1 }

153 
	#LOG_MASK
(
¥i
Ë(1 << (¥i)Ë

	)

154 
	#LOG_UPTO
(
¥i
Ë((1 << (’ri)+1)Ë- 1Ë

	)

162 
	#LOG_PID
 0x01

	)

163 
	#LOG_CONS
 0x02

	)

164 
	#LOG_ODELAY
 0x04

	)

165 
	#LOG_NDELAY
 0x08

	)

166 
	#LOG_NOWAIT
 0x10

	)

167 
	#LOG_PERROR
 0x20

	)

169 
__BEGIN_DECLS


175 
˛o£log
 ();

181 
›ílog
 (
__c⁄°
 *
__idít
, 
__›ti⁄
, 
__Ácûôy
);

184 
	$£éogmask
 (
__mask
Ë
__THROW
;

190 
	$sy¶og
 (
__¥i
, 
__c⁄°
 *
__fmt
, ...)

191 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

193 #ifde‡
__USE_BSD


200 
	$vsy¶og
 (
__¥i
, 
__c⁄°
 *
__fmt
, 
__gnuc_va_li°
 
__≠
)

201 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

206 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


207 
	~<bôs/sy¶og.h
>

209 #ifde‡
__LDBL_COMPAT


210 
	~<bôs/sy¶og-ldbl.h
>

213 
__END_DECLS


	@/usr/include/sys/sysmacros.h

21 #i‚de‡
_SYS_SYSMACROS_H


22 
	#_SYS_SYSMACROS_H
 1

	)

24 
	~<„©uªs.h
>

29 #ifde‡
__GLIBC_HAVE_LONG_LONG


30 
__exãnsi⁄__


31 
	$gnu_dev_maj‹
 (
__dev
)

32 
__THROW
;

33 
__exãnsi⁄__


34 
	$gnu_dev_mö‹
 (
__dev
)

35 
__THROW
;

36 
__exãnsi⁄__


37 
	$gnu_dev_makedev
 (
__maj‹
,

38 
__mö‹
)

39 
__THROW
;

41 #i‡
deföed
 
__GNUC__
 && __GNUC__ >2 && deföed 
__USE_EXTERN_INLINES


42 
__exãnsi⁄__
 
__exã∫_ölöe
 

43 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

45  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

46 
	}
}

48 
__exãnsi⁄__
 
__exã∫_ölöe
 

49 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

51  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

52 
	}
}

54 
__exãnsi⁄__
 
__exã∫_ölöe
 

55 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

57  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

58 | (((Ë(
__mö‹
 & ~0xff)) << 12)

59 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

60 
	}
}

65 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

66 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

67 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/arpa/nameser_compat.h

34 #i‚de‡
_ARPA_NAMESER_COMPAT_


35 
	#_ARPA_NAMESER_COMPAT_


	)

37 
	#__BIND
 19950621

	)

39 
	~<ídün.h
>

49 
	mid
 :16;

50 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


52 
	mqr
: 1;

53 
	m›code
: 4;

54 
	mØ
: 1;

55 
	mtc
: 1;

56 
	mrd
: 1;

58 
	mø
: 1;

59 
	munu£d
 :1;

60 
	mad
: 1;

61 
	mcd
: 1;

62 
	mrcode
 :4;

64 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN
 || BYTE_ORDER =
PDP_ENDIAN


66 
	mrd
 :1;

67 
	mtc
 :1;

68 
	mØ
 :1;

69 
	m›code
 :4;

70 
	mqr
 :1;

72 
	mrcode
 :4;

73 
	mcd
: 1;

74 
	mad
: 1;

75 
	munu£d
 :1;

76 
	mø
 :1;

79 
	mqdcou¡
 :16;

80 
	m™cou¡
 :16;

81 
	mnscou¡
 :16;

82 
	m¨cou¡
 :16;

83 } 
	tHEADER
;

85 
	#PACKETSZ
 
NS_PACKETSZ


	)

86 
	#MAXDNAME
 
NS_MAXDNAME


	)

87 
	#MAXCDNAME
 
NS_MAXCDNAME


	)

88 
	#MAXLABEL
 
NS_MAXLABEL


	)

89 
	#HFIXEDSZ
 
NS_HFIXEDSZ


	)

90 
	#QFIXEDSZ
 
NS_QFIXEDSZ


	)

91 
	#RRFIXEDSZ
 
NS_RRFIXEDSZ


	)

92 
	#INT32SZ
 
NS_INT32SZ


	)

93 
	#INT16SZ
 
NS_INT16SZ


	)

94 
	#INT8SZ
 
NS_INT8SZ


	)

95 
	#INADDRSZ
 
NS_INADDRSZ


	)

96 
	#IN6ADDRSZ
 
NS_IN6ADDRSZ


	)

97 
	#INDIR_MASK
 
NS_CMPRSFLGS


	)

98 
	#NAMESERVER_PORT
 
NS_DEFAULTPORT


	)

100 
	#S_ZONE
 
ns_s_zn


	)

101 
	#S_PREREQ
 
ns_s_¥


	)

102 
	#S_UPDATE
 
ns_s_ud


	)

103 
	#S_ADDT
 
ns_s_¨


	)

105 
	#QUERY
 
ns_o_quîy


	)

106 
	#IQUERY
 
ns_o_iquîy


	)

107 
	#STATUS
 
ns_o_°©us


	)

108 
	#NS_NOTIFY_OP
 
ns_o_nŸify


	)

109 
	#NS_UPDATE_OP
 
ns_o_upd©e


	)

111 
	#NOERROR
 
ns_r_n€º‹


	)

112 
	#FORMERR
 
ns_r_f‹mîr


	)

113 
	#SERVFAIL
 
ns_r_£rvÁû


	)

114 
	#NXDOMAIN
 
ns_r_nxdomaö


	)

115 
	#NOTIMP
 
ns_r_nŸim∂


	)

116 
	#REFUSED
 
ns_r_ªfu£d


	)

117 
	#YXDOMAIN
 
ns_r_yxdomaö


	)

118 
	#YXRRSET
 
ns_r_yxº£t


	)

119 
	#NXRRSET
 
ns_r_nxº£t


	)

120 
	#NOTAUTH
 
ns_r_nŸauth


	)

121 
	#NOTZONE
 
ns_r_nŸz⁄e


	)

127 
	#DELETE
 
ns_u›_dñëe


	)

128 
	#ADD
 
ns_u›_add


	)

130 
	#T_A
 
ns_t_a


	)

131 
	#T_NS
 
ns_t_ns


	)

132 
	#T_MD
 
ns_t_md


	)

133 
	#T_MF
 
ns_t_mf


	)

134 
	#T_CNAME
 
ns_t_˙ame


	)

135 
	#T_SOA
 
ns_t_sﬂ


	)

136 
	#T_MB
 
ns_t_mb


	)

137 
	#T_MG
 
ns_t_mg


	)

138 
	#T_MR
 
ns_t_mr


	)

139 
	#T_NULL
 
ns_t_nuŒ


	)

140 
	#T_WKS
 
ns_t_wks


	)

141 
	#T_PTR
 
ns_t_±r


	)

142 
	#T_HINFO
 
ns_t_höfo


	)

143 
	#T_MINFO
 
ns_t_möfo


	)

144 
	#T_MX
 
ns_t_mx


	)

145 
	#T_TXT
 
ns_t_txt


	)

146 
	#T_RP
 
ns_t_Ω


	)

147 
	#T_AFSDB
 
ns_t_afsdb


	)

148 
	#T_X25
 
ns_t_x25


	)

149 
	#T_ISDN
 
ns_t_isdn


	)

150 
	#T_RT
 
ns_t_π


	)

151 
	#T_NSAP
 
ns_t_nßp


	)

152 
	#T_NSAP_PTR
 
ns_t_nßp_±r


	)

153 
	#T_SIG
 
ns_t_sig


	)

154 
	#T_KEY
 
ns_t_key


	)

155 
	#T_PX
 
ns_t_px


	)

156 
	#T_GPOS
 
ns_t_gpos


	)

157 
	#T_AAAA
 
ns_t_ØØ


	)

158 
	#T_LOC
 
ns_t_loc


	)

159 
	#T_NXT
 
ns_t_nxt


	)

160 
	#T_EID
 
ns_t_eid


	)

161 
	#T_NIMLOC
 
ns_t_nimloc


	)

162 
	#T_SRV
 
ns_t_§v


	)

163 
	#T_ATMA
 
ns_t_©ma


	)

164 
	#T_NAPTR
 
ns_t_«±r


	)

165 
	#T_A6
 
ns_t_a6


	)

166 
	#T_DNAME
 
ns_t_d«me


	)

167 
	#T_TSIG
 
ns_t_tsig


	)

168 
	#T_IXFR
 
ns_t_ix‰


	)

169 
	#T_AXFR
 
ns_t_ax‰


	)

170 
	#T_MAILB
 
ns_t_maûb


	)

171 
	#T_MAILA
 
ns_t_maûa


	)

172 
	#T_ANY
 
ns_t_™y


	)

174 
	#C_IN
 
ns_c_ö


	)

175 
	#C_CHAOS
 
ns_c_chaos


	)

176 
	#C_HS
 
ns_c_hs


	)

178 
	#C_NONE
 
ns_c_n⁄e


	)

179 
	#C_ANY
 
ns_c_™y


	)

181 
	#GETSHORT
 
NS_GET16


	)

182 
	#GETLONG
 
NS_GET32


	)

183 
	#PUTSHORT
 
NS_PUT16


	)

184 
	#PUTLONG
 
NS_PUT32


	)

	@/usr/include/asm/ioctls.h

1 #i‚de‡
_ASM_X86_IOCTLS_H


2 
	#_ASM_X86_IOCTLS_H


	)

4 
	~<asm/io˘l.h
>

8 
	#TCGETS
 0x5401

	)

9 
	#TCSETS
 0x5402

	)

10 
	#TCSETSW
 0x5403

	)

11 
	#TCSETSF
 0x5404

	)

12 
	#TCGETA
 0x5405

	)

13 
	#TCSETA
 0x5406

	)

14 
	#TCSETAW
 0x5407

	)

15 
	#TCSETAF
 0x5408

	)

16 
	#TCSBRK
 0x5409

	)

17 
	#TCXONC
 0x540A

	)

18 
	#TCFLSH
 0x540B

	)

19 
	#TIOCEXCL
 0x540C

	)

20 
	#TIOCNXCL
 0x540D

	)

21 
	#TIOCSCTTY
 0x540E

	)

22 
	#TIOCGPGRP
 0x540F

	)

23 
	#TIOCSPGRP
 0x5410

	)

24 
	#TIOCOUTQ
 0x5411

	)

25 
	#TIOCSTI
 0x5412

	)

26 
	#TIOCGWINSZ
 0x5413

	)

27 
	#TIOCSWINSZ
 0x5414

	)

28 
	#TIOCMGET
 0x5415

	)

29 
	#TIOCMBIS
 0x5416

	)

30 
	#TIOCMBIC
 0x5417

	)

31 
	#TIOCMSET
 0x5418

	)

32 
	#TIOCGSOFTCAR
 0x5419

	)

33 
	#TIOCSSOFTCAR
 0x541A

	)

34 
	#FIONREAD
 0x541B

	)

35 
	#TIOCINQ
 
FIONREAD


	)

36 
	#TIOCLINUX
 0x541C

	)

37 
	#TIOCCONS
 0x541D

	)

38 
	#TIOCGSERIAL
 0x541E

	)

39 
	#TIOCSSERIAL
 0x541F

	)

40 
	#TIOCPKT
 0x5420

	)

41 
	#FIONBIO
 0x5421

	)

42 
	#TIOCNOTTY
 0x5422

	)

43 
	#TIOCSETD
 0x5423

	)

44 
	#TIOCGETD
 0x5424

	)

45 
	#TCSBRKP
 0x5425

	)

47 
	#TIOCSBRK
 0x5427

	)

48 
	#TIOCCBRK
 0x5428

	)

49 
	#TIOCGSID
 0x5429

	)

50 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

51 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

52 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

53 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

54 
	#TIOCGRS485
 0x542E

	)

55 
	#TIOCSRS485
 0x542F

	)

56 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, )

	)

58 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

59 
	#TCGETX
 0x5432

	)

60 
	#TCSETX
 0x5433

	)

61 
	#TCSETXF
 0x5434

	)

62 
	#TCSETXW
 0x5435

	)

64 
	#FIONCLEX
 0x5450

	)

65 
	#FIOCLEX
 0x5451

	)

66 
	#FIOASYNC
 0x5452

	)

67 
	#TIOCSERCONFIG
 0x5453

	)

68 
	#TIOCSERGWILD
 0x5454

	)

69 
	#TIOCSERSWILD
 0x5455

	)

70 
	#TIOCGLCKTRMIOS
 0x5456

	)

71 
	#TIOCSLCKTRMIOS
 0x5457

	)

72 
	#TIOCSERGSTRUCT
 0x5458

	)

73 
	#TIOCSERGETLSR
 0x5459

	)

74 
	#TIOCSERGETMULTI
 0x545A

	)

75 
	#TIOCSERSETMULTI
 0x545B

	)

77 
	#TIOCMIWAIT
 0x545C

	)

78 
	#TIOCGICOUNT
 0x545D

	)

79 
	#TIOCGHAYESESP
 0x545E

	)

80 
	#TIOCSHAYESESP
 0x545F

	)

81 
	#FIOQSIZE
 0x5460

	)

84 
	#TIOCPKT_DATA
 0

	)

85 
	#TIOCPKT_FLUSHREAD
 1

	)

86 
	#TIOCPKT_FLUSHWRITE
 2

	)

87 
	#TIOCPKT_STOP
 4

	)

88 
	#TIOCPKT_START
 8

	)

89 
	#TIOCPKT_NOSTOP
 16

	)

90 
	#TIOCPKT_DOSTOP
 32

	)

92 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/asm/socket.h

1 #i‚de‡
_ASM_X86_SOCKET_H


2 
	#_ASM_X86_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_SNDBUFFORCE
 32

	)

18 
	#SO_RCVBUFFORCE
 33

	)

19 
	#SO_KEEPALIVE
 9

	)

20 
	#SO_OOBINLINE
 10

	)

21 
	#SO_NO_CHECK
 11

	)

22 
	#SO_PRIORITY
 12

	)

23 
	#SO_LINGER
 13

	)

24 
	#SO_BSDCOMPAT
 14

	)

26 
	#SO_PASSCRED
 16

	)

27 
	#SO_PEERCRED
 17

	)

28 
	#SO_RCVLOWAT
 18

	)

29 
	#SO_SNDLOWAT
 19

	)

30 
	#SO_RCVTIMEO
 20

	)

31 
	#SO_SNDTIMEO
 21

	)

34 
	#SO_SECURITY_AUTHENTICATION
 22

	)

35 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

36 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

38 
	#SO_BINDTODEVICE
 25

	)

41 
	#SO_ATTACH_FILTER
 26

	)

42 
	#SO_DETACH_FILTER
 27

	)

44 
	#SO_PEERNAME
 28

	)

45 
	#SO_TIMESTAMP
 29

	)

46 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

48 
	#SO_ACCEPTCONN
 30

	)

50 
	#SO_PEERSEC
 31

	)

51 
	#SO_PASSSEC
 34

	)

52 
	#SO_TIMESTAMPNS
 35

	)

53 
	#SCM_TIMESTAMPNS
 
SO_TIMESTAMPNS


	)

55 
	#SO_MARK
 36

	)

57 
	#SO_TIMESTAMPING
 37

	)

58 
	#SCM_TIMESTAMPING
 
SO_TIMESTAMPING


	)

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	~<asm-gíîic/öt-Œ64.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	tumode_t
;

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/libio-ldbl.h

20 #i‚de‡
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/sched.h

22 #i‚de‡
__√ed_sched∑øm


24 #i‚de‡
_SCHED_H


30 
	#SCHED_OTHER
 0

	)

31 
	#SCHED_FIFO
 1

	)

32 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_GNU


34 
	#SCHED_BATCH
 3

	)

37 #ifde‡
__USE_MISC


39 
	#CSIGNAL
 0x000000f‡

	)

40 
	#CLONE_VM
 0x00000100

	)

41 
	#CLONE_FS
 0x00000200

	)

42 
	#CLONE_FILES
 0x00000400

	)

43 
	#CLONE_SIGHAND
 0x00000800

	)

44 
	#CLONE_PTRACE
 0x00002000

	)

45 
	#CLONE_VFORK
 0x00004000

	)

47 
	#CLONE_PARENT
 0x00008000

	)

49 
	#CLONE_THREAD
 0x00010000

	)

50 
	#CLONE_NEWNS
 0x00020000

	)

51 
	#CLONE_SYSVSEM
 0x00040000

	)

52 
	#CLONE_SETTLS
 0x00080000

	)

53 
	#CLONE_PARENT_SETTID
 0x00100000

	)

55 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

57 
	#CLONE_DETACHED
 0x00400000

	)

58 
	#CLONE_UNTRACED
 0x00800000

	)

60 
	#CLONE_CHILD_SETTID
 0x01000000

	)

62 
	#CLONE_NEWUTS
 0x04000000

	)

63 
	#CLONE_NEWIPC
 0x08000000

	)

64 
	#CLONE_NEWUSER
 0x10000000

	)

65 
	#CLONE_NEWPID
 0x20000000

	)

66 
	#CLONE_NEWNET
 0x40000000

	)

67 
	#CLONE_IO
 0x80000000

	)

71 
	ssched_∑øm


73 
	m__sched_¥i‹ôy
;

76 
	g__BEGIN_DECLS


78 #ifde‡
__USE_MISC


80 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

81 
__Êags
, *
__¨g
, ...Ë
__THROW
;

84 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

87 
	$sched_gë˝u
 (Ë
__THROW
;

90 
__END_DECLS


94 #i‡!
deföed
 
__deföed_sched∑øm
 \

95 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

96 
	#__deföed_sched∑øm
 1

	)

98 
	s__sched_∑øm


100 
__sched_¥i‹ôy
;

102 #unde‡
__√ed_sched∑øm


106 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


107 
	#__˝u_£t_t_deföed


	)

109 
	#__CPU_SETSIZE
 1024

	)

110 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

113 
	t__˝u_mask
;

116 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

117 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

122 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

123 } 
	t˝u_£t_t
;

126 #i‡
	`__GNUC_PREREQ
 (2, 91)

127 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

128 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

130 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

132 
size_t
 
__i
; \

133 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

134 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

135 
__i
 = 0; __ò< 
__imax
; ++__i) \

136 
__bôs
[
__i
] = 0; \

137 
	}
} 0)

	)

139 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

140 (
__exãnsi⁄__
 \

141 ({ 
size_t
 
__˝u
 = (
˝u
); \

142 
__˝u
 < 8 * (
£tsize
) \

143 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

144 |
	`__CPUMASK
 (
__˝u
)) \

145 : 0; }))

	)

146 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

147 (
__exãnsi⁄__
 \

148 ({ 
size_t
 
__˝u
 = (
˝u
); \

149 
__˝u
 < 8 * (
£tsize
) \

150 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

151 &~
	`__CPUMASK
 (
__˝u
)) \

152 : 0; }))

	)

153 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

154 (
__exãnsi⁄__
 \

155 ({ 
size_t
 
__˝u
 = (
˝u
); \

156 
__˝u
 < 8 * (
£tsize
) \

157 ? ((((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

158 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

159 : 0; }))

	)

161 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

162 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

164 #i‡
__GNUC_PREREQ
 (2, 91)

165 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

166 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

168 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

169 (
__exãnsi⁄__
 \

170 ({ 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

171 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

172 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

173 
size_t
 
__i
; \

174 
__i
 = 0; __ò< 
__imax
; ++__i) \

175 i‡(
__bôs
[
__i
] != __bits[__i]) \

177 
__i
 =
__imax
; }))

	)

180 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

181 (
__exãnsi⁄__
 \

182 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

183 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

184 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

185 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

186 
size_t
 
__i
; \

187 
__i
 = 0; __ò< 
__imax
; ++__i) \

188 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

189 
__de°
; }))

	)

191 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

192 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

193 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

194 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

196 
__BEGIN_DECLS


198 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

199 
__THROW
;

200 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

201 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

203 
__END_DECLS


	@/usr/include/bits/sigaction.h

20 #i‚de‡
_SIGNAL_H


25 
	ssiga˘i⁄


28 #ifde‡
__USE_POSIX199309


32 
__sigh™dÀr_t
 
	mß_h™dÀr
;

34 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

36 
	m__siga˘i⁄_h™dÀr
;

37 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

38 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

40 
__sigh™dÀr_t
 
	mß_h™dÀr
;

44 
__sig£t_t
 
	mß_mask
;

47 
	mß_Êags
;

50 (*
	mß_ª°‹î
) ();

54 
	#SA_NOCLDSTOP
 1

	)

55 
	#SA_NOCLDWAIT
 2

	)

56 
	#SA_SIGINFO
 4

	)

58 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


59 
	#SA_ONSTACK
 0x08000000

	)

60 
	#SA_RESTART
 0x10000000

	)

61 
	#SA_NODEFER
 0x40000000

	)

63 
	#SA_RESETHAND
 0x80000000

	)

65 #ifde‡
__USE_MISC


66 
	#SA_INTERRUPT
 0x20000000

	)

69 
	#SA_NOMASK
 
SA_NODEFER


	)

70 
	#SA_ONESHOT
 
SA_RESETHAND


	)

71 
	#SA_STACK
 
SA_ONSTACK


	)

75 
	#SIG_BLOCK
 0

	)

76 
	#SIG_UNBLOCK
 1

	)

77 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

19 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


23 #i‚de‡
sigc⁄ãxt_°ru˘


26 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

28 
	~<asm/sigc⁄ãxt.h
>

	@/usr/include/bits/signum.h

20 #ifdef 
_SIGNAL_H


23 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

24 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

25 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

27 #ifde‡
__USE_UNIX98


28 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

33 
	#SIGHUP
 1

	)

34 
	#SIGINT
 2

	)

35 
	#SIGQUIT
 3

	)

36 
	#SIGILL
 4

	)

37 
	#SIGTRAP
 5

	)

38 
	#SIGABRT
 6

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGBUS
 7

	)

41 
	#SIGFPE
 8

	)

42 
	#SIGKILL
 9

	)

43 
	#SIGUSR1
 10

	)

44 
	#SIGSEGV
 11

	)

45 
	#SIGUSR2
 12

	)

46 
	#SIGPIPE
 13

	)

47 
	#SIGALRM
 14

	)

48 
	#SIGTERM
 15

	)

49 
	#SIGSTKFLT
 16

	)

50 
	#SIGCLD
 
SIGCHLD


	)

51 
	#SIGCHLD
 17

	)

52 
	#SIGCONT
 18

	)

53 
	#SIGSTOP
 19

	)

54 
	#SIGTSTP
 20

	)

55 
	#SIGTTIN
 21

	)

56 
	#SIGTTOU
 22

	)

57 
	#SIGURG
 23

	)

58 
	#SIGXCPU
 24

	)

59 
	#SIGXFSZ
 25

	)

60 
	#SIGVTALRM
 26

	)

61 
	#SIGPROF
 27

	)

62 
	#SIGWINCH
 28

	)

63 
	#SIGPOLL
 
SIGIO


	)

64 
	#SIGIO
 29

	)

65 
	#SIGPWR
 30

	)

66 
	#SIGSYS
 31

	)

67 
	#SIGUNUSED
 31

	)

69 
	#_NSIG
 65

	)

72 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

73 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

77 
	#__SIGRTMIN
 32

	)

78 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigstack.h

20 #i‚de‡
_SIGNAL_H


26 
	ssig°ack


28 *
	mss_•
;

29 
	mss_⁄°ack
;

36 
	mSS_ONSTACK
 = 1,

37 
	#SS_ONSTACK
 
SS_ONSTACK


	)

38 
	mSS_DISABLE


39 
	#SS_DISABLE
 
SS_DISABLE


	)

43 
	#MINSIGSTKSZ
 2048

	)

46 
	#SIGSTKSZ
 8192

	)

50 
	ssigÆt°ack


52 *
	mss_•
;

53 
	mss_Êags
;

54 
size_t
 
	mss_size
;

55 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

20 #i‚de‡
_BITS_SIGTHREAD_H


21 
	#_BITS_SIGTHREAD_H
 1

	)

23 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


31 
	$±hªad_sigmask
 (
__how
,

32 
__c⁄°
 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

38 #ifde‡
__USE_GNU


40 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

41 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/sockaddr.h

24 #i‚de‡
_BITS_SOCKADDR_H


25 
	#_BITS_SOCKADDR_H
 1

	)

29 
	tß_Ámûy_t
;

35 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

36 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

38 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

25 
	$__libc_lock_deföe_ªcursive
 (, 
_IO_lock_t
)

28 #ifde‡
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


29 
	t_IO_lock_öôülizî
 
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


	)

30 #ñi‡
	t_IO_MTSAFE_IO


31 #îr‹ 
	tlibio
 
	t√eds
 
	tªcursive
 
	tmuãxes
 
	t_IO_MTSAFE_IO


34 
	t_IO_lock_öô
(
	t_«me
Ë
	t__libc_lock_öô_ªcursive
 (_«me)

	)

35 
	t_IO_lock_föi
(
	t_«me
Ë
	t__libc_lock_föi_ªcursive
 (_«me)

	)

36 
	t_IO_lock_lock
(
	t_«me
Ë
	t__libc_lock_lock_ªcursive
 (_«me)

	)

37 
	t_IO_lock_åylock
(
	t_«me
Ë
	t__libc_lock_åylock_ªcursive
 (_«me)

	)

38 
	t_IO_lock_u∆ock
(
	t_«me
Ë
	t__libc_lock_u∆ock_ªcursive
 (_«me)

	)

41 
	t_IO_˛ónup_ªgi⁄_°¨t
(
	t_f˘
, 
	t_Â
) \

42 
	t__libc_˛ónup_ªgi⁄_°¨t
 (((
	t_Â
)->
	t_Êags
 & 
	t_IO_USER_LOCK
Ë=0, 
	t_f˘
, _Â)

	)

43 
	t_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
	t_f˘
) \

44 
	t__libc_˛ónup_ªgi⁄_°¨t
 (1, 
	t_f˘
, 
	tNULL
)

	)

45 
	t_IO_˛ónup_ªgi⁄_íd
(
	t_doô
) \

46 
	t__libc_˛ónup_ªgi⁄_íd
 (
	t_doô
)

	)

48 #i‡
	tdeföed
 
	t_LIBC
 && !deföed 
	tNOT_IN_libc


49 
	t_IO_acquúe_lock
(
	t_Â
) \

50 
	t_IO_˛ónup_ªgi⁄_°¨t
 (((*Ë(*)Ë
	t_IO_fu∆ockfûe
, (
	t_Â
)); \

51 
	`_IO_Êockfûe
 (
_Â
)

	)

53 
	#_IO_ªÀa£_lock
(
_Â
) \

54 
	`_IO_fu∆ockfûe
 (
_Â
); \

55 
	`_IO_˛ónup_ªgi⁄_íd
 (0)

	)

	@/usr/include/bits/syslog-ldbl.h

20 #i‚de‡
_SYS_SYSLOG_H


24 
	$__LDBL_REDIR_DECL
 (
sy¶og
)

26 #ifde‡
__USE_BSD


27 
	$__LDBL_REDIR_DECL
 (
vsy¶og
)

30 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


31 
	$__LDBL_REDIR_DECL
 (
__sy¶og_chk
)

33 #ifde‡
__USE_BSD


34 
	$__LDBL_REDIR_DECL
 (
__vsy¶og_chk
)

	@/usr/include/bits/syslog-path.h

20 #i‚de‡
_SYS_SYSLOG_H


24 #i‚de‡
_BITS_SYSLOG_PATH_H


25 
	#_BITS_SYSLOG_PATH_H
 1

	)

27 
	#_PATH_LOG
 "/dev/log"

	)

	@/usr/include/bits/syslog.h

20 #i‚de‡
_SYS_SYSLOG_H


25 
	$__sy¶og_chk
 (
__¥i
, 
__Êag
, 
__c⁄°
 *
__fmt
, ...)

26 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

28 #ifde‡
__va_¨g_∑ck


29 
__exã∫_Æways_ölöe
 

30 
	$sy¶og
 (
__¥i
, 
__c⁄°
 *
__fmt
, ...)

32  
	`__sy¶og_chk
 (
__¥i
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

33 
	}
}

34 #ñi‡!
deföed
 
__˝lu•lus


35 
	#sy¶og
(
¥i
, ...) \

36 
	`__sy¶og_chk
 (
¥i
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

40 #ifde‡
__USE_BSD


41 
	$__vsy¶og_chk
 (
__¥i
, 
__Êag
, 
__c⁄°
 *
__fmt
,

42 
__gnuc_va_li°
 
__≠
)

43 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

45 
__exã∫_Æways_ölöe
 

46 
	$vsy¶og
 (
__¥i
, 
__c⁄°
 *
__fmt
, 
__gnuc_va_li°
 
__≠
)

48  
	`__vsy¶og_chk
 (
__¥i
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

49 
	}
}

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/param.h

1 #i‚de‡
_LINUX_PARAM_H


2 
	#_LINUX_PARAM_H


	)

4 
	~<asm/∑øm.h
>

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

45 
	t__kî√l_mqd_t
;

47 
	~<asm/posix_ty≥s.h
>

	@/usr/include/linux/sockios.h

18 #i‚de‡
_LINUX_SOCKIOS_H


19 
	#_LINUX_SOCKIOS_H


	)

21 
	~<asm/sockios.h
>

24 
	#SIOCINQ
 
FIONREAD


	)

25 
	#SIOCOUTQ
 
TIOCOUTQ


	)

28 
	#SIOCADDRT
 0x890B

	)

29 
	#SIOCDELRT
 0x890C

	)

30 
	#SIOCRTMSG
 0x890D

	)

33 
	#SIOCGIFNAME
 0x8910

	)

34 
	#SIOCSIFLINK
 0x8911

	)

35 
	#SIOCGIFCONF
 0x8912

	)

36 
	#SIOCGIFFLAGS
 0x8913

	)

37 
	#SIOCSIFFLAGS
 0x8914

	)

38 
	#SIOCGIFADDR
 0x8915

	)

39 
	#SIOCSIFADDR
 0x8916

	)

40 
	#SIOCGIFDSTADDR
 0x8917

	)

41 
	#SIOCSIFDSTADDR
 0x8918

	)

42 
	#SIOCGIFBRDADDR
 0x8919

	)

43 
	#SIOCSIFBRDADDR
 0x891®

	)

44 
	#SIOCGIFNETMASK
 0x891b

	)

45 
	#SIOCSIFNETMASK
 0x891¯

	)

46 
	#SIOCGIFMETRIC
 0x891d

	)

47 
	#SIOCSIFMETRIC
 0x891ê

	)

48 
	#SIOCGIFMEM
 0x891‡

	)

49 
	#SIOCSIFMEM
 0x8920

	)

50 
	#SIOCGIFMTU
 0x8921

	)

51 
	#SIOCSIFMTU
 0x8922

	)

52 
	#SIOCSIFNAME
 0x8923

	)

53 
	#SIOCSIFHWADDR
 0x8924

	)

54 
	#SIOCGIFENCAP
 0x8925

	)

55 
	#SIOCSIFENCAP
 0x8926

	)

56 
	#SIOCGIFHWADDR
 0x8927

	)

57 
	#SIOCGIFSLAVE
 0x8929

	)

58 
	#SIOCSIFSLAVE
 0x8930

	)

59 
	#SIOCADDMULTI
 0x8931

	)

60 
	#SIOCDELMULTI
 0x8932

	)

61 
	#SIOCGIFINDEX
 0x8933

	)

62 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

63 
	#SIOCSIFPFLAGS
 0x8934

	)

64 
	#SIOCGIFPFLAGS
 0x8935

	)

65 
	#SIOCDIFADDR
 0x8936

	)

66 
	#SIOCSIFHWBROADCAST
 0x8937

	)

67 
	#SIOCGIFCOUNT
 0x8938

	)

69 
	#SIOCGIFBR
 0x8940

	)

70 
	#SIOCSIFBR
 0x8941

	)

72 
	#SIOCGIFTXQLEN
 0x8942

	)

73 
	#SIOCSIFTXQLEN
 0x8943

	)

78 
	#SIOCETHTOOL
 0x8946

	)

80 
	#SIOCGMIIPHY
 0x8947

	)

81 
	#SIOCGMIIREG
 0x8948

	)

82 
	#SIOCSMIIREG
 0x8949

	)

84 
	#SIOCWANDEV
 0x894A

	)

88 
	#SIOCDARP
 0x8953

	)

89 
	#SIOCGARP
 0x8954

	)

90 
	#SIOCSARP
 0x8955

	)

93 
	#SIOCDRARP
 0x8960

	)

94 
	#SIOCGRARP
 0x8961

	)

95 
	#SIOCSRARP
 0x8962

	)

99 
	#SIOCGIFMAP
 0x8970

	)

100 
	#SIOCSIFMAP
 0x8971

	)

104 
	#SIOCADDDLCI
 0x8980

	)

105 
	#SIOCDELDLCI
 0x8981

	)

107 
	#SIOCGIFVLAN
 0x8982

	)

108 
	#SIOCSIFVLAN
 0x8983

	)

112 
	#SIOCBONDENSLAVE
 0x8990

	)

113 
	#SIOCBONDRELEASE
 0x8991

	)

114 
	#SIOCBONDSETHWADDR
 0x8992

	)

115 
	#SIOCBONDSLAVEINFOQUERY
 0x8993

	)

116 
	#SIOCBONDINFOQUERY
 0x8994

	)

117 
	#SIOCBONDCHANGEACTIVE
 0x8995

	)

120 
	#SIOCBRADDBR
 0x89a0

	)

121 
	#SIOCBRDELBR
 0x89a1

	)

122 
	#SIOCBRADDIF
 0x89a2

	)

123 
	#SIOCBRDELIF
 0x89a3

	)

126 
	#SIOCSHWTSTAMP
 0x89b0

	)

139 
	#SIOCDEVPRIVATE
 0x89F0

	)

145 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/linux/uio.h

1 #i‚de‡
__LINUX_UIO_H


2 
	#__LINUX_UIO_H


	)

5 
	~<löux/ty≥s.h
>

16 
	siovec


18 *
	miov_ba£
;

19 
__kî√l_size_t
 
	miov_Àn
;

26 
	#UIO_FASTIOV
 8

	)

27 
	#UIO_MAXIOV
 1024

	)

	@/usr/include/sys/bitypes.h

3 
	~<sys/ty≥s.h
>

	@/usr/include/sys/ucontext.h

19 #i‚de‡
_SYS_UCONTEXT_H


20 
	#_SYS_UCONTEXT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sig«l.h
>

27 
	~<bôs/sigc⁄ãxt.h
>

31 
	tgªg_t
;

34 
	#NGREG
 19

	)

37 
gªg_t
 
	tgªg£t_t
[
NGREG
];

39 #ifde‡
__USE_GNU


43 
	mREG_GS
 = 0,

44 
	#REG_GS
 
REG_GS


	)

45 
	mREG_FS
,

46 
	#REG_FS
 
REG_FS


	)

47 
	mREG_ES
,

48 
	#REG_ES
 
REG_ES


	)

49 
	mREG_DS
,

50 
	#REG_DS
 
REG_DS


	)

51 
	mREG_EDI
,

52 
	#REG_EDI
 
REG_EDI


	)

53 
	mREG_ESI
,

54 
	#REG_ESI
 
REG_ESI


	)

55 
	mREG_EBP
,

56 
	#REG_EBP
 
REG_EBP


	)

57 
	mREG_ESP
,

58 
	#REG_ESP
 
REG_ESP


	)

59 
	mREG_EBX
,

60 
	#REG_EBX
 
REG_EBX


	)

61 
	mREG_EDX
,

62 
	#REG_EDX
 
REG_EDX


	)

63 
	mREG_ECX
,

64 
	#REG_ECX
 
REG_ECX


	)

65 
	mREG_EAX
,

66 
	#REG_EAX
 
REG_EAX


	)

67 
	mREG_TRAPNO
,

68 
	#REG_TRAPNO
 
REG_TRAPNO


	)

69 
	mREG_ERR
,

70 
	#REG_ERR
 
REG_ERR


	)

71 
	mREG_EIP
,

72 
	#REG_EIP
 
REG_EIP


	)

73 
	mREG_CS
,

74 
	#REG_CS
 
REG_CS


	)

75 
	mREG_EFL
,

76 
	#REG_EFL
 
REG_EFL


	)

77 
	mREG_UESP
,

78 
	#REG_UESP
 
REG_UESP


	)

79 
	mREG_SS


80 
	#REG_SS
 
REG_SS


	)

85 
	s_libc_Âªg


87 
	msignifiˇnd
[4];

88 
	mexp⁄ít
;

91 
	s_libc_Â°©e


93 
	mcw
;

94 
	msw
;

95 
	mèg
;

96 
	mùoff
;

97 
	mcs£l
;

98 
	md©aoff
;

99 
	md©a£l
;

100 
_libc_Âªg
 
	m_°
[8];

101 
	m°©us
;

105 
_libc_Â°©e
 *
	tÂªg£t_t
;

110 
gªg£t_t
 
	mgªgs
;

113 
Âªg£t_t
 
	mÂªgs
;

114 
	mﬁdmask
;

115 
	m¸2
;

116 } 
	tmc⁄ãxt_t
;

119 
	suc⁄ãxt


121 
	muc_Êags
;

122 
uc⁄ãxt
 *
	muc_lök
;

123 
°ack_t
 
	muc_°ack
;

124 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

125 
__sig£t_t
 
	muc_sigmask
;

126 
_libc_Â°©e
 
	m__Âªgs_mem
;

127 } 
	tuc⁄ãxt_t
;

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/ioctl.h

1 
	~<asm-gíîic/io˘l.h
>

	@/usr/include/asm/param.h

1 #i‚de‡
_ASM_X86_PARAM_H


2 
	#_ASM_X86_PARAM_H


	)

5 #i‚de‡
HZ


6 
	#HZ
 100

	)

9 
	#EXEC_PAGESIZE
 4096

	)

11 #i‚de‡
NOGROUP


12 
	#NOGROUP
 (-1)

	)

15 
	#MAXHOSTNAMELEN
 64

	)

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~"posix_ty≥s_32.h
"

4 
	~"posix_ty≥s_64.h
"

	@/usr/include/asm/sigcontext.h

1 #i‚de‡
_ASM_X86_SIGCONTEXT_H


2 
	#_ASM_X86_SIGCONTEXT_H


	)

5 
	~<löux/ty≥s.h
>

7 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

8 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

9 
	#FP_XSTATE_MAGIC2_SIZE
 (
FP_XSTATE_MAGIC2
)

	)

23 
	s_Âx_sw_byãs
 {

24 
__u32
 
	mmagic1
;

25 
__u32
 
	mexãnded_size
;

28 
__u64
 
	mx°©e_bv
;

33 
__u32
 
	mx°©e_size
;

38 
__u32
 
	m∑ddög
[7];

41 #ifde‡
__i386__


56 
	s_Âªg
 {

57 
	msignifiˇnd
[4];

58 
	mexp⁄ít
;

61 
	s_Âxªg
 {

62 
	msignifiˇnd
[4];

63 
	mexp⁄ít
;

64 
	m∑ddög
[3];

67 
	s_xmmªg
 {

68 
	mñemít
[4];

71 
	s_Â°©e
 {

73 
	mcw
;

74 
	msw
;

75 
	mèg
;

76 
	mùoff
;

77 
	mcs£l
;

78 
	md©aoff
;

79 
	md©a£l
;

80 
_Âªg
 
	m_°
[8];

81 
	m°©us
;

82 
	mmagic
;

85 
	m_fx§_ív
[6];

86 
	mmxc§
;

87 
	mª£rved
;

88 
_Âxªg
 
	m_fx§_°
[8];

89 
_xmmªg
 
	m_xmm
[8];

90 
	m∑ddög1
[44];

93 
	m∑ddög2
[12];

94 
_Âx_sw_byãs
 
	msw_ª£rved
;

99 
	#X86_FXSR_MAGIC
 0x0000

	)

104 
	ssigc⁄ãxt
 {

105 
	mgs
, 
	m__gsh
;

106 
	mfs
, 
	m__fsh
;

107 
	mes
, 
	m__esh
;

108 
	mds
, 
	m__dsh
;

109 
	medi
;

110 
	mesi
;

111 
	mebp
;

112 
	me•
;

113 
	mebx
;

114 
	medx
;

115 
	mecx
;

116 
	móx
;

117 
	må≠no
;

118 
	mîr
;

119 
	meù
;

120 
	mcs
, 
	m__csh
;

121 
	meÊags
;

122 
	me•_©_sig«l
;

123 
	mss
, 
	m__ssh
;

124 
_Â°©e
 *
	mÂ°©e
;

125 
	mﬁdmask
;

126 
	m¸2
;

134 
	s_Â°©e
 {

135 
__u16
 
	mcwd
;

136 
__u16
 
	mswd
;

137 
__u16
 
	mtwd
;

139 
__u16
 
	mf›
;

140 
__u64
 
	mrù
;

141 
__u64
 
	mrdp
;

142 
__u32
 
	mmxc§
;

143 
__u32
 
	mmxc§_mask
;

144 
__u32
 
	m°_•a˚
[32];

145 
__u32
 
	mxmm_•a˚
[64];

146 
__u32
 
	mª£rved2
[12];

148 
__u32
 
	mª£rved3
[12];

149 
_Âx_sw_byãs
 
	msw_ª£rved
;

157 
	ssigc⁄ãxt
 {

158 
	mr8
;

159 
	mr9
;

160 
	mr10
;

161 
	mr11
;

162 
	mr12
;

163 
	mr13
;

164 
	mr14
;

165 
	mr15
;

166 
	mrdi
;

167 
	mrsi
;

168 
	mrbp
;

169 
	mrbx
;

170 
	mrdx
;

171 
	møx
;

172 
	mrcx
;

173 
	mr•
;

174 
	mrù
;

175 
	meÊags
;

176 
	mcs
;

177 
	mgs
;

178 
	mfs
;

179 
	m__∑d0
;

180 
	mîr
;

181 
	må≠no
;

182 
	mﬁdmask
;

183 
	m¸2
;

184 
_Â°©e
 *
	mÂ°©e
;

185 
	mª£rved1
[8];

190 
	s_xßve_hdr
 {

191 
__u64
 
	mx°©e_bv
;

192 
__u64
 
	mª£rved1
[2];

193 
__u64
 
	mª£rved2
[5];

196 
	s_ymmh_°©e
 {

198 
__u32
 
	mymmh_•a˚
[64];

207 
	s_x°©e
 {

208 
_Â°©e
 
	mÂ°©e
;

209 
_xßve_hdr
 
	mx°©e_hdr
;

210 
_ymmh_°©e
 
	mymmh
;

	@/usr/include/asm/sockios.h

1 #i‚de‡
_ASM_X86_SOCKIOS_H


2 
	#_ASM_X86_SOCKIOS_H


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

11 
	#SIOCGSTAMPNS
 0x8907

	)

	@/usr/include/bits/libc-lock.h

21 #i‚de‡
_BITS_LIBC_LOCK_H


22 
	#_BITS_LIBC_LOCK_H
 1

	)

24 
	~<±hªad.h
>

27 #ifde‡
_IO_MTSAFE_IO


28 
±hªad_muãx_t
 
	t__libc_lock_t
;

29 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

30 #ifde‡
__USE_UNIX98


31 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

33 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

35 
__libc_lock_ªcursive_t
 
	t__πld_lock_ªcursive_t
;

37 
__libc_lock_›aque__
 
	t__libc_lock_t
;

38 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

39 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

43 
±hªad_key_t
 
	t__libc_key_t
;

52 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

53 
CLASS
 
__libc_lock_t
 
NAME
;

	)

54 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

55 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

56 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

57 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

58 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

59 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

70 #i‡
__LT_SPINLOCK_INIT
 == 0

71 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

72 
CLASS
 
__libc_lock_t
 
NAME
;

	)

74 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

75 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

78 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

79 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

83 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

84 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

85 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

86 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

88 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

89 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

90 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

91 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

93 #i‡
deföed
 
__PIC__


94 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

95 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

96 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

98 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

99 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

101 
	#__libc_maybe_ˇŒ2
(
FUNC
, 
ARGS
, 
ELSE
Ë
	`__libc_maybe_ˇŒ
 (
__
##FUNC, ARGS, ELSE)

	)

105 
	#__libc_lock_öô
(
NAME
) \

106 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0))

	)

107 
	#__libc_rwlock_öô
(
NAME
) \

108 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0));

	)

111 
	#__libc_lock_öô_ªcursive
(
NAME
) \

113 i‡(
__±hªad_muãx_öô
 !
NULL
) \

115 
±hªad_muãx©å_t
 
__©å
; \

116 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

117 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

118 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

119 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

121 } 0);

	)

122 
	#__πld_lock_öô_ªcursive
(
NAME
) \

123 
	`__libc_lock_öô_ªcursive
 (
NAME
)

	)

128 
	#__libc_lock_föi
(
NAME
) \

129 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_de°roy
, (&(
NAME
)), 0));

	)

130 
	#__libc_rwlock_föi
(
NAME
) \

131 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0));

	)

134 
	#__libc_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi
 ((NAME).
muãx
)

	)

135 
	#__πld_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi_ªcursive
 (NAME)

	)

138 
	#__libc_lock_lock
(
NAME
) \

139 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_lock
, (&(
NAME
)), 0));

	)

140 
	#__libc_rwlock_rdlock
(
NAME
) \

141 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0));

	)

142 
	#__libc_rwlock_wæock
(
NAME
) \

143 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0));

	)

146 
	#__libc_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock
 ((NAME).
muãx
)

	)

149 
	#__libc_lock_åylock
(
NAME
) \

150 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_åylock
, (&(
NAME
)), 0))

	)

151 
	#__libc_rwlock_åyrdlock
(
NAME
) \

152 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0))

	)

153 
	#__libc_rwlock_åywæock
(
NAME
) \

154 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0))

	)

157 
	#__libc_lock_åylock_ªcursive
(
NAME
Ë
	`__libc_lock_åylock
 ((NAME).
muãx
)

	)

158 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

159 
	`__libc_lock_åylock_ªcursive
 (
NAME
)

	)

162 
	#__libc_lock_u∆ock
(
NAME
) \

163 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_u∆ock
, (&(
NAME
)), 0));

	)

164 
	#__libc_rwlock_u∆ock
(
NAME
) \

165 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0));

	)

168 
	#__libc_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock
 ((NAME).
muãx
)

	)

170 
	#__πld_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock_ªcursive
 (NAME)

	)

171 
	#__πld_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock_ªcursive
 (NAME)

	)

174 #i‡
PTHREAD_ONCE_INIT
 == 0

177 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

178 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

180 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

181 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

185 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

187 i‡(
__±hªad_⁄˚
 !
NULL
) \

188 
	`__±hªad_⁄˚
 (&(
ONCE_CONTROL
), (
INIT_FUNCTION
)); \

189 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

190 
	`INIT_FUNCTION
 (); \

191 (
ONCE_CONTROL
) = 2; \

193 } 0)

	)

197 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

198 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

199 
_avaû
 = (
DOIT
Ë&& 
_±hªad_˛ónup_push_de„r
 !
NULL
; \

200 i‡(
_avaû
) { \

201 
	`_±hªad_˛ónup_push_de„r
 (&
_buf„r
, (
FCT
), (
ARG
)); \

202 }

	)

205 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

206 i‡(
_avaû
) { \

207 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

209 }

	)

212 
	#__libc_˛ónup_íd
(
DOIT
) \

213 i‡(
_avaû
) { \

214 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

215 }

	)

217 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

218 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

219 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_push
, (&
_buf„r
, (
f˘
), (
¨g
)), 0)

	)

221 
	#__libc_˛ónup_p›
(
execuã
) \

222 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_p›
, (&
_buf„r
, 
execuã
), 0); \

223 }

	)

226 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

227 (
	`__libc_maybe_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1))

	)

230 
	#__libc_gë•ecific
(
KEY
) \

231 (
	`__libc_maybe_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
))

	)

234 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

235 (
	`__libc_maybe_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0))

	)

239 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

240 (
	`__libc_maybe_ˇŒ
 (
__±hªad_©f‹k
, (
PREPARE
, 
PARENT
, 
CHILD
), 0))

	)

242 
__BEGIN_DECLS


244 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

245 (*
__routöe
) (*),

246 *
__¨g
Ë
__THROW
;

248 
	$_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

249 
__execuã
Ë
__THROW
;

255 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

256 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

258 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

260 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

262 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

264 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

266 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

268 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

270 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

271 
__köd
);

273 #ifde‡
__USE_UNIX98


274 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

275 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

277 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

279 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

281 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

283 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

285 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

287 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

290 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

291 (*
__de°r_fun˘i⁄
) (*));

293 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

294 
__c⁄°
 *
__poöãr
);

296 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

298 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

299 (*
__öô_routöe
) ());

301 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

302 (*
__∑ª¡
) (),

303 (*
__chûd
) ());

305 
__END_DECLS


309 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


310 #¥agm®
wók
 
__±hªad_muãx_öô


311 #¥agm®
wók
 
__±hªad_muãx_de°roy


312 #¥agm®
wók
 
__±hªad_muãx_lock


313 #¥agm®
wók
 
__±hªad_muãx_åylock


314 #¥agm®
wók
 
__±hªad_muãx_u∆ock


315 #¥agm®
wók
 
__±hªad_muãx©å_öô


316 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


317 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


318 #¥agm®
wók
 
__±hªad_rwlock_de°roy


319 #¥agm®
wók
 
__±hªad_rwlock_rdlock


320 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


321 #¥agm®
wók
 
__±hªad_rwlock_wæock


322 #¥agm®
wók
 
__±hªad_rwlock_åywæock


323 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


324 #¥agm®
wók
 
__±hªad_key_¸óã


325 #¥agm®
wók
 
__±hªad_£t•ecific


326 #¥agm®
wók
 
__±hªad_gë•ecific


327 #¥agm®
wók
 
__±hªad_⁄˚


328 #¥agm®
wók
 
__±hªad_öôülize


329 #¥agm®
wók
 
__±hªad_©f‹k


330 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


331 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


332 #¥agm®
wók
 
_±hªad_˛ónup_push


333 #¥agm®
wók
 
_±hªad_˛ónup_p›


338 
	#__libc_muãx_u∆ock
 
__±hªad_muãx_u∆ock


	)

	@/usr/include/bits/posix1_lim.h

25 #i‚def 
_BITS_POSIX1_LIM_H


26 
	#_BITS_POSIX1_LIM_H
 1

	)

32 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

35 
	#_POSIX_AIO_MAX
 1

	)

38 
	#_POSIX_ARG_MAX
 4096

	)

41 #ifde‡
__USE_XOPEN2K


42 
	#_POSIX_CHILD_MAX
 25

	)

44 
	#_POSIX_CHILD_MAX
 6

	)

48 
	#_POSIX_DELAYTIMER_MAX
 32

	)

52 
	#_POSIX_HOST_NAME_MAX
 255

	)

55 
	#_POSIX_LINK_MAX
 8

	)

58 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

61 
	#_POSIX_MAX_CANON
 255

	)

65 
	#_POSIX_MAX_INPUT
 255

	)

68 
	#_POSIX_MQ_OPEN_MAX
 8

	)

71 
	#_POSIX_MQ_PRIO_MAX
 32

	)

74 
	#_POSIX_NAME_MAX
 14

	)

77 #ifde‡
__USE_XOPEN2K


78 
	#_POSIX_NGROUPS_MAX
 8

	)

80 
	#_POSIX_NGROUPS_MAX
 0

	)

84 #ifde‡
__USE_XOPEN2K


85 
	#_POSIX_OPEN_MAX
 20

	)

87 
	#_POSIX_OPEN_MAX
 16

	)

90 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


93 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

97 
	#_POSIX_PATH_MAX
 256

	)

100 
	#_POSIX_PIPE_BUF
 512

	)

104 
	#_POSIX_RE_DUP_MAX
 255

	)

107 
	#_POSIX_RTSIG_MAX
 8

	)

110 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

113 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

116 
	#_POSIX_SIGQUEUE_MAX
 32

	)

119 
	#_POSIX_SSIZE_MAX
 32767

	)

122 
	#_POSIX_STREAM_MAX
 8

	)

125 
	#_POSIX_SYMLINK_MAX
 255

	)

129 
	#_POSIX_SYMLOOP_MAX
 8

	)

132 
	#_POSIX_TIMER_MAX
 32

	)

135 
	#_POSIX_TTY_NAME_MAX
 9

	)

138 
	#_POSIX_TZNAME_MAX
 6

	)

140 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


142 
	#_POSIX_QLIMIT
 1

	)

146 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

149 
	#_POSIX_UIO_MAXIOV
 16

	)

153 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

157 
	~<bôs/loˇl_lim.h
>

160 #i‚def 
SSIZE_MAX


161 
	#SSIZE_MAX
 
LONG_MAX


	)

168 #i‚def 
NGROUPS_MAX


169 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

23 #i‚def 
_BITS_POSIX2_LIM_H


24 
	#_BITS_POSIX2_LIM_H
 1

	)

28 
	#_POSIX2_BC_BASE_MAX
 99

	)

31 
	#_POSIX2_BC_DIM_MAX
 2048

	)

34 
	#_POSIX2_BC_SCALE_MAX
 99

	)

37 
	#_POSIX2_BC_STRING_MAX
 1000

	)

41 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

45 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

48 
	#_POSIX2_LINE_MAX
 2048

	)

52 
	#_POSIX2_RE_DUP_MAX
 255

	)

56 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

63 #i‚def 
BC_BASE_MAX


64 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

66 #i‚def 
BC_DIM_MAX


67 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

69 #i‚def 
BC_SCALE_MAX


70 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

72 #i‚def 
BC_STRING_MAX


73 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

75 #i‚def 
COLL_WEIGHTS_MAX


76 
	#COLL_WEIGHTS_MAX
 255

	)

78 #i‚def 
EXPR_NEST_MAX


79 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

81 #i‚def 
LINE_MAX


82 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

84 #i‚def 
CHARCLASS_NAME_MAX


85 
	#CHARCLASS_NAME_MAX
 2048

	)

89 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/xopen_lim.h

30 #i‚de‡
_XOPEN_LIM_H


31 
	#_XOPEN_LIM_H
 1

	)

33 
	#__√ed_IOV_MAX


	)

34 
	~<bôs/°dio_lim.h
>

66 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

71 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

74 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

77 
	#NL_MSGMAX
 
INT_MAX


	)

81 
	#NL_NMAX
 
INT_MAX


	)

84 
	#NL_SETMAX
 
INT_MAX


	)

87 
	#NL_TEXTMAX
 
INT_MAX


	)

90 
	#NZERO
 20

	)

94 #ifde‡
INT_MAX


95 #i‡
INT_MAX
 == 32767

96 
	#WORD_BIT
 16

	)

98 #i‡
INT_MAX
 == 2147483647

99 
	#WORD_BIT
 32

	)

102 
	#WORD_BIT
 64

	)

105 #ñi‡
deföed
 
__INT_MAX__


106 #i‡
__INT_MAX__
 == 32767

107 
	#WORD_BIT
 16

	)

109 #i‡
__INT_MAX__
 == 2147483647

110 
	#WORD_BIT
 32

	)

113 
	#WORD_BIT
 64

	)

117 
	#WORD_BIT
 32

	)

121 #ifde‡
LONG_MAX


122 #i‡
LONG_MAX
 == 2147483647

123 
	#LONG_BIT
 32

	)

126 
	#LONG_BIT
 64

	)

128 #ñi‡
deföed
 
__LONG_MAX__


129 #i‡
__LONG_MAX__
 == 2147483647

130 
	#LONG_BIT
 32

	)

133 
	#LONG_BIT
 64

	)

136 
	~<bôs/w‹dsize.h
>

137 #i‡
__WORDSIZE
 == 64

138 
	#LONG_BIT
 64

	)

140 
	#LONG_BIT
 32

	)

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

72 
	t__c⁄°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

86 
	t__c⁄°
 *,

87 
	t__c⁄°
 **,

88 
	t__c⁄°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

93 
	t__c⁄°
 *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 
__c⁄°
 *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

6 #unde‡
NULL


7 #i‡
deföed
(
__˝lu•lus
)

8 
	#NULL
 0

	)

10 
	#NULL
 ((*)0)

	)

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

55 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

56 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

61 #i‚de‡
_WINT_T


66 
	#_WINT_T


	)

67 
	twöt_t
;

71 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

72 && 
deföed
 
__WINT_TYPE__


73 
__BEGIN_NAMESPACE_STD


74 
__WINT_TYPE__
 
	twöt_t
;

75 
	g__END_NAMESPACE_STD


80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

323 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

327 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

328 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

332 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

333 
__THROW
;

336 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifde‡
__USE_GNU


342 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

343 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

344 
__THROW
;

348 
__BEGIN_NAMESPACE_STD


351 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

355 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

359 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

363 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

364 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

365 
mb°©e_t
 *
__p
Ë
__THROW
;

368 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

369 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

372 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

373 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
__END_NAMESPACE_STD


378 #ifde‡
__USE_EXTERN_INLINES


384 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

385 
__exã∫_ölöe
 
wöt_t


386 
	`__NTH
 (
	$btowc
 (
__c
))

387 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

388 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

390 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

391 
__exã∫_ölöe
 

392 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

393 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

394 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

396 
__exã∫_ölöe
 
size_t


397 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

398 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

399 {  (
__ps
 !
NULL


400 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

403 
__BEGIN_NAMESPACE_STD


406 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

407 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

408 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

412 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

413 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

414 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

415 
__END_NAMESPACE_STD


418 #ifdef 
__USE_XOPEN2K8


421 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

422 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

423 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

427 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

428 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

429 
size_t
 
__nwc
, size_à
__Àn
,

430 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

435 #ifde‡
__USE_XOPEN


437 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

441 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

445 
__BEGIN_NAMESPACE_STD


448 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

449 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

450 
__END_NAMESPACE_STD


452 #ifde‡
__USE_ISOC99


453 
__BEGIN_NAMESPACE_C99


455 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

456 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

457 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
__END_NAMESPACE_C99


463 
__BEGIN_NAMESPACE_STD


466 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

467 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

471 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

473 
__THROW
;

474 
__END_NAMESPACE_STD


476 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

477 
__BEGIN_NAMESPACE_C99


480 
__exãnsi⁄__


481 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

483 
__THROW
;

487 
__exãnsi⁄__


488 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

489 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

490 
__ba£
Ë
__THROW
;

491 
__END_NAMESPACE_C99


494 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


497 
__exãnsi⁄__


498 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

499 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

500 
__THROW
;

504 
__exãnsi⁄__


505 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

507 
__ba£
Ë
__THROW
;

510 #ifde‡
__USE_GNU


524 
	~<xloˇÀ.h
>

528 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

529 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

530 
__loˇÀ_t
 
__loc
Ë
__THROW
;

532 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

533 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

534 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

536 
__exãnsi⁄__


537 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
)

545 
__THROW
;

547 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
;

551 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

552 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
;

555 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

556 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

557 
__loˇÀ_t
 
__loc
Ë
__THROW
;

561 #ifdef 
__USE_XOPEN2K8


564 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
Ë
__THROW
;

568 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
)

569 
__THROW
;

575 #ifdef 
__USE_XOPEN2K8


578 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

581 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_STD


585 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

592 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

599 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

603 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
__THROW
 ;

610 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

612 
__gnuc_va_li°
 
__¨g
)

618 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

619 
__gnuc_va_li°
 
__¨g
)

623 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

624 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

625 
__gnuc_va_li°
 
__¨g
)

626 
__THROW
 ;

633 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

634 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

640 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

644 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
__THROW
 ;

647 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

648 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

649 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

650 #ifde‡
__REDIRECT


654 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

655 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

656 
__isoc99_fwsˇnf
)

658 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

659 
__isoc99_wsˇnf
)

661 
	`__REDIRECT
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

662 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

663 
__isoc99_swsˇnf
)

664 
__THROW
 ;

666 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

667 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

669 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

671 
__THROW
;

672 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

673 
	#wsˇnf
 
__isoc99_wsˇnf


	)

674 
	#swsˇnf
 
__isoc99_swsˇnf


	)

678 
__END_NAMESPACE_STD


681 #ifde‡
__USE_ISOC99


682 
__BEGIN_NAMESPACE_C99


687 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

688 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

689 
__gnuc_va_li°
 
__¨g
)

695 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

696 
__gnuc_va_li°
 
__¨g
)

699 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

700 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

702 
__THROW
 ;

704 #i‡!
deföed
 
__USE_GNU
 \

705 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

706 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

707 #ifde‡
__REDIRECT


708 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

709 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

710 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

712 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

713 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

715 
	`__REDIRECT
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

716 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

717 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

718 
__THROW
 ;

720 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

721 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
);

723 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

726 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

728 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

729 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

730 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

734 
__END_NAMESPACE_C99


738 
__BEGIN_NAMESPACE_STD


743 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

744 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

750 
wöt_t
 
	`gëwch¨
 ();

757 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

758 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

764 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

772 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

773 
__FILE
 *
__ª°ri˘
 
__°ªam
);

779 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

780 
__FILE
 *
__ª°ri˘
 
__°ªam
);

787 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

788 
__END_NAMESPACE_STD


791 #ifde‡
__USE_GNU


799 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

800 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

808 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

816 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

826 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

835 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

836 
__FILE
 *
__ª°ri˘
 
__°ªam
);

844 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

845 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
__BEGIN_NAMESPACE_C99


853 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

854 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

855 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

856 
__END_NAMESPACE_C99


858 #ifde‡
__USE_GNU


859 
	~<xloˇÀ.h
>

863 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

864 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

865 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

866 
__loˇÀ_t
 
__loc
Ë
__THROW
;

875 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


876 
	#__√ed_iswxxx


	)

877 
	~<w˘y≥.h
>

881 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


882 
	~<bôs/wch¨2.h
>

885 #ifde‡
__LDBL_COMPAT


886 
	~<bôs/wch¨-ldbl.h
>

889 
__END_DECLS


897 #unde‡
__√ed_mb°©e_t


898 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

	@/usr/include/asm-generic/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #ifde‡
__x86_64__


5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/bits/local_lim.h

25 #i‚de‡
NR_OPEN


26 
	#__undef_NR_OPEN


	)

28 #i‚de‡
LINK_MAX


29 
	#__undef_LINK_MAX


	)

31 #i‚de‡
OPEN_MAX


32 
	#__undef_OPEN_MAX


	)

34 #i‚de‡
ARG_MAX


35 
	#__undef_ARG_MAX


	)

39 
	~<löux/limôs.h
>

42 #ifde‡
__undef_NR_OPEN


43 #unde‡
NR_OPEN


44 #unde‡
__undef_NR_OPEN


47 #ifde‡
__undef_LINK_MAX


48 #unde‡
LINK_MAX


49 #unde‡
__undef_LINK_MAX


52 #ifde‡
__undef_OPEN_MAX


53 #unde‡
OPEN_MAX


54 #unde‡
__undef_OPEN_MAX


57 #ifde‡
__undef_ARG_MAX


58 #unde‡
ARG_MAX


59 #unde‡
__undef_ARG_MAX


63 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

65 
	#PTHREAD_KEYS_MAX
 1024

	)

68 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

70 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

73 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

75 #unde‡
PTHREAD_THREADS_MAX


79 
	#AIO_PRIO_DELTA_MAX
 20

	)

82 
	#PTHREAD_STACK_MIN
 16384

	)

85 
	#DELAYTIMER_MAX
 2147483647

	)

88 
	#TTY_NAME_MAX
 32

	)

91 
	#LOGIN_NAME_MAX
 256

	)

94 
	#HOST_NAME_MAX
 64

	)

97 
	#MQ_PRIO_MAX
 32768

	)

100 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/wchar-ldbl.h

20 #i‚de‡
_WCHAR_H


24 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
w¥ötf
);

28 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

31 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

32 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

33 && !
deföed
 
	g__REDIRECT
 \

34 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

35 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

37 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

39 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

41 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

43 
__END_NAMESPACE_C99


46 #ifde‡
__USE_ISOC99


47 
__BEGIN_NAMESPACE_C99


48 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

49 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

50 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

51 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

53 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

55 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

57 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

59 
__END_NAMESPACE_C99


62 #ifde‡
__USE_GNU


63 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

66 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


67 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

68 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

69 #i‡
__USE_FORTIFY_LEVEL
 > 1

70 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

73 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

20 #i‚de‡
_WCHAR_H


25 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

26 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
Ë
__THROW
;

28 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

29 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

30 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

31 
wmem˝y
);

32 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

33 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

34 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

35 
size_t
 
__ns1
), 
__wmem˝y_chk
)

36 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

39 
__exã∫_Æways_ölöe
 
wch¨_t
 *

40 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

41 
size_t
 
__n
))

43 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

45 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

46  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

47 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

49 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

50  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

51 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

53  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

54 
	}
}

57 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

58 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

59 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

60 
__c⁄°
 
wch¨_t
 *
__s2
,

61 
size_t
 
__n
), 
wmemmove
);

62 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

63 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

64 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

65 
size_t
 
__ns1
), 
__wmemmove_chk
)

66 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

69 
__exã∫_Æways_ölöe
 
wch¨_t
 *

70 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

71 
size_t
 
__n
))

73 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

75 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

76  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

77 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

79 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

80  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

81 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

83  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

84 
	}
}

87 #ifde‡
__USE_GNU


88 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

89 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

90 
size_t
 
__ns1
Ë
__THROW
;

91 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

92 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

93 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
,

94 
size_t
 
__n
), 
wmemp˝y
);

95 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

96 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

97 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

98 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

99 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

102 
__exã∫_Æways_ölöe
 
wch¨_t
 *

103 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

104 
size_t
 
__n
))

106 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

108 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

109  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

110 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

112 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

113  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

114 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

116  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

117 
	}
}

121 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

122 
size_t
 
__ns
Ë
__THROW
;

123 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

124 
size_t
 
__n
), 
wmem£t
);

125 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

126 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

127 
size_t
 
__ns
), 
__wmem£t_chk
)

128 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

131 
__exã∫_Æways_ölöe
 
wch¨_t
 *

132 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__ª°ri˘
 
__s
, wch¨_à
__c
, 
size_t
 
__n
))

134 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

136 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

137  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

139 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

140  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

141 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

143  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

144 
	}
}

147 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

149 
size_t
 
__n
Ë
__THROW
;

150 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

151 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

152 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

154 
__exã∫_Æways_ölöe
 
wch¨_t
 *

155 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

157 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

158  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

159  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

160 
	}
}

163 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
,

164 
size_t
 
__de°Àn
Ë
__THROW
;

165 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
, (wch¨_à*
__de°
,

166 
__c⁄°
 
wch¨_t
 *
__§c
),

167 
w˝˝y
);

169 
__exã∫_Æways_ölöe
 
wch¨_t
 *

170 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

172 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

173  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

174  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

175 
	}
}

178 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

179 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

180 
size_t
 
__de°Àn
Ë
__THROW
;

181 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

182 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

183 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

184 
size_t
 
__n
), 
wc¢˝y
);

185 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

186 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

187 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

188 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

189 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

192 
__exã∫_Æways_ölöe
 
wch¨_t
 *

193 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

195 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

197 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

198  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

199 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

200 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

201  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

202 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

204  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

205 
	}
}

208 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

209 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

210 
size_t
 
__de°Àn
Ë
__THROW
;

211 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

212 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

213 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

214 
size_t
 
__n
), 
w˝n˝y
);

215 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

216 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

217 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

218 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

219 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

222 
__exã∫_Æways_ölöe
 
wch¨_t
 *

223 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__exã∫_Æways_ölöe
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__exã∫_Æways_ölöe
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

265 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

266  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

267 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

268  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

269 
	}
}

272 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

273 
__Êag
, 
size_t
 
__s_Àn
,

274 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

275 
__THROW
 ;

277 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

278 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

279 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

280 
sw¥ötf
);

282 #ifde‡
__va_¨g_∑ck


283 
__exã∫_Æways_ölöe
 

284 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

285 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

287 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

288  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

289 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

290 
__fmt
, 
	`__va_¨g_∑ck
 ());

291  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

292 
	}
}

293 #ñi‡!
deföed
 
__˝lu•lus


295 
	#sw¥ötf
(
s
, 
n
, ...) \

296 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

297 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

298 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

299 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

302 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

303 
__Êag
, 
size_t
 
__s_Àn
,

304 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

305 
__gnuc_va_li°
 
__¨g
)

306 
__THROW
 ;

308 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

309 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

310 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

311 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

313 
__exã∫_Æways_ölöe
 

314 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

315 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

317 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

318  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

319 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

320  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

321 
	}
}

324 #i‡
__USE_FORTIFY_LEVEL
 > 1

326 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

327 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

328 
__w¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

330 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

331 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

332 
__gnuc_va_li°
 
__≠
);

333 
__vw¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

334 
__gnuc_va_li°
 
__≠
);

336 #ifde‡
__va_¨g_∑ck


337 
__exã∫_Æways_ölöe
 

338 
	$w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

340  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

341 
	}
}

343 
__exã∫_Æways_ölöe
 

344 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

346  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

347 
	`__va_¨g_∑ck
 ());

348 
	}
}

349 #ñi‡!
deföed
 
__˝lu•lus


350 
	#w¥ötf
(...) \

351 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

352 
	#fw¥ötf
(
°ªam
, ...) \

353 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

356 
__exã∫_Æways_ölöe
 

357 
	$vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

359  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

360 
	}
}

362 
__exã∫_Æways_ölöe
 

363 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

364 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

366  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

367 
	}
}

371 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

372 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

373 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

374 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

375 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

376 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

377 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

378 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

379 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

382 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

383 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

385 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

387 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

388  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

389 
__n
, 
__°ªam
);

391 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

392  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

393 
__n
, 
__°ªam
);

395  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

396 
	}
}

398 #ifde‡
__USE_GNU


399 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

400 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

401 
__wur
;

402 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

403 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

404 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

405 
__wur
;

406 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

407 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

408 
__FILE
 *
__ª°ri˘
 
__°ªam
),

409 
__fgëws_u∆ocked_chk
)

410 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

413 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

414 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

416 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

418 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

419  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

420 
__n
, 
__°ªam
);

422 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

423  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

424 
__n
, 
__°ªam
);

426  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

427 
	}
}

431 
size_t
 
	$__w¸tomb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__p
,

432 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

433 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

434 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

437 
__exã∫_Æways_ölöe
 
__wur
 
size_t


438 
	`__NTH
 (
	$w¸tomb
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__ps
))

443 
	#__WCHAR_MB_LEN_MAX
 16

	)

444 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


447 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

448  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

449  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

450 
	}
}

453 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

454 
__c⁄°
 **
__ª°ri˘
 
__§c
,

455 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

456 
size_t
 
__d°Àn
Ë
__THROW
;

457 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

458 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

459 
__c⁄°
 **
__ª°ri˘
 
__§c
,

460 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

461 
mb§towcs
);

462 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

463 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

464 
__c⁄°
 **
__ª°ri˘
 
__§c
,

465 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

466 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

467 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

470 
__exã∫_Æways_ölöe
 
size_t


471 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

472 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

474 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

476 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

477  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

478 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

480 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

481  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

482 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

484  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

485 
	}
}

488 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

489 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

490 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

491 
size_t
 
__d°Àn
Ë
__THROW
;

492 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

493 (*
__ª°ri˘
 
__d°
,

494 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

495 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

496 
wc§tombs
);

497 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

498 (*
__ª°ri˘
 
__d°
,

499 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

500 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

501 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

502 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

504 
__exã∫_Æways_ölöe
 
size_t


505 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

506 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

508 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

510 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

511  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

513 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

514  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

517 
	}
}

520 #ifde‡
__USE_GNU


521 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

522 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

523 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

524 
size_t
 
__d°Àn
Ë
__THROW
;

525 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

526 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

527 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

528 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

529 
mb¢πowcs
);

530 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

531 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

532 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

533 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

534 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

535 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

538 
__exã∫_Æways_ölöe
 
size_t


539 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

540 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

542 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

544 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

545  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

546 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

548 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

549  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

550 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

552  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

553 
	}
}

556 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

557 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

558 
size_t
 
__nwc
, size_à
__Àn
,

559 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

560 
__THROW
;

561 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

562 (*
__ª°ri˘
 
__d°
,

563 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

564 
size_t
 
__nwc
, size_à
__Àn
,

565 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

566 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

567 (*
__ª°ri˘
 
__d°
,

568 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

569 
size_t
 
__nwc
, size_à
__Àn
,

570 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

571 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

572 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

574 
__exã∫_Æways_ölöe
 
size_t


575 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

576 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

578 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

580 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

581  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

582 
	`__bos
 (
__d°
));

584 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

585  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

586 
	`__bos
 (
__d°
));

588  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

589 
	}
}

	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<°ddef.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@
1
.
1
/usr/include
172
4073
basetype.h
chnbuf.c
chnbuf.h
crc32.c
crc32.h
ipccmd.h
linux_list.h
mediatyp.h
misc.c
misc.h
netbase.c
netbase.h
p2pbase.c
p2pbase.h
p2pconst.h
p2pcore.c
p2pcore.h
p2pcore_ex.h
p2pcore_imp.h
p2plog.c
p2plog.h
p2psess.c
p2psess.h
p2psess_imp.h
platform_adpt.c
platform_adpt.h
rudp.c
rudp.h
rudp_imp.h
timerq.c
timerq.h
upnp_igd_cp.c
upnp_igd_cp.h
/usr/include/arpa/inet.h
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/linux/if.h
/usr/include/net/if.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/netinet/tcp.h
/usr/include/pthread.h
/usr/include/resolv.h
/usr/include/semaphore.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/ioctl.h
/usr/include/sys/select.h
/usr/include/sys/socket.h
/usr/include/sys/stat.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/sys/uio.h
/usr/include/syslog.h
/usr/include/time.h
/usr/include/unistd.h
miniupnpc/miniupnpc.h
miniupnpc/miniwget.h
miniupnpc/upnpcommands.h
stunc/det_nat.h
/usr/include/alloca.h
/usr/include/arpa/nameser.h
/usr/include/bits/byteswap.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/in.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/netdb.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/select.h
/usr/include/bits/semaphore.h
/usr/include/bits/setjmp.h
/usr/include/bits/siginfo.h
/usr/include/bits/sigset.h
/usr/include/bits/socket.h
/usr/include/bits/socket2.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/uio.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/linux/hdlc/ioctl.h
/usr/include/linux/socket.h
/usr/include/linux/types.h
/usr/include/rpc/netdb.h
/usr/include/sched.h
/usr/include/signal.h
/usr/include/sys/cdefs.h
/usr/include/sys/param.h
/usr/include/sys/syslog.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ttydefaults.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/arpa/nameser_compat.h
/usr/include/asm/ioctls.h
/usr/include/asm/socket.h
/usr/include/asm/types.h
/usr/include/bits/endian.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/sched.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/signum.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/sockaddr.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/syslog-ldbl.h
/usr/include/bits/syslog-path.h
/usr/include/bits/syslog.h
/usr/include/bits/typesizes.h
/usr/include/gnu/stubs.h
/usr/include/limits.h
/usr/include/linux/errno.h
/usr/include/linux/limits.h
/usr/include/linux/param.h
/usr/include/linux/posix_types.h
/usr/include/linux/sockios.h
/usr/include/linux/uio.h
/usr/include/sys/bitypes.h
/usr/include/sys/ucontext.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm/errno.h
/usr/include/asm/ioctl.h
/usr/include/asm/param.h
/usr/include/asm/posix_types.h
/usr/include/asm/sigcontext.h
/usr/include/asm/sockios.h
/usr/include/bits/libc-lock.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/xopen_lim.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/linux/stddef.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/ioctl.h
/usr/include/asm/bitsperlong.h
/usr/include/bits/local_lim.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/wctype.h
/usr/include/asm-generic/bitsperlong.h
/usr/include/asm-generic/errno-base.h
